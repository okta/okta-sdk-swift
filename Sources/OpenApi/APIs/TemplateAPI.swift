//
// TemplateAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class TemplateAPI {
    /**
     Add SMS Template
     
     - parameter smsTemplate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSmsTemplate(smsTemplate: SmsTemplate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SmsTemplate?, _ error: Error?) -> Void)) {
        createSmsTemplateWithRequestBuilder(smsTemplate: smsTemplate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add SMS Template
     - POST /api/v1/templates/sms
     - Adds a new custom SMS template to your organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter smsTemplate: (body)  
     - returns: RequestBuilder<SmsTemplate> 
     */
    open class func createSmsTemplateWithRequestBuilder(smsTemplate: SmsTemplate) -> RequestBuilder<SmsTemplate> {
        let path = "/api/v1/templates/sms"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: smsTemplate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SmsTemplate>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove SMS Template
     
     - parameter templateId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSmsTemplate(templateId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteSmsTemplateWithRequestBuilder(templateId: templateId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove SMS Template
     - DELETE /api/v1/templates/sms/{templateId}
     - Removes an SMS template.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter templateId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteSmsTemplateWithRequestBuilder(templateId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/templates/sms/{templateId}"
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get SMS Template
     
     - parameter templateId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSmsTemplate(templateId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SmsTemplate?, _ error: Error?) -> Void)) {
        getSmsTemplateWithRequestBuilder(templateId: templateId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get SMS Template
     - GET /api/v1/templates/sms/{templateId}
     - Fetches a specific template by `id`
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter templateId: (path)  
     - returns: RequestBuilder<SmsTemplate> 
     */
    open class func getSmsTemplateWithRequestBuilder(templateId: String) -> RequestBuilder<SmsTemplate> {
        var path = "/api/v1/templates/sms/{templateId}"
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SmsTemplate>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List SMS Templates
     
     - parameter templateType: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSmsTemplates(templateType: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [SmsTemplate]?, _ error: Error?) -> Void)) {
        listSmsTemplatesWithRequestBuilder(templateType: templateType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List SMS Templates
     - GET /api/v1/templates/sms
     - Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter templateType: (query)  (optional)
     - returns: RequestBuilder<[SmsTemplate]> 
     */
    open class func listSmsTemplatesWithRequestBuilder(templateType: String? = nil) -> RequestBuilder<[SmsTemplate]> {
        let path = "/api/v1/templates/sms"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "templateType": templateType?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[SmsTemplate]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Partial SMS Template Update
     
     - parameter templateId: (path)  
     - parameter smsTemplate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func partialUpdateSmsTemplate(templateId: String, smsTemplate: SmsTemplate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SmsTemplate?, _ error: Error?) -> Void)) {
        partialUpdateSmsTemplateWithRequestBuilder(templateId: templateId, smsTemplate: smsTemplate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Partial SMS Template Update
     - POST /api/v1/templates/sms/{templateId}
     - Updates only some of the SMS template properties:
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter templateId: (path)  
     - parameter smsTemplate: (body)  
     - returns: RequestBuilder<SmsTemplate> 
     */
    open class func partialUpdateSmsTemplateWithRequestBuilder(templateId: String, smsTemplate: SmsTemplate) -> RequestBuilder<SmsTemplate> {
        var path = "/api/v1/templates/sms/{templateId}"
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: smsTemplate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SmsTemplate>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update SMS Template
     
     - parameter templateId: (path)  
     - parameter smsTemplate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSmsTemplate(templateId: String, smsTemplate: SmsTemplate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SmsTemplate?, _ error: Error?) -> Void)) {
        updateSmsTemplateWithRequestBuilder(templateId: templateId, smsTemplate: smsTemplate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update SMS Template
     - PUT /api/v1/templates/sms/{templateId}
     - Updates the SMS template.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter templateId: (path)  
     - parameter smsTemplate: (body)  
     - returns: RequestBuilder<SmsTemplate> 
     */
    open class func updateSmsTemplateWithRequestBuilder(templateId: String, smsTemplate: SmsTemplate) -> RequestBuilder<SmsTemplate> {
        var path = "/api/v1/templates/sms/{templateId}"
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: smsTemplate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SmsTemplate>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
