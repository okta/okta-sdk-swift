//
// PolicyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class PolicyAPI {
    /**

     - parameter policyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activatePolicy(policyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        activatePolicyWithRequestBuilder(policyId: policyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/policies/{policyId}/lifecycle/activate
     - Activates a policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func activatePolicyWithRequestBuilder(policyId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/policies/{policyId}/lifecycle/activate"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activatePolicyRule(policyId: String, ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        activatePolicyRuleWithRequestBuilder(policyId: policyId, ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/activate
     - Activates a policy rule.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func activatePolicyRuleWithRequestBuilder(policyId: String, ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/activate"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policy: (body)  
     - parameter activate: (query)  (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPolicy(policy: Policy, activate: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Policy?, _ error: Error?) -> Void)) {
        createPolicyWithRequestBuilder(policy: policy, activate: activate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/policies
     - Creates a policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policy: (body)  
     - parameter activate: (query)  (optional, default to true)
     - returns: RequestBuilder<Policy> 
     */
    open class func createPolicyWithRequestBuilder(policy: Policy, activate: Bool? = nil) -> RequestBuilder<Policy> {
        let path = "/api/v1/policies"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policy)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "activate": activate?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Policy>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter policyRule: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPolicyRule(policyId: String, policyRule: PolicyRule, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PolicyRule?, _ error: Error?) -> Void)) {
        createPolicyRuleWithRequestBuilder(policyId: policyId, policyRule: policyRule).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/policies/{policyId}/rules
     - Creates a policy rule.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter policyRule: (body)  
     - returns: RequestBuilder<PolicyRule> 
     */
    open class func createPolicyRuleWithRequestBuilder(policyId: String, policyRule: PolicyRule) -> RequestBuilder<PolicyRule> {
        var path = "/api/v1/policies/{policyId}/rules"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyRule)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PolicyRule>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivatePolicy(policyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deactivatePolicyWithRequestBuilder(policyId: policyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/policies/{policyId}/lifecycle/deactivate
     - Deactivates a policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deactivatePolicyWithRequestBuilder(policyId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/policies/{policyId}/lifecycle/deactivate"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivatePolicyRule(policyId: String, ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deactivatePolicyRuleWithRequestBuilder(policyId: policyId, ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate
     - Deactivates a policy rule.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deactivatePolicyRuleWithRequestBuilder(policyId: String, ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePolicy(policyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deletePolicyWithRequestBuilder(policyId: policyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/policies/{policyId}
     - Removes a policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deletePolicyWithRequestBuilder(policyId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/policies/{policyId}"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePolicyRule(policyId: String, ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deletePolicyRuleWithRequestBuilder(policyId: policyId, ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/policies/{policyId}/rules/{ruleId}
     - Removes a policy rule.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deletePolicyRuleWithRequestBuilder(policyId: String, ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/policies/{policyId}/rules/{ruleId}"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPolicy(policyId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Policy?, _ error: Error?) -> Void)) {
        getPolicyWithRequestBuilder(policyId: policyId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/policies/{policyId}
     - Gets a policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<Policy> 
     */
    open class func getPolicyWithRequestBuilder(policyId: String, expand: String? = nil) -> RequestBuilder<Policy> {
        var path = "/api/v1/policies/{policyId}"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Policy>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPolicyRule(policyId: String, ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PolicyRule?, _ error: Error?) -> Void)) {
        getPolicyRuleWithRequestBuilder(policyId: policyId, ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/policies/{policyId}/rules/{ruleId}
     - Gets a policy rule.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - returns: RequestBuilder<PolicyRule> 
     */
    open class func getPolicyRuleWithRequestBuilder(policyId: String, ruleId: String) -> RequestBuilder<PolicyRule> {
        var path = "/api/v1/policies/{policyId}/rules/{ruleId}"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PolicyRule>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter type: (query)  
     - parameter status: (query)  (optional)
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listPolicies(type: String, status: String? = nil, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AuthorizationServerPolicy]?, _ error: Error?) -> Void)) {
        listPoliciesWithRequestBuilder(type: type, status: status, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/policies
     - Gets all policies with the specified type.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter type: (query)  
     - parameter status: (query)  (optional)
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<[AuthorizationServerPolicy]> 
     */
    open class func listPoliciesWithRequestBuilder(type: String, status: String? = nil, expand: String? = nil) -> RequestBuilder<[AuthorizationServerPolicy]> {
        let path = "/api/v1/policies"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[AuthorizationServerPolicy]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listPolicyRules(policyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [PolicyRule]?, _ error: Error?) -> Void)) {
        listPolicyRulesWithRequestBuilder(policyId: policyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/policies/{policyId}/rules
     - Enumerates all policy rules.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - returns: RequestBuilder<[PolicyRule]> 
     */
    open class func listPolicyRulesWithRequestBuilder(policyId: String) -> RequestBuilder<[PolicyRule]> {
        var path = "/api/v1/policies/{policyId}/rules"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[PolicyRule]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter policy: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePolicy(policyId: String, policy: Policy, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Policy?, _ error: Error?) -> Void)) {
        updatePolicyWithRequestBuilder(policyId: policyId, policy: policy).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/policies/{policyId}
     - Updates a policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter policy: (body)  
     - returns: RequestBuilder<Policy> 
     */
    open class func updatePolicyWithRequestBuilder(policyId: String, policy: Policy) -> RequestBuilder<Policy> {
        var path = "/api/v1/policies/{policyId}"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policy)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Policy>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - parameter policyRule: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePolicyRule(policyId: String, ruleId: String, policyRule: PolicyRule, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PolicyRule?, _ error: Error?) -> Void)) {
        updatePolicyRuleWithRequestBuilder(policyId: policyId, ruleId: ruleId, policyRule: policyRule).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/policies/{policyId}/rules/{ruleId}
     - Updates a policy rule.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - parameter policyRule: (body)  
     - returns: RequestBuilder<PolicyRule> 
     */
    open class func updatePolicyRuleWithRequestBuilder(policyId: String, ruleId: String, policyRule: PolicyRule) -> RequestBuilder<PolicyRule> {
        var path = "/api/v1/policies/{policyId}/rules/{ruleId}"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyRule)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<PolicyRule>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
