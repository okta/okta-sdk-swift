//
// FeatureAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class FeatureAPI {
    /**

     - parameter featureId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFeature(featureId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Feature?, _ error: Error?) -> Void)) {
        getFeatureWithRequestBuilder(featureId: featureId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/features/{featureId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter featureId: (path)  
     - returns: RequestBuilder<Feature> 
     */
    open class func getFeatureWithRequestBuilder(featureId: String) -> RequestBuilder<Feature> {
        var path = "/api/v1/features/{featureId}"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Feature>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter featureId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listFeatureDependencies(featureId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Feature]?, _ error: Error?) -> Void)) {
        listFeatureDependenciesWithRequestBuilder(featureId: featureId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/features/{featureId}/dependencies
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter featureId: (path)  
     - returns: RequestBuilder<[Feature]> 
     */
    open class func listFeatureDependenciesWithRequestBuilder(featureId: String) -> RequestBuilder<[Feature]> {
        var path = "/api/v1/features/{featureId}/dependencies"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Feature]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter featureId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listFeatureDependents(featureId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Feature]?, _ error: Error?) -> Void)) {
        listFeatureDependentsWithRequestBuilder(featureId: featureId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/features/{featureId}/dependents
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter featureId: (path)  
     - returns: RequestBuilder<[Feature]> 
     */
    open class func listFeatureDependentsWithRequestBuilder(featureId: String) -> RequestBuilder<[Feature]> {
        var path = "/api/v1/features/{featureId}/dependents"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Feature]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listFeatures(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Feature]?, _ error: Error?) -> Void)) {
        listFeaturesWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/features
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - returns: RequestBuilder<[Feature]> 
     */
    open class func listFeaturesWithRequestBuilder() -> RequestBuilder<[Feature]> {
        let path = "/api/v1/features"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Feature]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter featureId: (path)  
     - parameter lifecycle: (path)  
     - parameter mode: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateFeatureLifecycle(featureId: String, lifecycle: String, mode: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Feature?, _ error: Error?) -> Void)) {
        updateFeatureLifecycleWithRequestBuilder(featureId: featureId, lifecycle: lifecycle, mode: mode).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/features/{featureId}/{lifecycle}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter featureId: (path)  
     - parameter lifecycle: (path)  
     - parameter mode: (query)  (optional)
     - returns: RequestBuilder<Feature> 
     */
    open class func updateFeatureLifecycleWithRequestBuilder(featureId: String, lifecycle: String, mode: String? = nil) -> RequestBuilder<Feature> {
        var path = "/api/v1/features/{featureId}/{lifecycle}"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let lifecyclePreEscape = "\(APIHelper.mapValueToPathItem(lifecycle))"
        let lifecyclePostEscape = lifecyclePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lifecycle}", with: lifecyclePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "mode": mode?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Feature>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
