//
// UserProfile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct UserProfile: Codable, Hashable {

    public var city: String?
    public var costCenter: String?
    public var countryCode: String?
    public var department: String?
    public var displayName: String?
    public var division: String?
    public var email: String?
    public var employeeNumber: String?
    public var firstName: String?
    public var honorificPrefix: String?
    public var honorificSuffix: String?
    public var lastName: String?
    public var locale: String?
    public var login: String?
    public var manager: String?
    public var managerId: String?
    public var middleName: String?
    public var mobilePhone: String?
    public var nickName: String?
    public var organization: String?
    public var postalAddress: String?
    public var preferredLanguage: String?
    public var primaryPhone: String?
    public var profileUrl: String?
    public var secondEmail: String?
    public var state: String?
    public var streetAddress: String?
    public var timezone: String?
    public var title: String?
    public var userType: String?
    public var zipCode: String?

    public init(city: String? = nil, costCenter: String? = nil, countryCode: String? = nil, department: String? = nil, displayName: String? = nil, division: String? = nil, email: String? = nil, employeeNumber: String? = nil, firstName: String? = nil, honorificPrefix: String? = nil, honorificSuffix: String? = nil, lastName: String? = nil, locale: String? = nil, login: String? = nil, manager: String? = nil, managerId: String? = nil, middleName: String? = nil, mobilePhone: String? = nil, nickName: String? = nil, organization: String? = nil, postalAddress: String? = nil, preferredLanguage: String? = nil, primaryPhone: String? = nil, profileUrl: String? = nil, secondEmail: String? = nil, state: String? = nil, streetAddress: String? = nil, timezone: String? = nil, title: String? = nil, userType: String? = nil, zipCode: String? = nil) {
        self.city = city
        self.costCenter = costCenter
        self.countryCode = countryCode
        self.department = department
        self.displayName = displayName
        self.division = division
        self.email = email
        self.employeeNumber = employeeNumber
        self.firstName = firstName
        self.honorificPrefix = honorificPrefix
        self.honorificSuffix = honorificSuffix
        self.lastName = lastName
        self.locale = locale
        self.login = login
        self.manager = manager
        self.managerId = managerId
        self.middleName = middleName
        self.mobilePhone = mobilePhone
        self.nickName = nickName
        self.organization = organization
        self.postalAddress = postalAddress
        self.preferredLanguage = preferredLanguage
        self.primaryPhone = primaryPhone
        self.profileUrl = profileUrl
        self.secondEmail = secondEmail
        self.state = state
        self.streetAddress = streetAddress
        self.timezone = timezone
        self.title = title
        self.userType = userType
        self.zipCode = zipCode
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case city
        case costCenter
        case countryCode
        case department
        case displayName
        case division
        case email
        case employeeNumber
        case firstName
        case honorificPrefix
        case honorificSuffix
        case lastName
        case locale
        case login
        case manager
        case managerId
        case middleName
        case mobilePhone
        case nickName
        case organization
        case postalAddress
        case preferredLanguage
        case primaryPhone
        case profileUrl
        case secondEmail
        case state
        case streetAddress
        case timezone
        case title
        case userType
        case zipCode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(costCenter, forKey: .costCenter)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(department, forKey: .department)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(division, forKey: .division)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(employeeNumber, forKey: .employeeNumber)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(honorificPrefix, forKey: .honorificPrefix)
        try container.encodeIfPresent(honorificSuffix, forKey: .honorificSuffix)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(login, forKey: .login)
        try container.encodeIfPresent(manager, forKey: .manager)
        try container.encodeIfPresent(managerId, forKey: .managerId)
        try container.encodeIfPresent(middleName, forKey: .middleName)
        try container.encodeIfPresent(mobilePhone, forKey: .mobilePhone)
        try container.encodeIfPresent(nickName, forKey: .nickName)
        try container.encodeIfPresent(organization, forKey: .organization)
        try container.encodeIfPresent(postalAddress, forKey: .postalAddress)
        try container.encodeIfPresent(preferredLanguage, forKey: .preferredLanguage)
        try container.encodeIfPresent(primaryPhone, forKey: .primaryPhone)
        try container.encodeIfPresent(profileUrl, forKey: .profileUrl)
        try container.encodeIfPresent(secondEmail, forKey: .secondEmail)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(streetAddress, forKey: .streetAddress)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(userType, forKey: .userType)
        try container.encodeIfPresent(zipCode, forKey: .zipCode)
    }



}
