//
// SocialAuthToken.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class SocialAuthToken: Codable, Hashable {

    public enum TokenType: String, Codable, CaseIterable {
        case access = "ACCESS"
        case refresh = "REFRESH"
    }
    public var expiresAt: Date?
    public var id: String?
    public var scopes: [String]?
    public var token: String?
    public var tokenAuthScheme: String?
    public var tokenType: TokenType?

    public init(expiresAt: Date? = nil, id: String? = nil, scopes: [String]? = nil, token: String? = nil, tokenAuthScheme: String? = nil, tokenType: TokenType? = nil) {
        self.expiresAt = expiresAt
        self.id = id
        self.scopes = scopes
        self.token = token
        self.tokenAuthScheme = tokenAuthScheme
        self.tokenType = tokenType
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expiresAt
        case id
        case scopes
        case token
        case tokenAuthScheme
        case tokenType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(tokenAuthScheme, forKey: .tokenAuthScheme)
        try container.encodeIfPresent(tokenType, forKey: .tokenType)
    }



    public static func == (lhs: SocialAuthToken, rhs: SocialAuthToken) -> Bool {
        lhs.expiresAt == rhs.expiresAt &&
        lhs.id == rhs.id &&
        lhs.scopes == rhs.scopes &&
        lhs.token == rhs.token &&
        lhs.tokenAuthScheme == rhs.tokenAuthScheme &&
        lhs.tokenType == rhs.tokenType
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(expiresAt?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(scopes?.hashValue)
        hasher.combine(token?.hashValue)
        hasher.combine(tokenAuthScheme?.hashValue)
        hasher.combine(tokenType?.hashValue)
        
    }

}
