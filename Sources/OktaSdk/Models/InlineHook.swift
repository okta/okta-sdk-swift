//
// InlineHook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class InlineHook: Codable, Hashable {

    public var links: [String: AnyCodable]?
    public var channel: InlineHookChannel?
    public var created: Date?
    public var id: String?
    public var lastUpdated: Date?
    public var name: String?
    public var status: InlineHookStatus?
    public var type: InlineHookType?
    public var version: String?

    public init(links: [String: AnyCodable]? = nil, channel: InlineHookChannel? = nil, created: Date? = nil, id: String? = nil, lastUpdated: Date? = nil, name: String? = nil, status: InlineHookStatus? = nil, type: InlineHookType? = nil, version: String? = nil) {
        self.links = links
        self.channel = channel
        self.created = created
        self.id = id
        self.lastUpdated = lastUpdated
        self.name = name
        self.status = status
        self.type = type
        self.version = version
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case links = "_links"
        case channel
        case created
        case id
        case lastUpdated
        case name
        case status
        case type
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(channel, forKey: .channel)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(version, forKey: .version)
    }



    public static func == (lhs: InlineHook, rhs: InlineHook) -> Bool {
        lhs.links == rhs.links &&
        lhs.channel == rhs.channel &&
        lhs.created == rhs.created &&
        lhs.id == rhs.id &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.name == rhs.name &&
        lhs.status == rhs.status &&
        lhs.type == rhs.type &&
        lhs.version == rhs.version
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(links?.hashValue)
        hasher.combine(channel?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(type?.hashValue)
        hasher.combine(version?.hashValue)
        
    }

}
