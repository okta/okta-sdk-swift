//
// SamlAttributeStatement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class SamlAttributeStatement: Codable, Hashable {

    public var name: String?
    public var namespace: String?
    public var type: String?
    public var filterType: String?
    public var filterValue: String?
    public var values: [String]?

    public init(name: String? = nil, namespace: String? = nil, type: String? = nil, filterType: String? = nil, filterValue: String? = nil, values: [String]? = nil) {
        self.name = name
        self.namespace = namespace
        self.type = type
        self.filterType = filterType
        self.filterValue = filterValue
        self.values = values
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case namespace
        case type
        case filterType
        case filterValue
        case values
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(filterType, forKey: .filterType)
        try container.encodeIfPresent(filterValue, forKey: .filterValue)
        try container.encodeIfPresent(values, forKey: .values)
    }



    public static func == (lhs: SamlAttributeStatement, rhs: SamlAttributeStatement) -> Bool {
        lhs.name == rhs.name &&
        lhs.namespace == rhs.namespace &&
        lhs.type == rhs.type &&
        lhs.filterType == rhs.filterType &&
        lhs.filterValue == rhs.filterValue &&
        lhs.values == rhs.values
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name?.hashValue)
        hasher.combine(namespace?.hashValue)
        hasher.combine(type?.hashValue)
        hasher.combine(filterType?.hashValue)
        hasher.combine(filterValue?.hashValue)
        hasher.combine(values?.hashValue)
        
    }

}
