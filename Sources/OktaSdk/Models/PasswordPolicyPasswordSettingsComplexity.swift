//
// PasswordPolicyPasswordSettingsComplexity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class PasswordPolicyPasswordSettingsComplexity: Codable, Hashable {

    public var dictionary: PasswordDictionary?
    public var excludeAttributes: [String]?
    public var excludeUsername: Bool? = true
    public var minLength: Int?
    public var minLowerCase: Int?
    public var minNumber: Int?
    public var minSymbol: Int?
    public var minUpperCase: Int?

    public init(dictionary: PasswordDictionary? = nil, excludeAttributes: [String]? = nil, excludeUsername: Bool? = true, minLength: Int? = nil, minLowerCase: Int? = nil, minNumber: Int? = nil, minSymbol: Int? = nil, minUpperCase: Int? = nil) {
        self.dictionary = dictionary
        self.excludeAttributes = excludeAttributes
        self.excludeUsername = excludeUsername
        self.minLength = minLength
        self.minLowerCase = minLowerCase
        self.minNumber = minNumber
        self.minSymbol = minSymbol
        self.minUpperCase = minUpperCase
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dictionary
        case excludeAttributes
        case excludeUsername
        case minLength
        case minLowerCase
        case minNumber
        case minSymbol
        case minUpperCase
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dictionary, forKey: .dictionary)
        try container.encodeIfPresent(excludeAttributes, forKey: .excludeAttributes)
        try container.encodeIfPresent(excludeUsername, forKey: .excludeUsername)
        try container.encodeIfPresent(minLength, forKey: .minLength)
        try container.encodeIfPresent(minLowerCase, forKey: .minLowerCase)
        try container.encodeIfPresent(minNumber, forKey: .minNumber)
        try container.encodeIfPresent(minSymbol, forKey: .minSymbol)
        try container.encodeIfPresent(minUpperCase, forKey: .minUpperCase)
    }



    public static func == (lhs: PasswordPolicyPasswordSettingsComplexity, rhs: PasswordPolicyPasswordSettingsComplexity) -> Bool {
        lhs.dictionary == rhs.dictionary &&
        lhs.excludeAttributes == rhs.excludeAttributes &&
        lhs.excludeUsername == rhs.excludeUsername &&
        lhs.minLength == rhs.minLength &&
        lhs.minLowerCase == rhs.minLowerCase &&
        lhs.minNumber == rhs.minNumber &&
        lhs.minSymbol == rhs.minSymbol &&
        lhs.minUpperCase == rhs.minUpperCase
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(dictionary?.hashValue)
        hasher.combine(excludeAttributes?.hashValue)
        hasher.combine(excludeUsername?.hashValue)
        hasher.combine(minLength?.hashValue)
        hasher.combine(minLowerCase?.hashValue)
        hasher.combine(minNumber?.hashValue)
        hasher.combine(minSymbol?.hashValue)
        hasher.combine(minUpperCase?.hashValue)
        
    }

}
