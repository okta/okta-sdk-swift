//
// PushUserFactorProfile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class PushUserFactorProfile: Codable, Hashable {

    public var credentialId: String?
    public var deviceToken: String?
    public var deviceType: String?
    public var name: String?
    public var platform: String?
    public var version: String?

    public init(credentialId: String? = nil, deviceToken: String? = nil, deviceType: String? = nil, name: String? = nil, platform: String? = nil, version: String? = nil) {
        self.credentialId = credentialId
        self.deviceToken = deviceToken
        self.deviceType = deviceType
        self.name = name
        self.platform = platform
        self.version = version
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case credentialId
        case deviceToken
        case deviceType
        case name
        case platform
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(credentialId, forKey: .credentialId)
        try container.encodeIfPresent(deviceToken, forKey: .deviceToken)
        try container.encodeIfPresent(deviceType, forKey: .deviceType)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(version, forKey: .version)
    }



    public static func == (lhs: PushUserFactorProfile, rhs: PushUserFactorProfile) -> Bool {
        lhs.credentialId == rhs.credentialId &&
        lhs.deviceToken == rhs.deviceToken &&
        lhs.deviceType == rhs.deviceType &&
        lhs.name == rhs.name &&
        lhs.platform == rhs.platform &&
        lhs.version == rhs.version
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(credentialId?.hashValue)
        hasher.combine(deviceToken?.hashValue)
        hasher.combine(deviceType?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(platform?.hashValue)
        hasher.combine(version?.hashValue)
        
    }

}
