//
// ProvisioningGroups.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class ProvisioningGroups: Codable, Hashable {

    public enum Action: String, Codable, CaseIterable {
        case _none = "NONE"
        case append = "APPEND"
        case sync = "SYNC"
        case assign = "ASSIGN"
    }
    public var action: Action?
    public var assignments: [String]?
    public var filter: [String]?
    public var sourceAttributeName: String?

    public init(action: Action? = nil, assignments: [String]? = nil, filter: [String]? = nil, sourceAttributeName: String? = nil) {
        self.action = action
        self.assignments = assignments
        self.filter = filter
        self.sourceAttributeName = sourceAttributeName
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case action
        case assignments
        case filter
        case sourceAttributeName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(assignments, forKey: .assignments)
        try container.encodeIfPresent(filter, forKey: .filter)
        try container.encodeIfPresent(sourceAttributeName, forKey: .sourceAttributeName)
    }



    public static func == (lhs: ProvisioningGroups, rhs: ProvisioningGroups) -> Bool {
        lhs.action == rhs.action &&
        lhs.assignments == rhs.assignments &&
        lhs.filter == rhs.filter &&
        lhs.sourceAttributeName == rhs.sourceAttributeName
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(action?.hashValue)
        hasher.combine(assignments?.hashValue)
        hasher.combine(filter?.hashValue)
        hasher.combine(sourceAttributeName?.hashValue)
        
    }

}
