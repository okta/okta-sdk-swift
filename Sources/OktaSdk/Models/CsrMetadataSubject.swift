//
// CsrMetadataSubject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class CsrMetadataSubject: Codable, Hashable {

    public var commonName: String?
    public var countryName: String?
    public var localityName: String?
    public var organizationName: String?
    public var organizationalUnitName: String?
    public var stateOrProvinceName: String?

    public init(commonName: String? = nil, countryName: String? = nil, localityName: String? = nil, organizationName: String? = nil, organizationalUnitName: String? = nil, stateOrProvinceName: String? = nil) {
        self.commonName = commonName
        self.countryName = countryName
        self.localityName = localityName
        self.organizationName = organizationName
        self.organizationalUnitName = organizationalUnitName
        self.stateOrProvinceName = stateOrProvinceName
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case commonName
        case countryName
        case localityName
        case organizationName
        case organizationalUnitName
        case stateOrProvinceName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(commonName, forKey: .commonName)
        try container.encodeIfPresent(countryName, forKey: .countryName)
        try container.encodeIfPresent(localityName, forKey: .localityName)
        try container.encodeIfPresent(organizationName, forKey: .organizationName)
        try container.encodeIfPresent(organizationalUnitName, forKey: .organizationalUnitName)
        try container.encodeIfPresent(stateOrProvinceName, forKey: .stateOrProvinceName)
    }



    public static func == (lhs: CsrMetadataSubject, rhs: CsrMetadataSubject) -> Bool {
        lhs.commonName == rhs.commonName &&
        lhs.countryName == rhs.countryName &&
        lhs.localityName == rhs.localityName &&
        lhs.organizationName == rhs.organizationName &&
        lhs.organizationalUnitName == rhs.organizationalUnitName &&
        lhs.stateOrProvinceName == rhs.stateOrProvinceName
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(commonName?.hashValue)
        hasher.combine(countryName?.hashValue)
        hasher.combine(localityName?.hashValue)
        hasher.combine(organizationName?.hashValue)
        hasher.combine(organizationalUnitName?.hashValue)
        hasher.combine(stateOrProvinceName?.hashValue)
        
    }

}
