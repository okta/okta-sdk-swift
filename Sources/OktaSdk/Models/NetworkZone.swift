//
// NetworkZone.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class NetworkZone: Codable, Hashable {

    public var type: NetworkZoneType?
    public var id: String?
    public var name: String?
    public var system: Bool?
    public var usage: NetworkZoneUsage?
    public var status: NetworkZoneStatus?
    public var proxyType: String?
    public var locations: [NetworkZoneLocation]?
    public var gateways: [NetworkZoneAddress]?
    public var proxies: [NetworkZoneAddress]?
    public var asns: [String]?
    public var created: Date?
    public var lastUpdated: Date?
    public var links: [String: AnyCodable]?

    public init(type: NetworkZoneType? = nil, id: String? = nil, name: String? = nil, system: Bool? = nil, usage: NetworkZoneUsage? = nil, status: NetworkZoneStatus? = nil, proxyType: String? = nil, locations: [NetworkZoneLocation]? = nil, gateways: [NetworkZoneAddress]? = nil, proxies: [NetworkZoneAddress]? = nil, asns: [String]? = nil, created: Date? = nil, lastUpdated: Date? = nil, links: [String: AnyCodable]? = nil) {
        self.type = type
        self.id = id
        self.name = name
        self.system = system
        self.usage = usage
        self.status = status
        self.proxyType = proxyType
        self.locations = locations
        self.gateways = gateways
        self.proxies = proxies
        self.asns = asns
        self.created = created
        self.lastUpdated = lastUpdated
        self.links = links
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case id
        case name
        case system
        case usage
        case status
        case proxyType
        case locations
        case gateways
        case proxies
        case asns
        case created
        case lastUpdated
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(system, forKey: .system)
        try container.encodeIfPresent(usage, forKey: .usage)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(proxyType, forKey: .proxyType)
        try container.encodeIfPresent(locations, forKey: .locations)
        try container.encodeIfPresent(gateways, forKey: .gateways)
        try container.encodeIfPresent(proxies, forKey: .proxies)
        try container.encodeIfPresent(asns, forKey: .asns)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(links, forKey: .links)
    }



    public static func == (lhs: NetworkZone, rhs: NetworkZone) -> Bool {
        lhs.type == rhs.type &&
        lhs.id == rhs.id &&
        lhs.name == rhs.name &&
        lhs.system == rhs.system &&
        lhs.usage == rhs.usage &&
        lhs.status == rhs.status &&
        lhs.proxyType == rhs.proxyType &&
        lhs.locations == rhs.locations &&
        lhs.gateways == rhs.gateways &&
        lhs.proxies == rhs.proxies &&
        lhs.asns == rhs.asns &&
        lhs.created == rhs.created &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.links == rhs.links
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(type?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(system?.hashValue)
        hasher.combine(usage?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(proxyType?.hashValue)
        hasher.combine(locations?.hashValue)
        hasher.combine(gateways?.hashValue)
        hasher.combine(proxies?.hashValue)
        hasher.combine(asns?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(links?.hashValue)
        
    }

}
