//
// SchemeApplicationCredentials.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class SchemeApplicationCredentials: Codable, Hashable {

    public var password: PasswordCredential?
    public var revealPassword: Bool?
    public var scheme: ApplicationCredentialsScheme?
    public var signing: ApplicationCredentialsSigning?
    public var userName: String?

    public init(password: PasswordCredential? = nil, revealPassword: Bool? = nil, scheme: ApplicationCredentialsScheme? = nil, signing: ApplicationCredentialsSigning? = nil, userName: String? = nil) {
        self.password = password
        self.revealPassword = revealPassword
        self.scheme = scheme
        self.signing = signing
        self.userName = userName
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case password
        case revealPassword
        case scheme
        case signing
        case userName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(revealPassword, forKey: .revealPassword)
        try container.encodeIfPresent(scheme, forKey: .scheme)
        try container.encodeIfPresent(signing, forKey: .signing)
        try container.encodeIfPresent(userName, forKey: .userName)
    }



    public static func == (lhs: SchemeApplicationCredentials, rhs: SchemeApplicationCredentials) -> Bool {
        lhs.password == rhs.password &&
        lhs.revealPassword == rhs.revealPassword &&
        lhs.scheme == rhs.scheme &&
        lhs.signing == rhs.signing &&
        lhs.userName == rhs.userName
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(password?.hashValue)
        hasher.combine(revealPassword?.hashValue)
        hasher.combine(scheme?.hashValue)
        hasher.combine(signing?.hashValue)
        hasher.combine(userName?.hashValue)
        
    }

}
