//
// IdentityProviderPolicyRuleCondition.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class IdentityProviderPolicyRuleCondition: Codable, Hashable {

    public enum Provider: String, Codable, CaseIterable {
        case any = "ANY"
        case okta = "OKTA"
        case specificIdp = "SPECIFIC_IDP"
    }
    public var idpIds: [String]?
    public var provider: Provider?

    public init(idpIds: [String]? = nil, provider: Provider? = nil) {
        self.idpIds = idpIds
        self.provider = provider
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case idpIds
        case provider
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(idpIds, forKey: .idpIds)
        try container.encodeIfPresent(provider, forKey: .provider)
    }



    public static func == (lhs: IdentityProviderPolicyRuleCondition, rhs: IdentityProviderPolicyRuleCondition) -> Bool {
        lhs.idpIds == rhs.idpIds &&
        lhs.provider == rhs.provider
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(idpIds?.hashValue)
        hasher.combine(provider?.hashValue)
        
    }

}
