//
// UserFactor.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class UserFactor: Codable, Hashable {

    public var embedded: [String: AnyCodable]?
    public var links: [String: AnyCodable]?
    public var created: Date?
    public var factorType: FactorType?
    public var id: String?
    public var lastUpdated: Date?
    public var provider: FactorProvider?
    public var status: FactorStatus?
    public var verify: VerifyFactorRequest?

    public init(embedded: [String: AnyCodable]? = nil, links: [String: AnyCodable]? = nil, created: Date? = nil, factorType: FactorType? = nil, id: String? = nil, lastUpdated: Date? = nil, provider: FactorProvider? = nil, status: FactorStatus? = nil, verify: VerifyFactorRequest? = nil) {
        self.embedded = embedded
        self.links = links
        self.created = created
        self.factorType = factorType
        self.id = id
        self.lastUpdated = lastUpdated
        self.provider = provider
        self.status = status
        self.verify = verify
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case embedded = "_embedded"
        case links = "_links"
        case created
        case factorType
        case id
        case lastUpdated
        case provider
        case status
        case verify
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(embedded, forKey: .embedded)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(factorType, forKey: .factorType)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(verify, forKey: .verify)
    }



    public static func == (lhs: UserFactor, rhs: UserFactor) -> Bool {
        lhs.embedded == rhs.embedded &&
        lhs.links == rhs.links &&
        lhs.created == rhs.created &&
        lhs.factorType == rhs.factorType &&
        lhs.id == rhs.id &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.provider == rhs.provider &&
        lhs.status == rhs.status &&
        lhs.verify == rhs.verify
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(embedded?.hashValue)
        hasher.combine(links?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(factorType?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(provider?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(verify?.hashValue)
        
    }

}
