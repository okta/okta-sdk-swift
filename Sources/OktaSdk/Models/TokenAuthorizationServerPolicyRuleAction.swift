//
// TokenAuthorizationServerPolicyRuleAction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class TokenAuthorizationServerPolicyRuleAction: Codable, Hashable {

    public var accessTokenLifetimeMinutes: Int?
    public var refreshTokenLifetimeMinutes: Int?
    public var refreshTokenWindowMinutes: Int?

    public init(accessTokenLifetimeMinutes: Int? = nil, refreshTokenLifetimeMinutes: Int? = nil, refreshTokenWindowMinutes: Int? = nil) {
        self.accessTokenLifetimeMinutes = accessTokenLifetimeMinutes
        self.refreshTokenLifetimeMinutes = refreshTokenLifetimeMinutes
        self.refreshTokenWindowMinutes = refreshTokenWindowMinutes
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessTokenLifetimeMinutes
        case refreshTokenLifetimeMinutes
        case refreshTokenWindowMinutes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accessTokenLifetimeMinutes, forKey: .accessTokenLifetimeMinutes)
        try container.encodeIfPresent(refreshTokenLifetimeMinutes, forKey: .refreshTokenLifetimeMinutes)
        try container.encodeIfPresent(refreshTokenWindowMinutes, forKey: .refreshTokenWindowMinutes)
    }



    public static func == (lhs: TokenAuthorizationServerPolicyRuleAction, rhs: TokenAuthorizationServerPolicyRuleAction) -> Bool {
        lhs.accessTokenLifetimeMinutes == rhs.accessTokenLifetimeMinutes &&
        lhs.refreshTokenLifetimeMinutes == rhs.refreshTokenLifetimeMinutes &&
        lhs.refreshTokenWindowMinutes == rhs.refreshTokenWindowMinutes
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accessTokenLifetimeMinutes?.hashValue)
        hasher.combine(refreshTokenLifetimeMinutes?.hashValue)
        hasher.combine(refreshTokenWindowMinutes?.hashValue)
        
    }

}
