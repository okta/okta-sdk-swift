//
// UserSchemaAttribute.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class UserSchemaAttribute: Codable, Hashable {

    public var title: String?
    public var type: UserSchemaAttributeType?
    public var _required: Bool?
    public var mutability: String?
    public var scope: UserSchemaAttributeScope?
    public var _enum: [String]?
    public var oneOf: [UserSchemaAttributeEnum]?
    public var minLength: Int?
    public var maxLength: Int?
    public var description: String?
    public var permissions: [UserSchemaAttributePermission]?
    public var master: UserSchemaAttributeMaster?
    public var union: UserSchemaAttributeUnion?
    public var items: UserSchemaAttributeItems?
    public var pattern: String?
    public var unique: String?
    public var externalName: String?
    public var externalNamespace: String?

    public init(title: String? = nil, type: UserSchemaAttributeType? = nil, _required: Bool? = nil, mutability: String? = nil, scope: UserSchemaAttributeScope? = nil, _enum: [String]? = nil, oneOf: [UserSchemaAttributeEnum]? = nil, minLength: Int? = nil, maxLength: Int? = nil, description: String? = nil, permissions: [UserSchemaAttributePermission]? = nil, master: UserSchemaAttributeMaster? = nil, union: UserSchemaAttributeUnion? = nil, items: UserSchemaAttributeItems? = nil, pattern: String? = nil, unique: String? = nil, externalName: String? = nil, externalNamespace: String? = nil) {
        self.title = title
        self.type = type
        self._required = _required
        self.mutability = mutability
        self.scope = scope
        self._enum = _enum
        self.oneOf = oneOf
        self.minLength = minLength
        self.maxLength = maxLength
        self.description = description
        self.permissions = permissions
        self.master = master
        self.union = union
        self.items = items
        self.pattern = pattern
        self.unique = unique
        self.externalName = externalName
        self.externalNamespace = externalNamespace
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case type
        case _required = "required"
        case mutability
        case scope
        case _enum = "enum"
        case oneOf
        case minLength
        case maxLength
        case description
        case permissions
        case master
        case union
        case items
        case pattern
        case unique
        case externalName
        case externalNamespace
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(_required, forKey: ._required)
        try container.encodeIfPresent(mutability, forKey: .mutability)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(_enum, forKey: ._enum)
        try container.encodeIfPresent(oneOf, forKey: .oneOf)
        try container.encodeIfPresent(minLength, forKey: .minLength)
        try container.encodeIfPresent(maxLength, forKey: .maxLength)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(permissions, forKey: .permissions)
        try container.encodeIfPresent(master, forKey: .master)
        try container.encodeIfPresent(union, forKey: .union)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(pattern, forKey: .pattern)
        try container.encodeIfPresent(unique, forKey: .unique)
        try container.encodeIfPresent(externalName, forKey: .externalName)
        try container.encodeIfPresent(externalNamespace, forKey: .externalNamespace)
    }



    public static func == (lhs: UserSchemaAttribute, rhs: UserSchemaAttribute) -> Bool {
        lhs.title == rhs.title &&
        lhs.type == rhs.type &&
        lhs._required == rhs._required &&
        lhs.mutability == rhs.mutability &&
        lhs.scope == rhs.scope &&
        lhs._enum == rhs._enum &&
        lhs.oneOf == rhs.oneOf &&
        lhs.minLength == rhs.minLength &&
        lhs.maxLength == rhs.maxLength &&
        lhs.description == rhs.description &&
        lhs.permissions == rhs.permissions &&
        lhs.master == rhs.master &&
        lhs.union == rhs.union &&
        lhs.items == rhs.items &&
        lhs.pattern == rhs.pattern &&
        lhs.unique == rhs.unique &&
        lhs.externalName == rhs.externalName &&
        lhs.externalNamespace == rhs.externalNamespace
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(title?.hashValue)
        hasher.combine(type?.hashValue)
        hasher.combine(_required?.hashValue)
        hasher.combine(mutability?.hashValue)
        hasher.combine(scope?.hashValue)
        hasher.combine(_enum?.hashValue)
        hasher.combine(oneOf?.hashValue)
        hasher.combine(minLength?.hashValue)
        hasher.combine(maxLength?.hashValue)
        hasher.combine(description?.hashValue)
        hasher.combine(permissions?.hashValue)
        hasher.combine(master?.hashValue)
        hasher.combine(union?.hashValue)
        hasher.combine(items?.hashValue)
        hasher.combine(pattern?.hashValue)
        hasher.combine(unique?.hashValue)
        hasher.combine(externalName?.hashValue)
        hasher.combine(externalNamespace?.hashValue)
        
    }

}
