//
// PolicySubject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class PolicySubject: Codable, Hashable {

    public var filter: String?
    public var format: [String]?
    public var matchAttribute: String?
    public var matchType: PolicySubjectMatchType?
    public var userNameTemplate: PolicyUserNameTemplate?

    public init(filter: String? = nil, format: [String]? = nil, matchAttribute: String? = nil, matchType: PolicySubjectMatchType? = nil, userNameTemplate: PolicyUserNameTemplate? = nil) {
        self.filter = filter
        self.format = format
        self.matchAttribute = matchAttribute
        self.matchType = matchType
        self.userNameTemplate = userNameTemplate
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filter
        case format
        case matchAttribute
        case matchType
        case userNameTemplate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(filter, forKey: .filter)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(matchAttribute, forKey: .matchAttribute)
        try container.encodeIfPresent(matchType, forKey: .matchType)
        try container.encodeIfPresent(userNameTemplate, forKey: .userNameTemplate)
    }



    public static func == (lhs: PolicySubject, rhs: PolicySubject) -> Bool {
        lhs.filter == rhs.filter &&
        lhs.format == rhs.format &&
        lhs.matchAttribute == rhs.matchAttribute &&
        lhs.matchType == rhs.matchType &&
        lhs.userNameTemplate == rhs.userNameTemplate
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(filter?.hashValue)
        hasher.combine(format?.hashValue)
        hasher.combine(matchAttribute?.hashValue)
        hasher.combine(matchType?.hashValue)
        hasher.combine(userNameTemplate?.hashValue)
        
    }

}
