//
// OktaSignOnPolicyRule.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class OktaSignOnPolicyRule: Codable, Hashable {

    public var actions: OktaSignOnPolicyRuleActions?
    public var conditions: OktaSignOnPolicyRuleConditions?
    public var name: String?

    public init(actions: OktaSignOnPolicyRuleActions? = nil, conditions: OktaSignOnPolicyRuleConditions? = nil, name: String? = nil) {
        self.actions = actions
        self.conditions = conditions
        self.name = name
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actions
        case conditions
        case name
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(actions, forKey: .actions)
        try container.encodeIfPresent(conditions, forKey: .conditions)
        try container.encodeIfPresent(name, forKey: .name)
    }



    public static func == (lhs: OktaSignOnPolicyRule, rhs: OktaSignOnPolicyRule) -> Bool {
        lhs.actions == rhs.actions &&
        lhs.conditions == rhs.conditions &&
        lhs.name == rhs.name
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(actions?.hashValue)
        hasher.combine(conditions?.hashValue)
        hasher.combine(name?.hashValue)
        
    }

}
