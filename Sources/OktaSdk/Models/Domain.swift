//
// Domain.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class Domain: Codable, Hashable {

    public enum CertificateSourcetype: String, Codable, CaseIterable {
        case manual = "MANUAL"
    }
    public var certificateSourcetype: CertificateSourcetype?
    public var domain: String?

    public init(certificateSourcetype: CertificateSourcetype? = nil, domain: String? = nil) {
        self.certificateSourcetype = certificateSourcetype
        self.domain = domain
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case certificateSourcetype
        case domain
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(certificateSourcetype, forKey: .certificateSourcetype)
        try container.encodeIfPresent(domain, forKey: .domain)
    }



    public static func == (lhs: Domain, rhs: Domain) -> Bool {
        lhs.certificateSourcetype == rhs.certificateSourcetype &&
        lhs.domain == rhs.domain
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(certificateSourcetype?.hashValue)
        hasher.combine(domain?.hashValue)
        
    }

}
