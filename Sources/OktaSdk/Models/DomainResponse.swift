//
// DomainResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class DomainResponse: Codable, Hashable {

    public enum CertificateSourcetype: String, Codable, CaseIterable {
        case manual = "MANUAL"
    }
    public enum ValidationStatus: String, Codable, CaseIterable {
        case notStarted = "NOT_STARTED"
        case inProgress = "IN_PROGRESS"
        case verified = "VERIFIED"
        case completed = "COMPLETED"
    }
    public var certificateSourcetype: CertificateSourcetype?
    public var dnsRecords: [DNSRecord]?
    public var domain: String?
    public var id: String?
    public var links: DomainLinks?
    public var publicCertificate: DomainCertificateMetadata?
    public var validationStatus: ValidationStatus?

    public init(certificateSourcetype: CertificateSourcetype? = nil, dnsRecords: [DNSRecord]? = nil, domain: String? = nil, id: String? = nil, links: DomainLinks? = nil, publicCertificate: DomainCertificateMetadata? = nil, validationStatus: ValidationStatus? = nil) {
        self.certificateSourcetype = certificateSourcetype
        self.dnsRecords = dnsRecords
        self.domain = domain
        self.id = id
        self.links = links
        self.publicCertificate = publicCertificate
        self.validationStatus = validationStatus
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case certificateSourcetype
        case dnsRecords
        case domain
        case id
        case links = "_links"
        case publicCertificate
        case validationStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(certificateSourcetype, forKey: .certificateSourcetype)
        try container.encodeIfPresent(dnsRecords, forKey: .dnsRecords)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(publicCertificate, forKey: .publicCertificate)
        try container.encodeIfPresent(validationStatus, forKey: .validationStatus)
    }



    public static func == (lhs: DomainResponse, rhs: DomainResponse) -> Bool {
        lhs.certificateSourcetype == rhs.certificateSourcetype &&
        lhs.dnsRecords == rhs.dnsRecords &&
        lhs.domain == rhs.domain &&
        lhs.id == rhs.id &&
        lhs.links == rhs.links &&
        lhs.publicCertificate == rhs.publicCertificate &&
        lhs.validationStatus == rhs.validationStatus
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(certificateSourcetype?.hashValue)
        hasher.combine(dnsRecords?.hashValue)
        hasher.combine(domain?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(links?.hashValue)
        hasher.combine(publicCertificate?.hashValue)
        hasher.combine(validationStatus?.hashValue)
        
    }

}
