//
// ApplicationCredentialsOAuthClient.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class ApplicationCredentialsOAuthClient: Codable, Hashable {

    public var autoKeyRotation: Bool?
    public var clientId: String?
    public var clientSecret: String?
    public var tokenEndpointAuthMethod: OAuthEndpointAuthenticationMethod?

    public init(autoKeyRotation: Bool? = nil, clientId: String? = nil, clientSecret: String? = nil, tokenEndpointAuthMethod: OAuthEndpointAuthenticationMethod? = nil) {
        self.autoKeyRotation = autoKeyRotation
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.tokenEndpointAuthMethod = tokenEndpointAuthMethod
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case autoKeyRotation
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case tokenEndpointAuthMethod = "token_endpoint_auth_method"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(autoKeyRotation, forKey: .autoKeyRotation)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encodeIfPresent(tokenEndpointAuthMethod, forKey: .tokenEndpointAuthMethod)
    }



    public static func == (lhs: ApplicationCredentialsOAuthClient, rhs: ApplicationCredentialsOAuthClient) -> Bool {
        lhs.autoKeyRotation == rhs.autoKeyRotation &&
        lhs.clientId == rhs.clientId &&
        lhs.clientSecret == rhs.clientSecret &&
        lhs.tokenEndpointAuthMethod == rhs.tokenEndpointAuthMethod
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(autoKeyRotation?.hashValue)
        hasher.combine(clientId?.hashValue)
        hasher.combine(clientSecret?.hashValue)
        hasher.combine(tokenEndpointAuthMethod?.hashValue)
        
    }

}
