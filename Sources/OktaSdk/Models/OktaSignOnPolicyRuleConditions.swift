//
// OktaSignOnPolicyRuleConditions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class OktaSignOnPolicyRuleConditions: Codable, Hashable {

    public var authContext: PolicyRuleAuthContextCondition?
    public var network: PolicyNetworkCondition?
    public var people: PolicyPeopleCondition?

    public init(authContext: PolicyRuleAuthContextCondition? = nil, network: PolicyNetworkCondition? = nil, people: PolicyPeopleCondition? = nil) {
        self.authContext = authContext
        self.network = network
        self.people = people
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authContext
        case network
        case people
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authContext, forKey: .authContext)
        try container.encodeIfPresent(network, forKey: .network)
        try container.encodeIfPresent(people, forKey: .people)
    }



    public static func == (lhs: OktaSignOnPolicyRuleConditions, rhs: OktaSignOnPolicyRuleConditions) -> Bool {
        lhs.authContext == rhs.authContext &&
        lhs.network == rhs.network &&
        lhs.people == rhs.people
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(authContext?.hashValue)
        hasher.combine(network?.hashValue)
        hasher.combine(people?.hashValue)
        
    }

}
