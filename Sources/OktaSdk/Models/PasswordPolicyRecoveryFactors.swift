//
// PasswordPolicyRecoveryFactors.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class PasswordPolicyRecoveryFactors: Codable, Hashable {

    public var oktaCall: PasswordPolicyRecoveryFactorSettings?
    public var oktaEmail: PasswordPolicyRecoveryEmail?
    public var oktaSms: PasswordPolicyRecoveryFactorSettings?
    public var recoveryQuestion: PasswordPolicyRecoveryQuestion?

    public init(oktaCall: PasswordPolicyRecoveryFactorSettings? = nil, oktaEmail: PasswordPolicyRecoveryEmail? = nil, oktaSms: PasswordPolicyRecoveryFactorSettings? = nil, recoveryQuestion: PasswordPolicyRecoveryQuestion? = nil) {
        self.oktaCall = oktaCall
        self.oktaEmail = oktaEmail
        self.oktaSms = oktaSms
        self.recoveryQuestion = recoveryQuestion
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case oktaCall = "okta_call"
        case oktaEmail = "okta_email"
        case oktaSms = "okta_sms"
        case recoveryQuestion = "recovery_question"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(oktaCall, forKey: .oktaCall)
        try container.encodeIfPresent(oktaEmail, forKey: .oktaEmail)
        try container.encodeIfPresent(oktaSms, forKey: .oktaSms)
        try container.encodeIfPresent(recoveryQuestion, forKey: .recoveryQuestion)
    }



    public static func == (lhs: PasswordPolicyRecoveryFactors, rhs: PasswordPolicyRecoveryFactors) -> Bool {
        lhs.oktaCall == rhs.oktaCall &&
        lhs.oktaEmail == rhs.oktaEmail &&
        lhs.oktaSms == rhs.oktaSms &&
        lhs.recoveryQuestion == rhs.recoveryQuestion
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(oktaCall?.hashValue)
        hasher.combine(oktaEmail?.hashValue)
        hasher.combine(oktaSms?.hashValue)
        hasher.combine(recoveryQuestion?.hashValue)
        
    }

}
