//
// ActivateFactorRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class ActivateFactorRequest: Codable, Hashable {

    public var attestation: String?
    public var clientData: String?
    public var passCode: String?
    public var registrationData: String?
    public var stateToken: String?

    public init(attestation: String? = nil, clientData: String? = nil, passCode: String? = nil, registrationData: String? = nil, stateToken: String? = nil) {
        self.attestation = attestation
        self.clientData = clientData
        self.passCode = passCode
        self.registrationData = registrationData
        self.stateToken = stateToken
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attestation
        case clientData
        case passCode
        case registrationData
        case stateToken
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attestation, forKey: .attestation)
        try container.encodeIfPresent(clientData, forKey: .clientData)
        try container.encodeIfPresent(passCode, forKey: .passCode)
        try container.encodeIfPresent(registrationData, forKey: .registrationData)
        try container.encodeIfPresent(stateToken, forKey: .stateToken)
    }



    public static func == (lhs: ActivateFactorRequest, rhs: ActivateFactorRequest) -> Bool {
        lhs.attestation == rhs.attestation &&
        lhs.clientData == rhs.clientData &&
        lhs.passCode == rhs.passCode &&
        lhs.registrationData == rhs.registrationData &&
        lhs.stateToken == rhs.stateToken
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(attestation?.hashValue)
        hasher.combine(clientData?.hashValue)
        hasher.combine(passCode?.hashValue)
        hasher.combine(registrationData?.hashValue)
        hasher.combine(stateToken?.hashValue)
        
    }

}
