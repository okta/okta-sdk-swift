//
// DomainCertificate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class DomainCertificate: Codable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case pem = "PEM"
    }
    public var certificate: String?
    public var certificateChain: String?
    public var privateKey: String?
    public var type: ModelType?

    public init(certificate: String? = nil, certificateChain: String? = nil, privateKey: String? = nil, type: ModelType? = nil) {
        self.certificate = certificate
        self.certificateChain = certificateChain
        self.privateKey = privateKey
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case certificate
        case certificateChain
        case privateKey
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(certificate, forKey: .certificate)
        try container.encodeIfPresent(certificateChain, forKey: .certificateChain)
        try container.encodeIfPresent(privateKey, forKey: .privateKey)
        try container.encodeIfPresent(type, forKey: .type)
    }



    public static func == (lhs: DomainCertificate, rhs: DomainCertificate) -> Bool {
        lhs.certificate == rhs.certificate &&
        lhs.certificateChain == rhs.certificateChain &&
        lhs.privateKey == rhs.privateKey &&
        lhs.type == rhs.type
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(certificate?.hashValue)
        hasher.combine(certificateChain?.hashValue)
        hasher.combine(privateKey?.hashValue)
        hasher.combine(type?.hashValue)
        
    }

}
