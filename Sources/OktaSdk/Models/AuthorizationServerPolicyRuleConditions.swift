//
// AuthorizationServerPolicyRuleConditions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class AuthorizationServerPolicyRuleConditions: Codable, Hashable {

    public var people: PolicyPeopleCondition?
    public var clients: ClientPolicyCondition?
    public var grantTypes: GrantTypePolicyRuleCondition?
    public var scopes: OAuth2ScopesMediationPolicyRuleCondition?

    public init(people: PolicyPeopleCondition? = nil, clients: ClientPolicyCondition? = nil, grantTypes: GrantTypePolicyRuleCondition? = nil, scopes: OAuth2ScopesMediationPolicyRuleCondition? = nil) {
        self.people = people
        self.clients = clients
        self.grantTypes = grantTypes
        self.scopes = scopes
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case people
        case clients
        case grantTypes
        case scopes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(people, forKey: .people)
        try container.encodeIfPresent(clients, forKey: .clients)
        try container.encodeIfPresent(grantTypes, forKey: .grantTypes)
        try container.encodeIfPresent(scopes, forKey: .scopes)
    }



    public static func == (lhs: AuthorizationServerPolicyRuleConditions, rhs: AuthorizationServerPolicyRuleConditions) -> Bool {
        lhs.people == rhs.people &&
        lhs.clients == rhs.clients &&
        lhs.grantTypes == rhs.grantTypes &&
        lhs.scopes == rhs.scopes
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(people?.hashValue)
        hasher.combine(clients?.hashValue)
        hasher.combine(grantTypes?.hashValue)
        hasher.combine(scopes?.hashValue)
        
    }

}
