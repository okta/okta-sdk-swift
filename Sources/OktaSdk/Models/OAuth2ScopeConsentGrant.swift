//
// OAuth2ScopeConsentGrant.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class OAuth2ScopeConsentGrant: Codable, Hashable {

    public var embedded: [String: AnyCodable]?
    public var links: [String: AnyCodable]?
    public var clientId: String?
    public var userId: String?
    public var created: Date?
    public var createdBy: OAuth2Actor?
    public var id: String?
    public var issuer: String?
    public var lastUpdated: Date?
    public var scopeId: String?
    public var source: OAuth2ScopeConsentGrantSource?
    public var status: OAuth2ScopeConsentGrantStatus?

    public init(embedded: [String: AnyCodable]? = nil, links: [String: AnyCodable]? = nil, clientId: String? = nil, userId: String? = nil, created: Date? = nil, createdBy: OAuth2Actor? = nil, id: String? = nil, issuer: String? = nil, lastUpdated: Date? = nil, scopeId: String? = nil, source: OAuth2ScopeConsentGrantSource? = nil, status: OAuth2ScopeConsentGrantStatus? = nil) {
        self.embedded = embedded
        self.links = links
        self.clientId = clientId
        self.userId = userId
        self.created = created
        self.createdBy = createdBy
        self.id = id
        self.issuer = issuer
        self.lastUpdated = lastUpdated
        self.scopeId = scopeId
        self.source = source
        self.status = status
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case embedded = "_embedded"
        case links = "_links"
        case clientId
        case userId
        case created
        case createdBy
        case id
        case issuer
        case lastUpdated
        case scopeId
        case source
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(embedded, forKey: .embedded)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(scopeId, forKey: .scopeId)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(status, forKey: .status)
    }



    public static func == (lhs: OAuth2ScopeConsentGrant, rhs: OAuth2ScopeConsentGrant) -> Bool {
        lhs.embedded == rhs.embedded &&
        lhs.links == rhs.links &&
        lhs.clientId == rhs.clientId &&
        lhs.userId == rhs.userId &&
        lhs.created == rhs.created &&
        lhs.createdBy == rhs.createdBy &&
        lhs.id == rhs.id &&
        lhs.issuer == rhs.issuer &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.scopeId == rhs.scopeId &&
        lhs.source == rhs.source &&
        lhs.status == rhs.status
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(embedded?.hashValue)
        hasher.combine(links?.hashValue)
        hasher.combine(clientId?.hashValue)
        hasher.combine(userId?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(createdBy?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(issuer?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(scopeId?.hashValue)
        hasher.combine(source?.hashValue)
        hasher.combine(status?.hashValue)
        
    }

}
