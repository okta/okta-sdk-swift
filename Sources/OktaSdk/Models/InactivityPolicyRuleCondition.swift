//
// InactivityPolicyRuleCondition.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class InactivityPolicyRuleCondition: Codable, Hashable {

    public var number: Int?
    public var unit: String?

    public init(number: Int? = nil, unit: String? = nil) {
        self.number = number
        self.unit = unit
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case number
        case unit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(unit, forKey: .unit)
    }



    public static func == (lhs: InactivityPolicyRuleCondition, rhs: InactivityPolicyRuleCondition) -> Bool {
        lhs.number == rhs.number &&
        lhs.unit == rhs.unit
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(number?.hashValue)
        hasher.combine(unit?.hashValue)
        
    }

}
