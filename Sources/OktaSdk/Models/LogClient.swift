//
// LogClient.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class LogClient: Codable, Hashable {

    public var device: String?
    public var geographicalContext: LogGeographicalContext?
    public var id: String?
    public var ipAddress: String?
    public var userAgent: LogUserAgent?
    public var zone: String?

    public init(device: String? = nil, geographicalContext: LogGeographicalContext? = nil, id: String? = nil, ipAddress: String? = nil, userAgent: LogUserAgent? = nil, zone: String? = nil) {
        self.device = device
        self.geographicalContext = geographicalContext
        self.id = id
        self.ipAddress = ipAddress
        self.userAgent = userAgent
        self.zone = zone
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case device
        case geographicalContext
        case id
        case ipAddress
        case userAgent
        case zone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(device, forKey: .device)
        try container.encodeIfPresent(geographicalContext, forKey: .geographicalContext)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
        try container.encodeIfPresent(zone, forKey: .zone)
    }



    public static func == (lhs: LogClient, rhs: LogClient) -> Bool {
        lhs.device == rhs.device &&
        lhs.geographicalContext == rhs.geographicalContext &&
        lhs.id == rhs.id &&
        lhs.ipAddress == rhs.ipAddress &&
        lhs.userAgent == rhs.userAgent &&
        lhs.zone == rhs.zone
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(device?.hashValue)
        hasher.combine(geographicalContext?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(ipAddress?.hashValue)
        hasher.combine(userAgent?.hashValue)
        hasher.combine(zone?.hashValue)
        
    }

}
