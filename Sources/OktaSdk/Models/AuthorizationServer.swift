//
// AuthorizationServer.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class AuthorizationServer: Codable, Hashable {

    public enum IssuerMode: String, Codable, CaseIterable {
        case orgUrl = "ORG_URL"
        case customUrl = "CUSTOM_URL"
    }
    public enum Status: String, Codable, CaseIterable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
    }
    public var links: [String: AnyCodable]?
    public var audiences: [String]?
    public var created: Date?
    public var credentials: AuthorizationServerCredentials?
    public var description: String?
    public var id: String?
    public var issuer: String?
    public var issuerMode: IssuerMode?
    public var lastUpdated: Date?
    public var name: String?
    public var status: Status?

    public init(links: [String: AnyCodable]? = nil, audiences: [String]? = nil, created: Date? = nil, credentials: AuthorizationServerCredentials? = nil, description: String? = nil, id: String? = nil, issuer: String? = nil, issuerMode: IssuerMode? = nil, lastUpdated: Date? = nil, name: String? = nil, status: Status? = nil) {
        self.links = links
        self.audiences = audiences
        self.created = created
        self.credentials = credentials
        self.description = description
        self.id = id
        self.issuer = issuer
        self.issuerMode = issuerMode
        self.lastUpdated = lastUpdated
        self.name = name
        self.status = status
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case links = "_links"
        case audiences
        case created
        case credentials
        case description
        case id
        case issuer
        case issuerMode
        case lastUpdated
        case name
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(audiences, forKey: .audiences)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(credentials, forKey: .credentials)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(issuerMode, forKey: .issuerMode)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
    }



    public static func == (lhs: AuthorizationServer, rhs: AuthorizationServer) -> Bool {
        lhs.links == rhs.links &&
        lhs.audiences == rhs.audiences &&
        lhs.created == rhs.created &&
        lhs.credentials == rhs.credentials &&
        lhs.description == rhs.description &&
        lhs.id == rhs.id &&
        lhs.issuer == rhs.issuer &&
        lhs.issuerMode == rhs.issuerMode &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.name == rhs.name &&
        lhs.status == rhs.status
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(links?.hashValue)
        hasher.combine(audiences?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(credentials?.hashValue)
        hasher.combine(description?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(issuer?.hashValue)
        hasher.combine(issuerMode?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(status?.hashValue)
        
    }

}
