//
// DevicePolicyRuleCondition.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class DevicePolicyRuleCondition: Codable, Hashable {

    public enum TrustLevel: String, Codable, CaseIterable {
        case any = "ANY"
        case trusted = "TRUSTED"
    }
    public var migrated: Bool?
    public var platform: DevicePolicyRuleConditionPlatform?
    public var rooted: Bool?
    public var trustLevel: TrustLevel?

    public init(migrated: Bool? = nil, platform: DevicePolicyRuleConditionPlatform? = nil, rooted: Bool? = nil, trustLevel: TrustLevel? = nil) {
        self.migrated = migrated
        self.platform = platform
        self.rooted = rooted
        self.trustLevel = trustLevel
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case migrated
        case platform
        case rooted
        case trustLevel
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(migrated, forKey: .migrated)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(rooted, forKey: .rooted)
        try container.encodeIfPresent(trustLevel, forKey: .trustLevel)
    }



    public static func == (lhs: DevicePolicyRuleCondition, rhs: DevicePolicyRuleCondition) -> Bool {
        lhs.migrated == rhs.migrated &&
        lhs.platform == rhs.platform &&
        lhs.rooted == rhs.rooted &&
        lhs.trustLevel == rhs.trustLevel
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(migrated?.hashValue)
        hasher.combine(platform?.hashValue)
        hasher.combine(rooted?.hashValue)
        hasher.combine(trustLevel?.hashValue)
        
    }

}
