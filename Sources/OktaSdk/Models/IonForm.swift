//
// IonForm.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class IonForm: Codable, Hashable {

    public var accepts: String?
    public var href: String?
    public var method: String?
    public var name: String?
    public var produces: String?
    public var refresh: Int?
    public var rel: [String]?
    public var relatesTo: [String]?
    public var value: [IonField]?

    public init(accepts: String? = nil, href: String? = nil, method: String? = nil, name: String? = nil, produces: String? = nil, refresh: Int? = nil, rel: [String]? = nil, relatesTo: [String]? = nil, value: [IonField]? = nil) {
        self.accepts = accepts
        self.href = href
        self.method = method
        self.name = name
        self.produces = produces
        self.refresh = refresh
        self.rel = rel
        self.relatesTo = relatesTo
        self.value = value
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accepts
        case href
        case method
        case name
        case produces
        case refresh
        case rel
        case relatesTo
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accepts, forKey: .accepts)
        try container.encodeIfPresent(href, forKey: .href)
        try container.encodeIfPresent(method, forKey: .method)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(produces, forKey: .produces)
        try container.encodeIfPresent(refresh, forKey: .refresh)
        try container.encodeIfPresent(rel, forKey: .rel)
        try container.encodeIfPresent(relatesTo, forKey: .relatesTo)
        try container.encodeIfPresent(value, forKey: .value)
    }



    public static func == (lhs: IonForm, rhs: IonForm) -> Bool {
        lhs.accepts == rhs.accepts &&
        lhs.href == rhs.href &&
        lhs.method == rhs.method &&
        lhs.name == rhs.name &&
        lhs.produces == rhs.produces &&
        lhs.refresh == rhs.refresh &&
        lhs.rel == rhs.rel &&
        lhs.relatesTo == rhs.relatesTo &&
        lhs.value == rhs.value
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accepts?.hashValue)
        hasher.combine(href?.hashValue)
        hasher.combine(method?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(produces?.hashValue)
        hasher.combine(refresh?.hashValue)
        hasher.combine(rel?.hashValue)
        hasher.combine(relatesTo?.hashValue)
        hasher.combine(value?.hashValue)
        
    }

}
