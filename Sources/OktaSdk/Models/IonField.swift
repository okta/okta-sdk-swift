//
// IonField.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class IonField: Codable, Hashable {

    public var form: IonForm?
    public var label: String?
    public var mutable: Bool?
    public var name: String?
    public var _required: Bool?
    public var secret: Bool?
    public var type: String?
    public var value: [String: AnyCodable]?
    public var visible: Bool?

    public init(form: IonForm? = nil, label: String? = nil, mutable: Bool? = nil, name: String? = nil, _required: Bool? = nil, secret: Bool? = nil, type: String? = nil, value: [String: AnyCodable]? = nil, visible: Bool? = nil) {
        self.form = form
        self.label = label
        self.mutable = mutable
        self.name = name
        self._required = _required
        self.secret = secret
        self.type = type
        self.value = value
        self.visible = visible
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case form
        case label
        case mutable
        case name
        case _required = "required"
        case secret
        case type
        case value
        case visible
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(form, forKey: .form)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(mutable, forKey: .mutable)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(_required, forKey: ._required)
        try container.encodeIfPresent(secret, forKey: .secret)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(visible, forKey: .visible)
    }



    public static func == (lhs: IonField, rhs: IonField) -> Bool {
        lhs.form == rhs.form &&
        lhs.label == rhs.label &&
        lhs.mutable == rhs.mutable &&
        lhs.name == rhs.name &&
        lhs._required == rhs._required &&
        lhs.secret == rhs.secret &&
        lhs.type == rhs.type &&
        lhs.value == rhs.value &&
        lhs.visible == rhs.visible
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(form?.hashValue)
        hasher.combine(label?.hashValue)
        hasher.combine(mutable?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(_required?.hashValue)
        hasher.combine(secret?.hashValue)
        hasher.combine(type?.hashValue)
        hasher.combine(value?.hashValue)
        hasher.combine(visible?.hashValue)
        
    }

}
