//
// ApplicationGroupAssignment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class ApplicationGroupAssignment: Codable, Hashable {

    public var embedded: [String: AnyCodable]?
    public var links: [String: AnyCodable]?
    public var id: String?
    public var lastUpdated: Date?
    public var priority: Int?
    public var profile: [String: AnyCodable]?

    public init(embedded: [String: AnyCodable]? = nil, links: [String: AnyCodable]? = nil, id: String? = nil, lastUpdated: Date? = nil, priority: Int? = nil, profile: [String: AnyCodable]? = nil) {
        self.embedded = embedded
        self.links = links
        self.id = id
        self.lastUpdated = lastUpdated
        self.priority = priority
        self.profile = profile
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case embedded = "_embedded"
        case links = "_links"
        case id
        case lastUpdated
        case priority
        case profile
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(embedded, forKey: .embedded)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(profile, forKey: .profile)
    }



    public static func == (lhs: ApplicationGroupAssignment, rhs: ApplicationGroupAssignment) -> Bool {
        lhs.embedded == rhs.embedded &&
        lhs.links == rhs.links &&
        lhs.id == rhs.id &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.priority == rhs.priority &&
        lhs.profile == rhs.profile
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(embedded?.hashValue)
        hasher.combine(links?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(priority?.hashValue)
        hasher.combine(profile?.hashValue)
        
    }

}
