//
// PasswordPolicyPasswordSettingsAge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class PasswordPolicyPasswordSettingsAge: Codable, Hashable {

    public var expireWarnDays: Int?
    public var historyCount: Int?
    public var maxAgeDays: Int?
    public var minAgeMinutes: Int?

    public init(expireWarnDays: Int? = nil, historyCount: Int? = nil, maxAgeDays: Int? = nil, minAgeMinutes: Int? = nil) {
        self.expireWarnDays = expireWarnDays
        self.historyCount = historyCount
        self.maxAgeDays = maxAgeDays
        self.minAgeMinutes = minAgeMinutes
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expireWarnDays
        case historyCount
        case maxAgeDays
        case minAgeMinutes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(expireWarnDays, forKey: .expireWarnDays)
        try container.encodeIfPresent(historyCount, forKey: .historyCount)
        try container.encodeIfPresent(maxAgeDays, forKey: .maxAgeDays)
        try container.encodeIfPresent(minAgeMinutes, forKey: .minAgeMinutes)
    }



    public static func == (lhs: PasswordPolicyPasswordSettingsAge, rhs: PasswordPolicyPasswordSettingsAge) -> Bool {
        lhs.expireWarnDays == rhs.expireWarnDays &&
        lhs.historyCount == rhs.historyCount &&
        lhs.maxAgeDays == rhs.maxAgeDays &&
        lhs.minAgeMinutes == rhs.minAgeMinutes
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(expireWarnDays?.hashValue)
        hasher.combine(historyCount?.hashValue)
        hasher.combine(maxAgeDays?.hashValue)
        hasher.combine(minAgeMinutes?.hashValue)
        
    }

}
