//
// GroupRuleConditions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class GroupRuleConditions: Codable, Hashable {

    public var expression: GroupRuleExpression?
    public var people: GroupRulePeopleCondition?

    public init(expression: GroupRuleExpression? = nil, people: GroupRulePeopleCondition? = nil) {
        self.expression = expression
        self.people = people
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expression
        case people
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(expression, forKey: .expression)
        try container.encodeIfPresent(people, forKey: .people)
    }



    public static func == (lhs: GroupRuleConditions, rhs: GroupRuleConditions) -> Bool {
        lhs.expression == rhs.expression &&
        lhs.people == rhs.people
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(expression?.hashValue)
        hasher.combine(people?.hashValue)
        
    }

}
