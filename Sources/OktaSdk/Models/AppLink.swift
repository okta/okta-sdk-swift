//
// AppLink.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class AppLink: Codable, Hashable {

    public var appAssignmentId: String?
    public var appInstanceId: String?
    public var appName: String?
    public var credentialsSetup: Bool?
    public var hidden: Bool?
    public var id: String?
    public var label: String?
    public var linkUrl: String?
    public var logoUrl: String?
    public var sortOrder: Int?

    public init(appAssignmentId: String? = nil, appInstanceId: String? = nil, appName: String? = nil, credentialsSetup: Bool? = nil, hidden: Bool? = nil, id: String? = nil, label: String? = nil, linkUrl: String? = nil, logoUrl: String? = nil, sortOrder: Int? = nil) {
        self.appAssignmentId = appAssignmentId
        self.appInstanceId = appInstanceId
        self.appName = appName
        self.credentialsSetup = credentialsSetup
        self.hidden = hidden
        self.id = id
        self.label = label
        self.linkUrl = linkUrl
        self.logoUrl = logoUrl
        self.sortOrder = sortOrder
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case appAssignmentId
        case appInstanceId
        case appName
        case credentialsSetup
        case hidden
        case id
        case label
        case linkUrl
        case logoUrl
        case sortOrder
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(appAssignmentId, forKey: .appAssignmentId)
        try container.encodeIfPresent(appInstanceId, forKey: .appInstanceId)
        try container.encodeIfPresent(appName, forKey: .appName)
        try container.encodeIfPresent(credentialsSetup, forKey: .credentialsSetup)
        try container.encodeIfPresent(hidden, forKey: .hidden)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(linkUrl, forKey: .linkUrl)
        try container.encodeIfPresent(logoUrl, forKey: .logoUrl)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
    }



    public static func == (lhs: AppLink, rhs: AppLink) -> Bool {
        lhs.appAssignmentId == rhs.appAssignmentId &&
        lhs.appInstanceId == rhs.appInstanceId &&
        lhs.appName == rhs.appName &&
        lhs.credentialsSetup == rhs.credentialsSetup &&
        lhs.hidden == rhs.hidden &&
        lhs.id == rhs.id &&
        lhs.label == rhs.label &&
        lhs.linkUrl == rhs.linkUrl &&
        lhs.logoUrl == rhs.logoUrl &&
        lhs.sortOrder == rhs.sortOrder
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(appAssignmentId?.hashValue)
        hasher.combine(appInstanceId?.hashValue)
        hasher.combine(appName?.hashValue)
        hasher.combine(credentialsSetup?.hashValue)
        hasher.combine(hidden?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(label?.hashValue)
        hasher.combine(linkUrl?.hashValue)
        hasher.combine(logoUrl?.hashValue)
        hasher.combine(sortOrder?.hashValue)
        
    }

}
