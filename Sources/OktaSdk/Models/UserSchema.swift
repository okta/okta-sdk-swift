//
// UserSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class UserSchema: Codable, Hashable {

    public var id: String?
    public var schema: String?
    public var name: String?
    public var title: String?
    public var lastUpdated: String?
    public var created: String?
    public var definitions: UserSchemaDefinitions?
    public var type: String?
    public var properties: UserSchemaProperties?
    public var links: [String: AnyCodable]?

    public init(id: String? = nil, schema: String? = nil, name: String? = nil, title: String? = nil, lastUpdated: String? = nil, created: String? = nil, definitions: UserSchemaDefinitions? = nil, type: String? = nil, properties: UserSchemaProperties? = nil, links: [String: AnyCodable]? = nil) {
        self.id = id
        self.schema = schema
        self.name = name
        self.title = title
        self.lastUpdated = lastUpdated
        self.created = created
        self.definitions = definitions
        self.type = type
        self.properties = properties
        self.links = links
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case schema = "$schema"
        case name
        case title
        case lastUpdated
        case created
        case definitions
        case type
        case properties
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(schema, forKey: .schema)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(definitions, forKey: .definitions)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encodeIfPresent(links, forKey: .links)
    }



    public static func == (lhs: UserSchema, rhs: UserSchema) -> Bool {
        lhs.id == rhs.id &&
        lhs.schema == rhs.schema &&
        lhs.name == rhs.name &&
        lhs.title == rhs.title &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.created == rhs.created &&
        lhs.definitions == rhs.definitions &&
        lhs.type == rhs.type &&
        lhs.properties == rhs.properties &&
        lhs.links == rhs.links
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id?.hashValue)
        hasher.combine(schema?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(title?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(definitions?.hashValue)
        hasher.combine(type?.hashValue)
        hasher.combine(properties?.hashValue)
        hasher.combine(links?.hashValue)
        
    }

}
