//
// SmsTemplate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class SmsTemplate: Codable, Hashable {

    public var created: Date?
    public var id: String?
    public var lastUpdated: Date?
    public var name: String?
    public var template: String?
    public var translations: AnyCodable?
    public var type: SmsTemplateType?

    public init(created: Date? = nil, id: String? = nil, lastUpdated: Date? = nil, name: String? = nil, template: String? = nil, translations: AnyCodable? = nil, type: SmsTemplateType? = nil) {
        self.created = created
        self.id = id
        self.lastUpdated = lastUpdated
        self.name = name
        self.template = template
        self.translations = translations
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case created
        case id
        case lastUpdated
        case name
        case template
        case translations
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(template, forKey: .template)
        try container.encodeIfPresent(translations, forKey: .translations)
        try container.encodeIfPresent(type, forKey: .type)
    }



    public static func == (lhs: SmsTemplate, rhs: SmsTemplate) -> Bool {
        lhs.created == rhs.created &&
        lhs.id == rhs.id &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.name == rhs.name &&
        lhs.template == rhs.template &&
        lhs.translations == rhs.translations &&
        lhs.type == rhs.type
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(created?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(template?.hashValue)
        hasher.combine(translations?.hashValue)
        hasher.combine(type?.hashValue)
        
    }

}
