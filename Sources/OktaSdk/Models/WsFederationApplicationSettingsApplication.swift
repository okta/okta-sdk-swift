//
// WsFederationApplicationSettingsApplication.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class WsFederationApplicationSettingsApplication: Codable, Hashable {

    public var attributeStatements: String?
    public var audienceRestriction: String?
    public var authnContextClassRef: String?
    public var groupFilter: String?
    public var groupName: String?
    public var groupValueFormat: String?
    public var nameIDFormat: String?
    public var realm: String?
    public var siteURL: String?
    public var usernameAttribute: String?
    public var wReplyOverride: Bool?
    public var wReplyURL: String?

    public init(attributeStatements: String? = nil, audienceRestriction: String? = nil, authnContextClassRef: String? = nil, groupFilter: String? = nil, groupName: String? = nil, groupValueFormat: String? = nil, nameIDFormat: String? = nil, realm: String? = nil, siteURL: String? = nil, usernameAttribute: String? = nil, wReplyOverride: Bool? = nil, wReplyURL: String? = nil) {
        self.attributeStatements = attributeStatements
        self.audienceRestriction = audienceRestriction
        self.authnContextClassRef = authnContextClassRef
        self.groupFilter = groupFilter
        self.groupName = groupName
        self.groupValueFormat = groupValueFormat
        self.nameIDFormat = nameIDFormat
        self.realm = realm
        self.siteURL = siteURL
        self.usernameAttribute = usernameAttribute
        self.wReplyOverride = wReplyOverride
        self.wReplyURL = wReplyURL
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attributeStatements
        case audienceRestriction
        case authnContextClassRef
        case groupFilter
        case groupName
        case groupValueFormat
        case nameIDFormat
        case realm
        case siteURL
        case usernameAttribute
        case wReplyOverride
        case wReplyURL
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attributeStatements, forKey: .attributeStatements)
        try container.encodeIfPresent(audienceRestriction, forKey: .audienceRestriction)
        try container.encodeIfPresent(authnContextClassRef, forKey: .authnContextClassRef)
        try container.encodeIfPresent(groupFilter, forKey: .groupFilter)
        try container.encodeIfPresent(groupName, forKey: .groupName)
        try container.encodeIfPresent(groupValueFormat, forKey: .groupValueFormat)
        try container.encodeIfPresent(nameIDFormat, forKey: .nameIDFormat)
        try container.encodeIfPresent(realm, forKey: .realm)
        try container.encodeIfPresent(siteURL, forKey: .siteURL)
        try container.encodeIfPresent(usernameAttribute, forKey: .usernameAttribute)
        try container.encodeIfPresent(wReplyOverride, forKey: .wReplyOverride)
        try container.encodeIfPresent(wReplyURL, forKey: .wReplyURL)
    }



    public static func == (lhs: WsFederationApplicationSettingsApplication, rhs: WsFederationApplicationSettingsApplication) -> Bool {
        lhs.attributeStatements == rhs.attributeStatements &&
        lhs.audienceRestriction == rhs.audienceRestriction &&
        lhs.authnContextClassRef == rhs.authnContextClassRef &&
        lhs.groupFilter == rhs.groupFilter &&
        lhs.groupName == rhs.groupName &&
        lhs.groupValueFormat == rhs.groupValueFormat &&
        lhs.nameIDFormat == rhs.nameIDFormat &&
        lhs.realm == rhs.realm &&
        lhs.siteURL == rhs.siteURL &&
        lhs.usernameAttribute == rhs.usernameAttribute &&
        lhs.wReplyOverride == rhs.wReplyOverride &&
        lhs.wReplyURL == rhs.wReplyURL
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(attributeStatements?.hashValue)
        hasher.combine(audienceRestriction?.hashValue)
        hasher.combine(authnContextClassRef?.hashValue)
        hasher.combine(groupFilter?.hashValue)
        hasher.combine(groupName?.hashValue)
        hasher.combine(groupValueFormat?.hashValue)
        hasher.combine(nameIDFormat?.hashValue)
        hasher.combine(realm?.hashValue)
        hasher.combine(siteURL?.hashValue)
        hasher.combine(usernameAttribute?.hashValue)
        hasher.combine(wReplyOverride?.hashValue)
        hasher.combine(wReplyURL?.hashValue)
        
    }

}
