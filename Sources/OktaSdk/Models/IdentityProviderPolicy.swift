//
// IdentityProviderPolicy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class IdentityProviderPolicy: Codable, Hashable {

    public var accountLink: PolicyAccountLink?
    public var maxClockSkew: Int?
    public var provisioning: Provisioning?
    public var subject: PolicySubject?

    public init(accountLink: PolicyAccountLink? = nil, maxClockSkew: Int? = nil, provisioning: Provisioning? = nil, subject: PolicySubject? = nil) {
        self.accountLink = accountLink
        self.maxClockSkew = maxClockSkew
        self.provisioning = provisioning
        self.subject = subject
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountLink
        case maxClockSkew
        case provisioning
        case subject
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountLink, forKey: .accountLink)
        try container.encodeIfPresent(maxClockSkew, forKey: .maxClockSkew)
        try container.encodeIfPresent(provisioning, forKey: .provisioning)
        try container.encodeIfPresent(subject, forKey: .subject)
    }



    public static func == (lhs: IdentityProviderPolicy, rhs: IdentityProviderPolicy) -> Bool {
        lhs.accountLink == rhs.accountLink &&
        lhs.maxClockSkew == rhs.maxClockSkew &&
        lhs.provisioning == rhs.provisioning &&
        lhs.subject == rhs.subject
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accountLink?.hashValue)
        hasher.combine(maxClockSkew?.hashValue)
        hasher.combine(provisioning?.hashValue)
        hasher.combine(subject?.hashValue)
        
    }

}
