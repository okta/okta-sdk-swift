//
// ProvisioningConditions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class ProvisioningConditions: Codable, Hashable {

    public var deprovisioned: ProvisioningDeprovisionedCondition?
    public var suspended: ProvisioningSuspendedCondition?

    public init(deprovisioned: ProvisioningDeprovisionedCondition? = nil, suspended: ProvisioningSuspendedCondition? = nil) {
        self.deprovisioned = deprovisioned
        self.suspended = suspended
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case deprovisioned
        case suspended
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(deprovisioned, forKey: .deprovisioned)
        try container.encodeIfPresent(suspended, forKey: .suspended)
    }



    public static func == (lhs: ProvisioningConditions, rhs: ProvisioningConditions) -> Bool {
        lhs.deprovisioned == rhs.deprovisioned &&
        lhs.suspended == rhs.suspended
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(deprovisioned?.hashValue)
        hasher.combine(suspended?.hashValue)
        
    }

}
