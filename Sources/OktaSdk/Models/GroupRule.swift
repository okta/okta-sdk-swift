//
// GroupRule.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class GroupRule: Codable, Hashable {

    public var actions: GroupRuleAction?
    public var conditions: GroupRuleConditions?
    public var created: Date?
    public var id: String?
    public var lastUpdated: Date?
    public var name: String?
    public var status: GroupRuleStatus?
    public var type: String?

    public init(actions: GroupRuleAction? = nil, conditions: GroupRuleConditions? = nil, created: Date? = nil, id: String? = nil, lastUpdated: Date? = nil, name: String? = nil, status: GroupRuleStatus? = nil, type: String? = nil) {
        self.actions = actions
        self.conditions = conditions
        self.created = created
        self.id = id
        self.lastUpdated = lastUpdated
        self.name = name
        self.status = status
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actions
        case conditions
        case created
        case id
        case lastUpdated
        case name
        case status
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(actions, forKey: .actions)
        try container.encodeIfPresent(conditions, forKey: .conditions)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(type, forKey: .type)
    }



    public static func == (lhs: GroupRule, rhs: GroupRule) -> Bool {
        lhs.actions == rhs.actions &&
        lhs.conditions == rhs.conditions &&
        lhs.created == rhs.created &&
        lhs.id == rhs.id &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.name == rhs.name &&
        lhs.status == rhs.status &&
        lhs.type == rhs.type
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(actions?.hashValue)
        hasher.combine(conditions?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(type?.hashValue)
        
    }

}
