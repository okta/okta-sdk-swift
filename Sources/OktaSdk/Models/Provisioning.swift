//
// Provisioning.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class Provisioning: Codable, Hashable {

    public enum Action: String, Codable, CaseIterable {
        case auto = "AUTO"
        case callout = "CALLOUT"
        case disabled = "DISABLED"
    }
    public var action: Action?
    public var conditions: ProvisioningConditions?
    public var groups: ProvisioningGroups?
    public var profileMaster: Bool?

    public init(action: Action? = nil, conditions: ProvisioningConditions? = nil, groups: ProvisioningGroups? = nil, profileMaster: Bool? = nil) {
        self.action = action
        self.conditions = conditions
        self.groups = groups
        self.profileMaster = profileMaster
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case action
        case conditions
        case groups
        case profileMaster
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(conditions, forKey: .conditions)
        try container.encodeIfPresent(groups, forKey: .groups)
        try container.encodeIfPresent(profileMaster, forKey: .profileMaster)
    }



    public static func == (lhs: Provisioning, rhs: Provisioning) -> Bool {
        lhs.action == rhs.action &&
        lhs.conditions == rhs.conditions &&
        lhs.groups == rhs.groups &&
        lhs.profileMaster == rhs.profileMaster
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(action?.hashValue)
        hasher.combine(conditions?.hashValue)
        hasher.combine(groups?.hashValue)
        hasher.combine(profileMaster?.hashValue)
        
    }

}
