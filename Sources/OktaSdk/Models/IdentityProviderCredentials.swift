//
// IdentityProviderCredentials.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class IdentityProviderCredentials: Codable, Hashable {

    public var client: IdentityProviderCredentialsClient?
    public var signing: IdentityProviderCredentialsSigning?
    public var trust: IdentityProviderCredentialsTrust?

    public init(client: IdentityProviderCredentialsClient? = nil, signing: IdentityProviderCredentialsSigning? = nil, trust: IdentityProviderCredentialsTrust? = nil) {
        self.client = client
        self.signing = signing
        self.trust = trust
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case client
        case signing
        case trust
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(client, forKey: .client)
        try container.encodeIfPresent(signing, forKey: .signing)
        try container.encodeIfPresent(trust, forKey: .trust)
    }



    public static func == (lhs: IdentityProviderCredentials, rhs: IdentityProviderCredentials) -> Bool {
        lhs.client == rhs.client &&
        lhs.signing == rhs.signing &&
        lhs.trust == rhs.trust
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(client?.hashValue)
        hasher.combine(signing?.hashValue)
        hasher.combine(trust?.hashValue)
        
    }

}
