//
// IdentityProvider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class IdentityProvider: Codable, Hashable {

    public enum IssuerMode: String, Codable, CaseIterable {
        case orgUrl = "ORG_URL"
        case customUrlDomain = "CUSTOM_URL_DOMAIN"
    }
    public enum Status: String, Codable, CaseIterable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case saml2 = "SAML2"
        case google = "GOOGLE"
        case facebook = "FACEBOOK"
        case linkedin = "LINKEDIN"
        case microsoft = "MICROSOFT"
        case oidc = "OIDC"
        case okta = "OKTA"
        case iwa = "IWA"
        case agentlessDSSO = "AgentlessDSSO"
        case x509 = "X509"
    }
    public var links: [String: AnyCodable]?
    public var created: Date?
    public var id: String?
    public var issuerMode: IssuerMode?
    public var lastUpdated: Date?
    public var name: String?
    public var policy: IdentityProviderPolicy?
    public var _protocol: ModelProtocol?
    public var status: Status?
    public var type: ModelType?

    public init(links: [String: AnyCodable]? = nil, created: Date? = nil, id: String? = nil, issuerMode: IssuerMode? = nil, lastUpdated: Date? = nil, name: String? = nil, policy: IdentityProviderPolicy? = nil, _protocol: ModelProtocol? = nil, status: Status? = nil, type: ModelType? = nil) {
        self.links = links
        self.created = created
        self.id = id
        self.issuerMode = issuerMode
        self.lastUpdated = lastUpdated
        self.name = name
        self.policy = policy
        self._protocol = _protocol
        self.status = status
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case links = "_links"
        case created
        case id
        case issuerMode
        case lastUpdated
        case name
        case policy
        case _protocol = "protocol"
        case status
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(issuerMode, forKey: .issuerMode)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(policy, forKey: .policy)
        try container.encodeIfPresent(_protocol, forKey: ._protocol)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(type, forKey: .type)
    }



    public static func == (lhs: IdentityProvider, rhs: IdentityProvider) -> Bool {
        lhs.links == rhs.links &&
        lhs.created == rhs.created &&
        lhs.id == rhs.id &&
        lhs.issuerMode == rhs.issuerMode &&
        lhs.lastUpdated == rhs.lastUpdated &&
        lhs.name == rhs.name &&
        lhs.policy == rhs.policy &&
        lhs._protocol == rhs._protocol &&
        lhs.status == rhs.status &&
        lhs.type == rhs.type
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(links?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(issuerMode?.hashValue)
        hasher.combine(lastUpdated?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(policy?.hashValue)
        hasher.combine(_protocol?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(type?.hashValue)
        
    }

}
