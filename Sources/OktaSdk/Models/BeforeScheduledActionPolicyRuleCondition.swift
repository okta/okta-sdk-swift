//
// BeforeScheduledActionPolicyRuleCondition.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public final class BeforeScheduledActionPolicyRuleCondition: Codable, Hashable {

    public var duration: Duration?
    public var lifecycleAction: ScheduledUserLifecycleAction?

    public init(duration: Duration? = nil, lifecycleAction: ScheduledUserLifecycleAction? = nil) {
        self.duration = duration
        self.lifecycleAction = lifecycleAction
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case duration
        case lifecycleAction
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(lifecycleAction, forKey: .lifecycleAction)
    }



    public static func == (lhs: BeforeScheduledActionPolicyRuleCondition, rhs: BeforeScheduledActionPolicyRuleCondition) -> Bool {
        lhs.duration == rhs.duration &&
        lhs.lifecycleAction == rhs.lifecycleAction
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(duration?.hashValue)
        hasher.combine(lifecycleAction?.hashValue)
        
    }

}
