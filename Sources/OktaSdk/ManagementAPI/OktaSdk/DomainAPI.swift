//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct DomainAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Replace the Certificate
         
         - parameter domainId: (path)  
         - parameter certificate: (body)  
         */
        @discardableResult
        func createCertificate(domainId: String, certificate: DomainCertificate) async throws -> OktaResponse<Empty> {
            try await send(try requestWithBody(to: "/api/v1/domains/{domainId}/certificate".expanded(using: [
                    "domainId": domainId
                ]), method: "PUT", body: certificate))
        }

        /**
         Create a Domain
         
         - parameter domain: (body)  
         */
        func createDomain(domain: Domain) async throws -> OktaResponse<DomainResponse> {
            try await send(try requestWithBody(to: "/api/v1/domains", method: "POST", body: domain))
        }

        /**
         Delete a Domain
         
         - parameter domainId: (path)  
         */
        @discardableResult
        func deleteDomain(domainId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/domains/{domainId}".expanded(using: [
                    "domainId": domainId
                ]), method: "DELETE"))
        }

        /**
         Retrieve a Domain
         
         - parameter domainId: (path)  
         */
        func getDomain(domainId: String) async throws -> OktaResponse<DomainResponse> {
            try await send(try request(to: "/api/v1/domains/{domainId}".expanded(using: [
                    "domainId": domainId
                ]), method: "GET"))
        }

        /**
         List all Domains
         
         */
        func listDomains() async throws -> OktaResponse<DomainListResponse> {
            try await send(try request(to: "/api/v1/domains", method: "GET"))
        }

        /**
         Verify a Domain
         
         - parameter domainId: (path)  
         */
        func verifyDomain(domainId: String) async throws -> OktaResponse<DomainResponse> {
            try await send(try request(to: "/api/v1/domains/{domainId}/verify".expanded(using: [
                    "domainId": domainId
                ]), method: "POST"))
        }

    }
}
