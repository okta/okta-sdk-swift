//
// AuthenticatorAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(Combine)
import Combine
#endif

public extension OktaClient {

    struct AuthenticatorAPI: OktaClientAPI {
        internal let baseURL: URL
        internal let session: URLSession


        internal func activateAuthenticatorURLRequest(authenticatorId: String) throws -> URLRequest {
            try request(to: "/api/v1/authenticators/{authenticatorId}/lifecycle/activate".expanded(using: [
                "authenticatorId": authenticatorId
            ]), method: "POST")
        }

        /**
         Activate Authenticator
         
         - parameter authenticatorId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func activateAuthenticator(authenticatorId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try activateAuthenticatorURLRequest(authenticatorId: authenticatorId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Activate Authenticator
         
         - parameter authenticatorId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func activateAuthenticatorAsync(authenticatorId: String) async throws -> OktaResponse<Empty> {
            try await send(try activateAuthenticatorURLRequest(authenticatorId: authenticatorId))
        }

        #if canImport(Combine)
        /**
         Activate Authenticator
         
         - parameter authenticatorId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func activateAuthenticator(authenticatorId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try activateAuthenticatorURLRequest(authenticatorId: authenticatorId))
        }
        #endif


        internal func deactivateAuthenticatorURLRequest(authenticatorId: String) throws -> URLRequest {
            try request(to: "/api/v1/authenticators/{authenticatorId}/lifecycle/deactivate".expanded(using: [
                "authenticatorId": authenticatorId
            ]), method: "POST")
        }

        /**
         Deactivate Authenticator
         
         - parameter authenticatorId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deactivateAuthenticator(authenticatorId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deactivateAuthenticatorURLRequest(authenticatorId: authenticatorId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Deactivate Authenticator
         
         - parameter authenticatorId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deactivateAuthenticatorAsync(authenticatorId: String) async throws -> OktaResponse<Empty> {
            try await send(try deactivateAuthenticatorURLRequest(authenticatorId: authenticatorId))
        }

        #if canImport(Combine)
        /**
         Deactivate Authenticator
         
         - parameter authenticatorId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deactivateAuthenticator(authenticatorId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deactivateAuthenticatorURLRequest(authenticatorId: authenticatorId))
        }
        #endif


        internal func getAuthenticatorURLRequest(authenticatorId: String) throws -> URLRequest {
            try request(to: "/api/v1/authenticators/{authenticatorId}".expanded(using: [
                "authenticatorId": authenticatorId
            ]), method: "GET")
        }

        /**
         Get Authenticator
         
         - parameter authenticatorId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getAuthenticator(authenticatorId: String, completion: @escaping (Result<OktaResponse<Authenticator>, Error>) -> Void) {
            do {
                send(try getAuthenticatorURLRequest(authenticatorId: authenticatorId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Get Authenticator
         
         - parameter authenticatorId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getAuthenticatorAsync(authenticatorId: String) async throws -> OktaResponse<Authenticator> {
            try await send(try getAuthenticatorURLRequest(authenticatorId: authenticatorId))
        }

        #if canImport(Combine)
        /**
         Get Authenticator
         
         - parameter authenticatorId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getAuthenticator(authenticatorId: String) throws -> AnyPublisher<OktaResponse<Authenticator>, Error> {
            publish(try getAuthenticatorURLRequest(authenticatorId: authenticatorId))
        }
        #endif


        internal func listAuthenticatorsURLRequest() throws -> URLRequest {
            try request(to: "/api/v1/authenticators", method: "GET")
        }

        /**
         List Authenticators
         
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listAuthenticators(completion: @escaping (Result<OktaResponse<[Authenticator]>, Error>) -> Void) {
            do {
                send(try listAuthenticatorsURLRequest(), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List Authenticators
         
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listAuthenticatorsAsync() async throws -> OktaResponse<[Authenticator]> {
            try await send(try listAuthenticatorsURLRequest())
        }

        #if canImport(Combine)
        /**
         List Authenticators
         
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listAuthenticators() throws -> AnyPublisher<OktaResponse<[Authenticator]>, Error> {
            publish(try listAuthenticatorsURLRequest())
        }
        #endif

    }
}
