//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct TrustedOriginAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Activate a Trusted Origin
         
         - parameter trustedOriginId: (path)  
         */
        func activateOrigin(trustedOriginId: String) async throws -> OktaResponse<TrustedOrigin> {
            try await send(try request(to: "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate".expanded(using: [
                    "trustedOriginId": trustedOriginId
                ]), method: "POST"))
        }

        /**
         Create a Trusted Origin
         
         - parameter trustedOrigin: (body)  
         */
        func createOrigin(trustedOrigin: TrustedOrigin) async throws -> OktaResponse<TrustedOrigin> {
            try await send(try requestWithBody(to: "/api/v1/trustedOrigins", method: "POST", body: trustedOrigin))
        }

        /**
         Deactivate a Trusted Origin
         
         - parameter trustedOriginId: (path)  
         */
        func deactivateOrigin(trustedOriginId: String) async throws -> OktaResponse<TrustedOrigin> {
            try await send(try request(to: "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate".expanded(using: [
                    "trustedOriginId": trustedOriginId
                ]), method: "POST"))
        }

        /**
         Delete a Trusted Origin
         
         - parameter trustedOriginId: (path)  
         */
        @discardableResult
        func deleteOrigin(trustedOriginId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/trustedOrigins/{trustedOriginId}".expanded(using: [
                    "trustedOriginId": trustedOriginId
                ]), method: "DELETE"))
        }

        /**
         Retrieve a Trusted Origin
         
         - parameter trustedOriginId: (path)  
         */
        func getOrigin(trustedOriginId: String) async throws -> OktaResponse<TrustedOrigin> {
            try await send(try request(to: "/api/v1/trustedOrigins/{trustedOriginId}".expanded(using: [
                    "trustedOriginId": trustedOriginId
                ]), method: "GET"))
        }

        /**
         List all Trusted Origins
         
         - parameter q: (query)  (optional)
         - parameter filter: (query)  (optional)
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         */
        func listOrigins(q: String? = nil, filter: String? = nil, after: String? = nil, limit: Int? = nil) async throws -> OktaResponse<[TrustedOrigin]> {
            try await send(try request(to: "/api/v1/trustedOrigins", method: "GET", query: [
                    "q": q, 
                    "filter": filter, 
                    "after": after, 
                    "limit": limit
                ]))
        }

        /**
         Replace a Trusted Origin
         
         - parameter trustedOriginId: (path)  
         - parameter trustedOrigin: (body)  
         */
        func updateOrigin(trustedOriginId: String, trustedOrigin: TrustedOrigin) async throws -> OktaResponse<TrustedOrigin> {
            try await send(try requestWithBody(to: "/api/v1/trustedOrigins/{trustedOriginId}".expanded(using: [
                    "trustedOriginId": trustedOriginId
                ]), method: "PUT", body: trustedOrigin))
        }

    }
}
