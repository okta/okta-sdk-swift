//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct FeatureAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Retrieve a Feature
         
         - parameter featureId: (path)  
         */
        public func getFeature(featureId: String) async throws -> OktaResponse<Feature> {
            try await send(try request(to: "/api/v1/features/{featureId}".expanded(using: [
                    "featureId": featureId
                ]), method: "GET"))
        }

        /**
         List all Dependencies
         
         - parameter featureId: (path)  
         */
        public func listFeatureDependencies(featureId: String) async throws -> OktaResponse<[Feature]> {
            try await send(try request(to: "/api/v1/features/{featureId}/dependencies".expanded(using: [
                    "featureId": featureId
                ]), method: "GET"))
        }

        /**
         List all Dependents
         
         - parameter featureId: (path)  
         */
        public func listFeatureDependents(featureId: String) async throws -> OktaResponse<[Feature]> {
            try await send(try request(to: "/api/v1/features/{featureId}/dependents".expanded(using: [
                    "featureId": featureId
                ]), method: "GET"))
        }

        /**
         List all Features
         
         */
        public func listFeatures() async throws -> OktaResponse<[Feature]> {
            try await send(try request(to: "/api/v1/features", method: "GET"))
        }

        /**
         Update a Feature Lifecycle
         
         - parameter featureId: (path)  
         - parameter lifecycle: (path)  
         - parameter mode: (query)  (optional)
         */
        public func updateFeatureLifecycle(featureId: String, lifecycle: String, mode: String? = nil) async throws -> OktaResponse<Feature> {
            try await send(try request(to: "/api/v1/features/{featureId}/{lifecycle}".expanded(using: [
                    "featureId": featureId, 
                    "lifecycle": lifecycle
                ]), method: "POST", query: [
                    "mode": mode
                ]))
        }

    }
}
