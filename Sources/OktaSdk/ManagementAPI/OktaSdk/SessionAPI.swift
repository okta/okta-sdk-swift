//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct SessionAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Create a Session with Session Token
         
         - parameter createSessionRequest: (body)  
         */
        public func createSession(createSessionRequest: CreateSessionRequest) async throws -> OktaResponse<Session> {
            try await send(try requestWithBody(to: "/api/v1/sessions", method: "POST", body: createSessionRequest))
        }

        /**
         Delete a Session
         
         - parameter sessionId: (path)  
         */
        @discardableResult
        public func endSession(sessionId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/sessions/{sessionId}".expanded(using: [
                    "sessionId": sessionId
                ]), method: "DELETE"))
        }

        /**
         Retrieve a Session
         
         - parameter sessionId: (path)  
         */
        public func getSession(sessionId: String) async throws -> OktaResponse<Session> {
            try await send(try request(to: "/api/v1/sessions/{sessionId}".expanded(using: [
                    "sessionId": sessionId
                ]), method: "GET"))
        }

        /**
         Refresh a Session
         
         - parameter sessionId: (path)  
         */
        public func refreshSession(sessionId: String) async throws -> OktaResponse<Session> {
            try await send(try request(to: "/api/v1/sessions/{sessionId}/lifecycle/refresh".expanded(using: [
                    "sessionId": sessionId
                ]), method: "POST"))
        }

    }
}
