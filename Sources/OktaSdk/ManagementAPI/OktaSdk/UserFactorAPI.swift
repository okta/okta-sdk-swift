//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct UserFactorAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Activate a Factor
         
         - parameter userId: (path)  
         - parameter factorId: (path)  
         - parameter body: (body)  (optional)
         */
        public func activateFactor(userId: String, factorId: String, body: ActivateFactorRequest? = nil) async throws -> OktaResponse<UserFactor> {
            try await send(try requestWithBody(to: "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate".expanded(using: [
                    "userId": userId, 
                    "factorId": factorId
                ]), method: "POST", body: body))
        }

        /**
         Delete a Factor
         
         - parameter userId: (path)  
         - parameter factorId: (path)  
         - parameter removeEnrollmentRecovery: (query)  (optional, default to false)
         */
        @discardableResult
        public func deleteFactor(userId: String, factorId: String, removeEnrollmentRecovery: Bool? = nil) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/users/{userId}/factors/{factorId}".expanded(using: [
                    "userId": userId, 
                    "factorId": factorId
                ]), method: "DELETE", query: [
                    "removeEnrollmentRecovery": removeEnrollmentRecovery
                ]))
        }

        /**
         Enroll a Factor
         
         - parameter userId: (path)  
         - parameter body: (body) Factor 
         - parameter updatePhone: (query)  (optional, default to false)
         - parameter templateId: (query) id of SMS template (only for SMS factor) (optional)
         - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
         - parameter activate: (query)  (optional, default to false)
         */
        public func enrollFactor(userId: String, body: UserFactor, updatePhone: Bool? = nil, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, activate: Bool? = nil) async throws -> OktaResponse<UserFactor> {
            try await send(try requestWithBody(to: "/api/v1/users/{userId}/factors".expanded(using: [
                    "userId": userId
                ]), method: "POST", query: [
                    "updatePhone": updatePhone, 
                    "templateId": templateId, 
                    "tokenLifetimeSeconds": tokenLifetimeSeconds, 
                    "activate": activate
                ], body: body))
        }

        /**
         Retrieve a Factor
         
         - parameter userId: (path)  
         - parameter factorId: (path)  
         */
        public func getFactor(userId: String, factorId: String) async throws -> OktaResponse<UserFactor> {
            try await send(try request(to: "/api/v1/users/{userId}/factors/{factorId}".expanded(using: [
                    "userId": userId, 
                    "factorId": factorId
                ]), method: "GET"))
        }

        /**
         Retrieve a Factor Transaction Status
         
         - parameter userId: (path)  
         - parameter factorId: (path)  
         - parameter transactionId: (path)  
         */
        public func getFactorTransactionStatus(userId: String, factorId: String, transactionId: String) async throws -> OktaResponse<VerifyUserFactorResponse> {
            try await send(try request(to: "/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}".expanded(using: [
                    "userId": userId, 
                    "factorId": factorId, 
                    "transactionId": transactionId
                ]), method: "GET"))
        }

        /**
         List all Factors
         
         - parameter userId: (path)  
         */
        public func listFactors(userId: String) async throws -> OktaResponse<[UserFactor]> {
            try await send(try request(to: "/api/v1/users/{userId}/factors".expanded(using: [
                    "userId": userId
                ]), method: "GET"))
        }

        /**
         List all Supported Factors
         
         - parameter userId: (path)  
         */
        public func listSupportedFactors(userId: String) async throws -> OktaResponse<[UserFactor]> {
            try await send(try request(to: "/api/v1/users/{userId}/factors/catalog".expanded(using: [
                    "userId": userId
                ]), method: "GET"))
        }

        /**
         List all Supported Security Questions
         
         - parameter userId: (path)  
         */
        public func listSupportedSecurityQuestions(userId: String) async throws -> OktaResponse<[SecurityQuestion]> {
            try await send(try request(to: "/api/v1/users/{userId}/factors/questions".expanded(using: [
                    "userId": userId
                ]), method: "GET"))
        }

        /**
         Verify an MFA Factor
         
         - parameter userId: (path)  
         - parameter factorId: (path)  
         - parameter templateId: (query)  (optional)
         - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
         - parameter xForwardedFor: (header)  (optional)
         - parameter userAgent: (header)  (optional)
         - parameter acceptLanguage: (header)  (optional)
         - parameter body: (body)  (optional)
         */
        public func verifyFactor(userId: String, factorId: String, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, xForwardedFor: String? = nil, userAgent: String? = nil, acceptLanguage: String? = nil, body: VerifyFactorRequest? = nil) async throws -> OktaResponse<VerifyUserFactorResponse> {
            try await send(try requestWithBody(to: "/api/v1/users/{userId}/factors/{factorId}/verify".expanded(using: [
                    "userId": userId, 
                    "factorId": factorId
                ]), method: "POST", query: [
                    "templateId": templateId, 
                    "tokenLifetimeSeconds": tokenLifetimeSeconds
                ], headers: [
                    "xForwardedFor": xForwardedFor?.stringValue, 
                    "userAgent": userAgent?.stringValue, 
                    "acceptLanguage": acceptLanguage?.stringValue
                ], body: body))
        }

    }
}
