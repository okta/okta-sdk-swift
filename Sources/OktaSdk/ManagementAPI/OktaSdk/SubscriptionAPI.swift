//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct SubscriptionAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         List all Subscriptions of a Custom Role with a specific notification type
         
         - parameter roleTypeOrRoleId: (path)  
         - parameter notificationType: (path)  
         */
        public func getRoleSubscriptionByNotificationType(roleTypeOrRoleId: String, notificationType: String) async throws -> OktaResponse<Subscription> {
            try await send(try request(to: "/api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}".expanded(using: [
                    "roleTypeOrRoleId": roleTypeOrRoleId, 
                    "notificationType": notificationType
                ]), method: "GET"))
        }

        /**
         List all Subscriptions of a Custom Role with a specific notification type
         
         - parameter roleTypeOrRoleId: (path)  
         - parameter notificationType: (path)  
         - parameter completion: Completion block
         */
        public func getRoleSubscriptionByNotificationType(roleTypeOrRoleId: String, notificationType: String, completion: @escaping (Result<OktaResponse<Subscription>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}".expanded(using: [
                        "roleTypeOrRoleId": roleTypeOrRoleId, 
                        "notificationType": notificationType
                    ]), method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List all Subscriptions by type
         
         - parameter userId: (path)  
         - parameter notificationType: (path)  
         */
        public func getUserSubscriptionByNotificationType(userId: String, notificationType: String) async throws -> OktaResponse<Subscription> {
            try await send(try request(to: "/api/v1/users/{userId}/subscriptions/{notificationType}".expanded(using: [
                    "userId": userId, 
                    "notificationType": notificationType
                ]), method: "GET"))
        }

        /**
         List all Subscriptions by type
         
         - parameter userId: (path)  
         - parameter notificationType: (path)  
         - parameter completion: Completion block
         */
        public func getUserSubscriptionByNotificationType(userId: String, notificationType: String, completion: @escaping (Result<OktaResponse<Subscription>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/users/{userId}/subscriptions/{notificationType}".expanded(using: [
                        "userId": userId, 
                        "notificationType": notificationType
                    ]), method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List all Subscriptions of a Custom Role
         
         - parameter roleTypeOrRoleId: (path)  
         */
        public func listRoleSubscriptions(roleTypeOrRoleId: String) async throws -> OktaResponse<[Subscription]> {
            try await send(try request(to: "/api/v1/roles/{roleTypeOrRoleId}/subscriptions".expanded(using: [
                    "roleTypeOrRoleId": roleTypeOrRoleId
                ]), method: "GET"))
        }

        /**
         List all Subscriptions of a Custom Role
         
         - parameter roleTypeOrRoleId: (path)  
         - parameter completion: Completion block
         */
        public func listRoleSubscriptions(roleTypeOrRoleId: String, completion: @escaping (Result<OktaResponse<[Subscription]>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/roles/{roleTypeOrRoleId}/subscriptions".expanded(using: [
                        "roleTypeOrRoleId": roleTypeOrRoleId
                    ]), method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List all Subscriptions
         
         - parameter userId: (path)  
         */
        public func listUserSubscriptions(userId: String) async throws -> OktaResponse<[Subscription]> {
            try await send(try request(to: "/api/v1/users/{userId}/subscriptions".expanded(using: [
                    "userId": userId
                ]), method: "GET"))
        }

        /**
         List all Subscriptions
         
         - parameter userId: (path)  
         - parameter completion: Completion block
         */
        public func listUserSubscriptions(userId: String, completion: @escaping (Result<OktaResponse<[Subscription]>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/users/{userId}/subscriptions".expanded(using: [
                        "userId": userId
                    ]), method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Subscribe a Custom Role to a specific notification type
         
         - parameter roleTypeOrRoleId: (path)  
         - parameter notificationType: (path)  
         */
        @discardableResult
        public func subscribeRoleSubscriptionByNotificationType(roleTypeOrRoleId: String, notificationType: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/subscribe".expanded(using: [
                    "roleTypeOrRoleId": roleTypeOrRoleId, 
                    "notificationType": notificationType
                ]), method: "POST"))
        }

        /**
         Subscribe a Custom Role to a specific notification type
         
         - parameter roleTypeOrRoleId: (path)  
         - parameter notificationType: (path)  
         - parameter completion: Completion block
         */
        public func subscribeRoleSubscriptionByNotificationType(roleTypeOrRoleId: String, notificationType: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/subscribe".expanded(using: [
                        "roleTypeOrRoleId": roleTypeOrRoleId, 
                        "notificationType": notificationType
                    ]), method: "POST"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Subscribe to a specific notification type
         
         - parameter userId: (path)  
         - parameter notificationType: (path)  
         */
        @discardableResult
        public func subscribeUserSubscriptionByNotificationType(userId: String, notificationType: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/users/{userId}/subscriptions/{notificationType}/subscribe".expanded(using: [
                    "userId": userId, 
                    "notificationType": notificationType
                ]), method: "POST"))
        }

        /**
         Subscribe to a specific notification type
         
         - parameter userId: (path)  
         - parameter notificationType: (path)  
         - parameter completion: Completion block
         */
        public func subscribeUserSubscriptionByNotificationType(userId: String, notificationType: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/users/{userId}/subscriptions/{notificationType}/subscribe".expanded(using: [
                        "userId": userId, 
                        "notificationType": notificationType
                    ]), method: "POST"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Unsubscribe a Custom Role from a specific notification type
         
         - parameter roleTypeOrRoleId: (path)  
         - parameter notificationType: (path)  
         */
        @discardableResult
        public func unsubscribeRoleSubscriptionByNotificationType(roleTypeOrRoleId: String, notificationType: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/unsubscribe".expanded(using: [
                    "roleTypeOrRoleId": roleTypeOrRoleId, 
                    "notificationType": notificationType
                ]), method: "POST"))
        }

        /**
         Unsubscribe a Custom Role from a specific notification type
         
         - parameter roleTypeOrRoleId: (path)  
         - parameter notificationType: (path)  
         - parameter completion: Completion block
         */
        public func unsubscribeRoleSubscriptionByNotificationType(roleTypeOrRoleId: String, notificationType: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/unsubscribe".expanded(using: [
                        "roleTypeOrRoleId": roleTypeOrRoleId, 
                        "notificationType": notificationType
                    ]), method: "POST"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Unsubscribe from a specific notification type
         
         - parameter userId: (path)  
         - parameter notificationType: (path)  
         */
        @discardableResult
        public func unsubscribeUserSubscriptionByNotificationType(userId: String, notificationType: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/users/{userId}/subscriptions/{notificationType}/unsubscribe".expanded(using: [
                    "userId": userId, 
                    "notificationType": notificationType
                ]), method: "POST"))
        }

        /**
         Unsubscribe from a specific notification type
         
         - parameter userId: (path)  
         - parameter notificationType: (path)  
         - parameter completion: Completion block
         */
        public func unsubscribeUserSubscriptionByNotificationType(userId: String, notificationType: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/users/{userId}/subscriptions/{notificationType}/unsubscribe".expanded(using: [
                        "userId": userId, 
                        "notificationType": notificationType
                    ]), method: "POST"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

    }
}
