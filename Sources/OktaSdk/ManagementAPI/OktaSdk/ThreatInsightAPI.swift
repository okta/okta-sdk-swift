//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(Combine)
import Combine
#endif

public extension OktaClient {

    struct ThreatInsightAPI: OktaClientAPI {
        internal let baseURL: URL
        internal let urlSession: URLSession


        internal func getCurrentConfigurationURLRequest() throws -> URLRequest {
            try request(to: "/api/v1/threats/configuration", method: "GET")
        }

        /**

         - parameter completion: completion handler to receive the data and the error objects
         */
        func getCurrentConfiguration(completion: @escaping (Result<OktaResponse<ThreatInsightConfiguration>, Error>) -> Void) {
            do {
                send(try getCurrentConfigurationURLRequest(), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        #if swift(>=5.5.1)
        /**

         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getCurrentConfiguration() async throws -> OktaResponse<ThreatInsightConfiguration> {
            try await send(try getCurrentConfigurationURLRequest())
        }
        #endif

        #if canImport(Combine)
        /**

         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getCurrentConfiguration() throws -> AnyPublisher<OktaResponse<ThreatInsightConfiguration>, Error> {
            publish(try getCurrentConfigurationURLRequest())
        }
        #endif


        internal func updateConfigurationURLRequest(threatInsightConfiguration: ThreatInsightConfiguration) throws -> URLRequest {
            try request(to: "/api/v1/threats/configuration", method: "POST", body: threatInsightConfiguration)
        }

        /**

         - parameter threatInsightConfiguration: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func updateConfiguration(threatInsightConfiguration: ThreatInsightConfiguration, completion: @escaping (Result<OktaResponse<ThreatInsightConfiguration>, Error>) -> Void) {
            do {
                send(try updateConfigurationURLRequest(threatInsightConfiguration: threatInsightConfiguration), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        #if swift(>=5.5.1)
        /**

         - parameter threatInsightConfiguration: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func updateConfiguration(threatInsightConfiguration: ThreatInsightConfiguration) async throws -> OktaResponse<ThreatInsightConfiguration> {
            try await send(try updateConfigurationURLRequest(threatInsightConfiguration: threatInsightConfiguration))
        }
        #endif

        #if canImport(Combine)
        /**

         - parameter threatInsightConfiguration: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func updateConfiguration(threatInsightConfiguration: ThreatInsightConfiguration) throws -> AnyPublisher<OktaResponse<ThreatInsightConfiguration>, Error> {
            publish(try updateConfigurationURLRequest(threatInsightConfiguration: threatInsightConfiguration))
        }
        #endif

    }
}
