//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct AgentPoolsAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Activate an Agent Pool update
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter updateId: (path) Id of the update 
         */
        func activateAgentPoolsUpdate(poolId: String, updateId: String) async throws -> OktaResponse<AgentPoolUpdate> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates/{updateId}/activate".expanded(using: [
                    "poolId": poolId, 
                    "updateId": updateId
                ]), method: "POST"))
        }

        /**
         Create an Agent Pool update
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter agentPoolUpdate: (body)  
         */
        func createAgentPoolsUpdate(poolId: String, agentPoolUpdate: AgentPoolUpdate) async throws -> OktaResponse<AgentPoolUpdate> {
            try await send(try requestWithBody(to: "/api/v1/agentPools/{poolId}/updates".expanded(using: [
                    "poolId": poolId
                ]), method: "POST", body: agentPoolUpdate))
        }

        /**
         Deactivate an Agent Pool update
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter updateId: (path) Id of the update 
         */
        func deactivateAgentPoolsUpdate(poolId: String, updateId: String) async throws -> OktaResponse<AgentPoolUpdate> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates/{updateId}/deactivate".expanded(using: [
                    "poolId": poolId, 
                    "updateId": updateId
                ]), method: "POST"))
        }

        /**
         Delete an Agent Pool update
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter updateId: (path) Id of the update 
         */
        @discardableResult
        func deleteAgentPoolsUpdate(poolId: String, updateId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates/{updateId}".expanded(using: [
                    "poolId": poolId, 
                    "updateId": updateId
                ]), method: "DELETE"))
        }

        /**
         List all Agent Pools
         
         - parameter limitPerPoolType: (query) Maximum number of AgentPools being returned (optional, default to 5)
         - parameter poolType: (query) Agent type to search for (optional)
         - parameter after: (query) The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the &#x60;Link&#x60; response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information. (optional)
         */
        func getAgentPools(limitPerPoolType: Int? = nil, poolType: AgentType? = nil, after: String? = nil) async throws -> OktaResponse<[AgentPool]> {
            try await send(try request(to: "/api/v1/agentPools", method: "GET", query: [
                    "limitPerPoolType": limitPerPoolType, 
                    "poolType": poolType, 
                    "after": after
                ]))
        }

        /**
         Retrieve an Agent Pool update by id
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter updateId: (path) Id of the update 
         */
        func getAgentPoolsUpdateInstance(poolId: String, updateId: String) async throws -> OktaResponse<AgentPoolUpdate> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates/{updateId}".expanded(using: [
                    "poolId": poolId, 
                    "updateId": updateId
                ]), method: "GET"))
        }

        /**
         Retrieve an Agent Pool update's settings
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         */
        func getAgentPoolsUpdateSettings(poolId: String) async throws -> OktaResponse<AgentPoolUpdateSetting> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates/settings".expanded(using: [
                    "poolId": poolId
                ]), method: "GET"))
        }

        /**
         List all Agent Pool updates
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter scheduled: (query) Scope the list only to scheduled or ad-hoc updates. If the parameter is not provided we will return the whole list of updates. (optional)
         */
        func getAgentPoolsUpdates(poolId: String, scheduled: Bool? = nil) async throws -> OktaResponse<[AgentPoolUpdate]> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates".expanded(using: [
                    "poolId": poolId
                ]), method: "GET", query: [
                    "scheduled": scheduled
                ]))
        }

        /**
         Pause an Agent Pool update
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter updateId: (path) Id of the update 
         */
        func pauseAgentPoolsUpdate(poolId: String, updateId: String) async throws -> OktaResponse<AgentPoolUpdate> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates/{updateId}/pause".expanded(using: [
                    "poolId": poolId, 
                    "updateId": updateId
                ]), method: "POST"))
        }

        /**
         Resume an Agent Pool update
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter updateId: (path) Id of the update 
         */
        func resumeAgentPoolsUpdate(poolId: String, updateId: String) async throws -> OktaResponse<AgentPoolUpdate> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates/{updateId}/resume".expanded(using: [
                    "poolId": poolId, 
                    "updateId": updateId
                ]), method: "POST"))
        }

        /**
         Retry an Agent Pool update
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter updateId: (path) Id of the update 
         */
        func retryAgentPoolsUpdate(poolId: String, updateId: String) async throws -> OktaResponse<AgentPoolUpdate> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates/{updateId}/retry".expanded(using: [
                    "poolId": poolId, 
                    "updateId": updateId
                ]), method: "POST"))
        }

        /**
         Update an Agent pool update settings
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter agentPoolUpdateSetting: (body)  
         */
        func setAgentPoolsUpdateSettings(poolId: String, agentPoolUpdateSetting: AgentPoolUpdateSetting) async throws -> OktaResponse<AgentPoolUpdateSetting> {
            try await send(try requestWithBody(to: "/api/v1/agentPools/{poolId}/updates/settings".expanded(using: [
                    "poolId": poolId
                ]), method: "POST", body: agentPoolUpdateSetting))
        }

        /**
         Stop an Agent Pool update
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter updateId: (path) Id of the update 
         */
        func stopAgentPoolsUpdate(poolId: String, updateId: String) async throws -> OktaResponse<AgentPoolUpdate> {
            try await send(try request(to: "/api/v1/agentPools/{poolId}/updates/{updateId}/stop".expanded(using: [
                    "poolId": poolId, 
                    "updateId": updateId
                ]), method: "POST"))
        }

        /**
         Update an Agent Pool update by id
         
         - parameter poolId: (path) Id of the agent pool for which the settings will apply 
         - parameter updateId: (path) Id of the update 
         - parameter agentPoolUpdate: (body)  
         */
        func updateAgentPoolsUpdate(poolId: String, updateId: String, agentPoolUpdate: AgentPoolUpdate) async throws -> OktaResponse<AgentPoolUpdate> {
            try await send(try requestWithBody(to: "/api/v1/agentPools/{poolId}/updates/{updateId}".expanded(using: [
                    "poolId": poolId, 
                    "updateId": updateId
                ]), method: "POST", body: agentPoolUpdate))
        }

    }
}
