//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(Combine)
import Combine
#endif

public extension OktaClient {

    struct AuthorizationServerAPI: OktaClientAPI {
        internal let baseURL: URL
        internal let session: URLSession


        internal func activateAuthorizationServerURLRequest(authServerId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/lifecycle/activate".expanded(using: [
                "authServerId": authServerId
            ]), method: "POST")
        }

        /**

         - parameter authServerId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func activateAuthorizationServer(authServerId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try activateAuthorizationServerURLRequest(authServerId: authServerId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func activateAuthorizationServer(authServerId: String) async throws -> OktaResponse<Empty> {
            try await send(try activateAuthorizationServerURLRequest(authServerId: authServerId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func activateAuthorizationServer(authServerId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try activateAuthorizationServerURLRequest(authServerId: authServerId))
        }
        #endif


        internal func activateAuthorizationServerPolicyURLRequest(authServerId: String, policyId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate".expanded(using: [
                "authServerId": authServerId, 
                "policyId": policyId
            ]), method: "POST")
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func activateAuthorizationServerPolicy(authServerId: String, policyId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try activateAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func activateAuthorizationServerPolicy(authServerId: String, policyId: String) async throws -> OktaResponse<Empty> {
            try await send(try activateAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func activateAuthorizationServerPolicy(authServerId: String, policyId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try activateAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId))
        }
        #endif


        internal func activateAuthorizationServerPolicyRuleURLRequest(authServerId: String, policyId: String, ruleId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate".expanded(using: [
                "authServerId": authServerId, 
                "policyId": policyId, 
                "ruleId": ruleId
            ]), method: "POST")
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter ruleId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func activateAuthorizationServerPolicyRule(authServerId: String, policyId: String, ruleId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try activateAuthorizationServerPolicyRuleURLRequest(authServerId: authServerId, policyId: policyId, ruleId: ruleId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter ruleId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func activateAuthorizationServerPolicyRule(authServerId: String, policyId: String, ruleId: String) async throws -> OktaResponse<Empty> {
            try await send(try activateAuthorizationServerPolicyRuleURLRequest(authServerId: authServerId, policyId: policyId, ruleId: ruleId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter ruleId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func activateAuthorizationServerPolicyRule(authServerId: String, policyId: String, ruleId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try activateAuthorizationServerPolicyRuleURLRequest(authServerId: authServerId, policyId: policyId, ruleId: ruleId))
        }
        #endif


        internal func createAuthorizationServerURLRequest(authorizationServer: AuthorizationServer) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers", method: "POST", body: authorizationServer)
        }

        /**

         - parameter authorizationServer: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func createAuthorizationServer(authorizationServer: AuthorizationServer, completion: @escaping (Result<OktaResponse<AuthorizationServer>, Error>) -> Void) {
            do {
                send(try createAuthorizationServerURLRequest(authorizationServer: authorizationServer), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authorizationServer: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func createAuthorizationServer(authorizationServer: AuthorizationServer) async throws -> OktaResponse<AuthorizationServer> {
            try await send(try createAuthorizationServerURLRequest(authorizationServer: authorizationServer))
        }

        #if canImport(Combine)
        /**

         - parameter authorizationServer: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func createAuthorizationServer(authorizationServer: AuthorizationServer) throws -> AnyPublisher<OktaResponse<AuthorizationServer>, Error> {
            publish(try createAuthorizationServerURLRequest(authorizationServer: authorizationServer))
        }
        #endif


        internal func createAuthorizationServerPolicyURLRequest(authServerId: String, authorizationServerPolicy: AuthorizationServerPolicy) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies".expanded(using: [
                "authServerId": authServerId
            ]), method: "POST", body: authorizationServerPolicy)
        }

        /**

         - parameter authServerId: (path)  
         - parameter authorizationServerPolicy: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func createAuthorizationServerPolicy(authServerId: String, authorizationServerPolicy: AuthorizationServerPolicy, completion: @escaping (Result<OktaResponse<AuthorizationServerPolicy>, Error>) -> Void) {
            do {
                send(try createAuthorizationServerPolicyURLRequest(authServerId: authServerId, authorizationServerPolicy: authorizationServerPolicy), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter authorizationServerPolicy: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func createAuthorizationServerPolicy(authServerId: String, authorizationServerPolicy: AuthorizationServerPolicy) async throws -> OktaResponse<AuthorizationServerPolicy> {
            try await send(try createAuthorizationServerPolicyURLRequest(authServerId: authServerId, authorizationServerPolicy: authorizationServerPolicy))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter authorizationServerPolicy: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func createAuthorizationServerPolicy(authServerId: String, authorizationServerPolicy: AuthorizationServerPolicy) throws -> AnyPublisher<OktaResponse<AuthorizationServerPolicy>, Error> {
            publish(try createAuthorizationServerPolicyURLRequest(authServerId: authServerId, authorizationServerPolicy: authorizationServerPolicy))
        }
        #endif


        internal func createAuthorizationServerPolicyRuleURLRequest(policyId: String, authServerId: String, authorizationServerPolicyRule: AuthorizationServerPolicyRule) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules".expanded(using: [
                "policyId": policyId, 
                "authServerId": authServerId
            ]), method: "POST", body: authorizationServerPolicyRule)
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter authorizationServerPolicyRule: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func createAuthorizationServerPolicyRule(policyId: String, authServerId: String, authorizationServerPolicyRule: AuthorizationServerPolicyRule, completion: @escaping (Result<OktaResponse<AuthorizationServerPolicyRule>, Error>) -> Void) {
            do {
                send(try createAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, authorizationServerPolicyRule: authorizationServerPolicyRule), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter authorizationServerPolicyRule: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func createAuthorizationServerPolicyRule(policyId: String, authServerId: String, authorizationServerPolicyRule: AuthorizationServerPolicyRule) async throws -> OktaResponse<AuthorizationServerPolicyRule> {
            try await send(try createAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, authorizationServerPolicyRule: authorizationServerPolicyRule))
        }

        #if canImport(Combine)
        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter authorizationServerPolicyRule: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func createAuthorizationServerPolicyRule(policyId: String, authServerId: String, authorizationServerPolicyRule: AuthorizationServerPolicyRule) throws -> AnyPublisher<OktaResponse<AuthorizationServerPolicyRule>, Error> {
            publish(try createAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, authorizationServerPolicyRule: authorizationServerPolicyRule))
        }
        #endif


        internal func createOAuth2ClaimURLRequest(authServerId: String, oAuth2Claim: OAuth2Claim) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/claims".expanded(using: [
                "authServerId": authServerId
            ]), method: "POST", body: oAuth2Claim)
        }

        /**

         - parameter authServerId: (path)  
         - parameter oAuth2Claim: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func createOAuth2Claim(authServerId: String, oAuth2Claim: OAuth2Claim, completion: @escaping (Result<OktaResponse<OAuth2Claim>, Error>) -> Void) {
            do {
                send(try createOAuth2ClaimURLRequest(authServerId: authServerId, oAuth2Claim: oAuth2Claim), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter oAuth2Claim: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func createOAuth2Claim(authServerId: String, oAuth2Claim: OAuth2Claim) async throws -> OktaResponse<OAuth2Claim> {
            try await send(try createOAuth2ClaimURLRequest(authServerId: authServerId, oAuth2Claim: oAuth2Claim))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter oAuth2Claim: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func createOAuth2Claim(authServerId: String, oAuth2Claim: OAuth2Claim) throws -> AnyPublisher<OktaResponse<OAuth2Claim>, Error> {
            publish(try createOAuth2ClaimURLRequest(authServerId: authServerId, oAuth2Claim: oAuth2Claim))
        }
        #endif


        internal func createOAuth2ScopeURLRequest(authServerId: String, oAuth2Scope: OAuth2Scope) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/scopes".expanded(using: [
                "authServerId": authServerId
            ]), method: "POST", body: oAuth2Scope)
        }

        /**

         - parameter authServerId: (path)  
         - parameter oAuth2Scope: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func createOAuth2Scope(authServerId: String, oAuth2Scope: OAuth2Scope, completion: @escaping (Result<OktaResponse<OAuth2Scope>, Error>) -> Void) {
            do {
                send(try createOAuth2ScopeURLRequest(authServerId: authServerId, oAuth2Scope: oAuth2Scope), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter oAuth2Scope: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func createOAuth2Scope(authServerId: String, oAuth2Scope: OAuth2Scope) async throws -> OktaResponse<OAuth2Scope> {
            try await send(try createOAuth2ScopeURLRequest(authServerId: authServerId, oAuth2Scope: oAuth2Scope))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter oAuth2Scope: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func createOAuth2Scope(authServerId: String, oAuth2Scope: OAuth2Scope) throws -> AnyPublisher<OktaResponse<OAuth2Scope>, Error> {
            publish(try createOAuth2ScopeURLRequest(authServerId: authServerId, oAuth2Scope: oAuth2Scope))
        }
        #endif


        internal func deactivateAuthorizationServerURLRequest(authServerId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/lifecycle/deactivate".expanded(using: [
                "authServerId": authServerId
            ]), method: "POST")
        }

        /**

         - parameter authServerId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deactivateAuthorizationServer(authServerId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deactivateAuthorizationServerURLRequest(authServerId: authServerId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deactivateAuthorizationServer(authServerId: String) async throws -> OktaResponse<Empty> {
            try await send(try deactivateAuthorizationServerURLRequest(authServerId: authServerId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deactivateAuthorizationServer(authServerId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deactivateAuthorizationServerURLRequest(authServerId: authServerId))
        }
        #endif


        internal func deactivateAuthorizationServerPolicyURLRequest(authServerId: String, policyId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate".expanded(using: [
                "authServerId": authServerId, 
                "policyId": policyId
            ]), method: "POST")
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deactivateAuthorizationServerPolicy(authServerId: String, policyId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deactivateAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deactivateAuthorizationServerPolicy(authServerId: String, policyId: String) async throws -> OktaResponse<Empty> {
            try await send(try deactivateAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deactivateAuthorizationServerPolicy(authServerId: String, policyId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deactivateAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId))
        }
        #endif


        internal func deactivateAuthorizationServerPolicyRuleURLRequest(authServerId: String, policyId: String, ruleId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate".expanded(using: [
                "authServerId": authServerId, 
                "policyId": policyId, 
                "ruleId": ruleId
            ]), method: "POST")
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter ruleId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deactivateAuthorizationServerPolicyRule(authServerId: String, policyId: String, ruleId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deactivateAuthorizationServerPolicyRuleURLRequest(authServerId: authServerId, policyId: policyId, ruleId: ruleId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter ruleId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deactivateAuthorizationServerPolicyRule(authServerId: String, policyId: String, ruleId: String) async throws -> OktaResponse<Empty> {
            try await send(try deactivateAuthorizationServerPolicyRuleURLRequest(authServerId: authServerId, policyId: policyId, ruleId: ruleId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter ruleId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deactivateAuthorizationServerPolicyRule(authServerId: String, policyId: String, ruleId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deactivateAuthorizationServerPolicyRuleURLRequest(authServerId: authServerId, policyId: policyId, ruleId: ruleId))
        }
        #endif


        internal func deleteAuthorizationServerURLRequest(authServerId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}".expanded(using: [
                "authServerId": authServerId
            ]), method: "DELETE")
        }

        /**

         - parameter authServerId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deleteAuthorizationServer(authServerId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deleteAuthorizationServerURLRequest(authServerId: authServerId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deleteAuthorizationServer(authServerId: String) async throws -> OktaResponse<Empty> {
            try await send(try deleteAuthorizationServerURLRequest(authServerId: authServerId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deleteAuthorizationServer(authServerId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deleteAuthorizationServerURLRequest(authServerId: authServerId))
        }
        #endif


        internal func deleteAuthorizationServerPolicyURLRequest(authServerId: String, policyId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}".expanded(using: [
                "authServerId": authServerId, 
                "policyId": policyId
            ]), method: "DELETE")
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deleteAuthorizationServerPolicy(authServerId: String, policyId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deleteAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deleteAuthorizationServerPolicy(authServerId: String, policyId: String) async throws -> OktaResponse<Empty> {
            try await send(try deleteAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deleteAuthorizationServerPolicy(authServerId: String, policyId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deleteAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId))
        }
        #endif


        internal func deleteAuthorizationServerPolicyRuleURLRequest(policyId: String, authServerId: String, ruleId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}".expanded(using: [
                "policyId": policyId, 
                "authServerId": authServerId, 
                "ruleId": ruleId
            ]), method: "DELETE")
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter ruleId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deleteAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deleteAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, ruleId: ruleId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter ruleId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deleteAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String) async throws -> OktaResponse<Empty> {
            try await send(try deleteAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, ruleId: ruleId))
        }

        #if canImport(Combine)
        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter ruleId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deleteAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deleteAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, ruleId: ruleId))
        }
        #endif


        internal func deleteOAuth2ClaimURLRequest(authServerId: String, claimId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/claims/{claimId}".expanded(using: [
                "authServerId": authServerId, 
                "claimId": claimId
            ]), method: "DELETE")
        }

        /**

         - parameter authServerId: (path)  
         - parameter claimId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deleteOAuth2Claim(authServerId: String, claimId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deleteOAuth2ClaimURLRequest(authServerId: authServerId, claimId: claimId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter claimId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deleteOAuth2Claim(authServerId: String, claimId: String) async throws -> OktaResponse<Empty> {
            try await send(try deleteOAuth2ClaimURLRequest(authServerId: authServerId, claimId: claimId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter claimId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deleteOAuth2Claim(authServerId: String, claimId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deleteOAuth2ClaimURLRequest(authServerId: authServerId, claimId: claimId))
        }
        #endif


        internal func deleteOAuth2ScopeURLRequest(authServerId: String, scopeId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}".expanded(using: [
                "authServerId": authServerId, 
                "scopeId": scopeId
            ]), method: "DELETE")
        }

        /**

         - parameter authServerId: (path)  
         - parameter scopeId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deleteOAuth2Scope(authServerId: String, scopeId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deleteOAuth2ScopeURLRequest(authServerId: authServerId, scopeId: scopeId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter scopeId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deleteOAuth2Scope(authServerId: String, scopeId: String) async throws -> OktaResponse<Empty> {
            try await send(try deleteOAuth2ScopeURLRequest(authServerId: authServerId, scopeId: scopeId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter scopeId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deleteOAuth2Scope(authServerId: String, scopeId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deleteOAuth2ScopeURLRequest(authServerId: authServerId, scopeId: scopeId))
        }
        #endif


        internal func getAuthorizationServerURLRequest(authServerId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}".expanded(using: [
                "authServerId": authServerId
            ]), method: "GET")
        }

        /**

         - parameter authServerId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getAuthorizationServer(authServerId: String, completion: @escaping (Result<OktaResponse<AuthorizationServer>, Error>) -> Void) {
            do {
                send(try getAuthorizationServerURLRequest(authServerId: authServerId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getAuthorizationServer(authServerId: String) async throws -> OktaResponse<AuthorizationServer> {
            try await send(try getAuthorizationServerURLRequest(authServerId: authServerId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getAuthorizationServer(authServerId: String) throws -> AnyPublisher<OktaResponse<AuthorizationServer>, Error> {
            publish(try getAuthorizationServerURLRequest(authServerId: authServerId))
        }
        #endif


        internal func getAuthorizationServerPolicyURLRequest(authServerId: String, policyId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}".expanded(using: [
                "authServerId": authServerId, 
                "policyId": policyId
            ]), method: "GET")
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getAuthorizationServerPolicy(authServerId: String, policyId: String, completion: @escaping (Result<OktaResponse<AuthorizationServerPolicy>, Error>) -> Void) {
            do {
                send(try getAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getAuthorizationServerPolicy(authServerId: String, policyId: String) async throws -> OktaResponse<AuthorizationServerPolicy> {
            try await send(try getAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getAuthorizationServerPolicy(authServerId: String, policyId: String) throws -> AnyPublisher<OktaResponse<AuthorizationServerPolicy>, Error> {
            publish(try getAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId))
        }
        #endif


        internal func getAuthorizationServerPolicyRuleURLRequest(policyId: String, authServerId: String, ruleId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}".expanded(using: [
                "policyId": policyId, 
                "authServerId": authServerId, 
                "ruleId": ruleId
            ]), method: "GET")
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter ruleId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String, completion: @escaping (Result<OktaResponse<AuthorizationServerPolicyRule>, Error>) -> Void) {
            do {
                send(try getAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, ruleId: ruleId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter ruleId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String) async throws -> OktaResponse<AuthorizationServerPolicyRule> {
            try await send(try getAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, ruleId: ruleId))
        }

        #if canImport(Combine)
        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter ruleId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String) throws -> AnyPublisher<OktaResponse<AuthorizationServerPolicyRule>, Error> {
            publish(try getAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, ruleId: ruleId))
        }
        #endif


        internal func getOAuth2ClaimURLRequest(authServerId: String, claimId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/claims/{claimId}".expanded(using: [
                "authServerId": authServerId, 
                "claimId": claimId
            ]), method: "GET")
        }

        /**

         - parameter authServerId: (path)  
         - parameter claimId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getOAuth2Claim(authServerId: String, claimId: String, completion: @escaping (Result<OktaResponse<OAuth2Claim>, Error>) -> Void) {
            do {
                send(try getOAuth2ClaimURLRequest(authServerId: authServerId, claimId: claimId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter claimId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getOAuth2Claim(authServerId: String, claimId: String) async throws -> OktaResponse<OAuth2Claim> {
            try await send(try getOAuth2ClaimURLRequest(authServerId: authServerId, claimId: claimId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter claimId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getOAuth2Claim(authServerId: String, claimId: String) throws -> AnyPublisher<OktaResponse<OAuth2Claim>, Error> {
            publish(try getOAuth2ClaimURLRequest(authServerId: authServerId, claimId: claimId))
        }
        #endif


        internal func getOAuth2ScopeURLRequest(authServerId: String, scopeId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}".expanded(using: [
                "authServerId": authServerId, 
                "scopeId": scopeId
            ]), method: "GET")
        }

        /**

         - parameter authServerId: (path)  
         - parameter scopeId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getOAuth2Scope(authServerId: String, scopeId: String, completion: @escaping (Result<OktaResponse<OAuth2Scope>, Error>) -> Void) {
            do {
                send(try getOAuth2ScopeURLRequest(authServerId: authServerId, scopeId: scopeId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter scopeId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getOAuth2Scope(authServerId: String, scopeId: String) async throws -> OktaResponse<OAuth2Scope> {
            try await send(try getOAuth2ScopeURLRequest(authServerId: authServerId, scopeId: scopeId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter scopeId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getOAuth2Scope(authServerId: String, scopeId: String) throws -> AnyPublisher<OktaResponse<OAuth2Scope>, Error> {
            publish(try getOAuth2ScopeURLRequest(authServerId: authServerId, scopeId: scopeId))
        }
        #endif


        internal func getRefreshTokenForAuthorizationServerAndClientURLRequest(authServerId: String, clientId: String, tokenId: String, expand: String? = nil) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}".expanded(using: [
                "authServerId": authServerId, 
                "clientId": clientId, 
                "tokenId": tokenId
            ]), method: "GET", query: [
                "expand": expand
            ])
        }

        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter tokenId: (path)  
         - parameter expand: (query)  (optional)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getRefreshTokenForAuthorizationServerAndClient(authServerId: String, clientId: String, tokenId: String, expand: String? = nil, completion: @escaping (Result<OktaResponse<OAuth2RefreshToken>, Error>) -> Void) {
            do {
                send(try getRefreshTokenForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId, tokenId: tokenId, expand: expand), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter tokenId: (path)  
         - parameter expand: (query)  (optional)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getRefreshTokenForAuthorizationServerAndClient(authServerId: String, clientId: String, tokenId: String, expand: String? = nil) async throws -> OktaResponse<OAuth2RefreshToken> {
            try await send(try getRefreshTokenForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId, tokenId: tokenId, expand: expand))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter tokenId: (path)  
         - parameter expand: (query)  (optional)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getRefreshTokenForAuthorizationServerAndClient(authServerId: String, clientId: String, tokenId: String, expand: String? = nil) throws -> AnyPublisher<OktaResponse<OAuth2RefreshToken>, Error> {
            publish(try getRefreshTokenForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId, tokenId: tokenId, expand: expand))
        }
        #endif


        internal func listAuthorizationServerKeysURLRequest(authServerId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/credentials/keys".expanded(using: [
                "authServerId": authServerId
            ]), method: "GET")
        }

        /**

         - parameter authServerId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listAuthorizationServerKeys(authServerId: String, completion: @escaping (Result<OktaResponse<[JsonWebKey]>, Error>) -> Void) {
            do {
                send(try listAuthorizationServerKeysURLRequest(authServerId: authServerId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listAuthorizationServerKeys(authServerId: String) async throws -> OktaResponse<[JsonWebKey]> {
            try await send(try listAuthorizationServerKeysURLRequest(authServerId: authServerId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listAuthorizationServerKeys(authServerId: String) throws -> AnyPublisher<OktaResponse<[JsonWebKey]>, Error> {
            publish(try listAuthorizationServerKeysURLRequest(authServerId: authServerId))
        }
        #endif


        internal func listAuthorizationServerPoliciesURLRequest(authServerId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies".expanded(using: [
                "authServerId": authServerId
            ]), method: "GET")
        }

        /**

         - parameter authServerId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listAuthorizationServerPolicies(authServerId: String, completion: @escaping (Result<OktaResponse<[AuthorizationServerPolicy]>, Error>) -> Void) {
            do {
                send(try listAuthorizationServerPoliciesURLRequest(authServerId: authServerId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listAuthorizationServerPolicies(authServerId: String) async throws -> OktaResponse<[AuthorizationServerPolicy]> {
            try await send(try listAuthorizationServerPoliciesURLRequest(authServerId: authServerId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listAuthorizationServerPolicies(authServerId: String) throws -> AnyPublisher<OktaResponse<[AuthorizationServerPolicy]>, Error> {
            publish(try listAuthorizationServerPoliciesURLRequest(authServerId: authServerId))
        }
        #endif


        internal func listAuthorizationServerPolicyRulesURLRequest(policyId: String, authServerId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules".expanded(using: [
                "policyId": policyId, 
                "authServerId": authServerId
            ]), method: "GET")
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listAuthorizationServerPolicyRules(policyId: String, authServerId: String, completion: @escaping (Result<OktaResponse<[AuthorizationServerPolicyRule]>, Error>) -> Void) {
            do {
                send(try listAuthorizationServerPolicyRulesURLRequest(policyId: policyId, authServerId: authServerId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listAuthorizationServerPolicyRules(policyId: String, authServerId: String) async throws -> OktaResponse<[AuthorizationServerPolicyRule]> {
            try await send(try listAuthorizationServerPolicyRulesURLRequest(policyId: policyId, authServerId: authServerId))
        }

        #if canImport(Combine)
        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listAuthorizationServerPolicyRules(policyId: String, authServerId: String) throws -> AnyPublisher<OktaResponse<[AuthorizationServerPolicyRule]>, Error> {
            publish(try listAuthorizationServerPolicyRulesURLRequest(policyId: policyId, authServerId: authServerId))
        }
        #endif


        internal func listAuthorizationServersURLRequest(q: String? = nil, limit: String? = nil, after: String? = nil) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers", method: "GET", query: [
                "q": q, 
                "limit": limit, 
                "after": after
            ])
        }

        /**

         - parameter q: (query)  (optional)
         - parameter limit: (query)  (optional)
         - parameter after: (query)  (optional)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listAuthorizationServers(q: String? = nil, limit: String? = nil, after: String? = nil, completion: @escaping (Result<OktaResponse<[AuthorizationServer]>, Error>) -> Void) {
            do {
                send(try listAuthorizationServersURLRequest(q: q, limit: limit, after: after), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter q: (query)  (optional)
         - parameter limit: (query)  (optional)
         - parameter after: (query)  (optional)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listAuthorizationServers(q: String? = nil, limit: String? = nil, after: String? = nil) async throws -> OktaResponse<[AuthorizationServer]> {
            try await send(try listAuthorizationServersURLRequest(q: q, limit: limit, after: after))
        }

        #if canImport(Combine)
        /**

         - parameter q: (query)  (optional)
         - parameter limit: (query)  (optional)
         - parameter after: (query)  (optional)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listAuthorizationServers(q: String? = nil, limit: String? = nil, after: String? = nil) throws -> AnyPublisher<OktaResponse<[AuthorizationServer]>, Error> {
            publish(try listAuthorizationServersURLRequest(q: q, limit: limit, after: after))
        }
        #endif


        internal func listOAuth2ClaimsURLRequest(authServerId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/claims".expanded(using: [
                "authServerId": authServerId
            ]), method: "GET")
        }

        /**

         - parameter authServerId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listOAuth2Claims(authServerId: String, completion: @escaping (Result<OktaResponse<[OAuth2Claim]>, Error>) -> Void) {
            do {
                send(try listOAuth2ClaimsURLRequest(authServerId: authServerId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listOAuth2Claims(authServerId: String) async throws -> OktaResponse<[OAuth2Claim]> {
            try await send(try listOAuth2ClaimsURLRequest(authServerId: authServerId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listOAuth2Claims(authServerId: String) throws -> AnyPublisher<OktaResponse<[OAuth2Claim]>, Error> {
            publish(try listOAuth2ClaimsURLRequest(authServerId: authServerId))
        }
        #endif


        internal func listOAuth2ClientsForAuthorizationServerURLRequest(authServerId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/clients".expanded(using: [
                "authServerId": authServerId
            ]), method: "GET")
        }

        /**

         - parameter authServerId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listOAuth2ClientsForAuthorizationServer(authServerId: String, completion: @escaping (Result<OktaResponse<[OAuth2Client]>, Error>) -> Void) {
            do {
                send(try listOAuth2ClientsForAuthorizationServerURLRequest(authServerId: authServerId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listOAuth2ClientsForAuthorizationServer(authServerId: String) async throws -> OktaResponse<[OAuth2Client]> {
            try await send(try listOAuth2ClientsForAuthorizationServerURLRequest(authServerId: authServerId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listOAuth2ClientsForAuthorizationServer(authServerId: String) throws -> AnyPublisher<OktaResponse<[OAuth2Client]>, Error> {
            publish(try listOAuth2ClientsForAuthorizationServerURLRequest(authServerId: authServerId))
        }
        #endif


        internal func listOAuth2ScopesURLRequest(authServerId: String, q: String? = nil, filter: String? = nil, cursor: String? = nil, limit: Int? = nil) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/scopes".expanded(using: [
                "authServerId": authServerId
            ]), method: "GET", query: [
                "q": q, 
                "filter": filter, 
                "cursor": cursor, 
                "limit": limit
            ])
        }

        /**

         - parameter authServerId: (path)  
         - parameter q: (query)  (optional)
         - parameter filter: (query)  (optional)
         - parameter cursor: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listOAuth2Scopes(authServerId: String, q: String? = nil, filter: String? = nil, cursor: String? = nil, limit: Int? = nil, completion: @escaping (Result<OktaResponse<[OAuth2Scope]>, Error>) -> Void) {
            do {
                send(try listOAuth2ScopesURLRequest(authServerId: authServerId, q: q, filter: filter, cursor: cursor, limit: limit), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter q: (query)  (optional)
         - parameter filter: (query)  (optional)
         - parameter cursor: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listOAuth2Scopes(authServerId: String, q: String? = nil, filter: String? = nil, cursor: String? = nil, limit: Int? = nil) async throws -> OktaResponse<[OAuth2Scope]> {
            try await send(try listOAuth2ScopesURLRequest(authServerId: authServerId, q: q, filter: filter, cursor: cursor, limit: limit))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter q: (query)  (optional)
         - parameter filter: (query)  (optional)
         - parameter cursor: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listOAuth2Scopes(authServerId: String, q: String? = nil, filter: String? = nil, cursor: String? = nil, limit: Int? = nil) throws -> AnyPublisher<OktaResponse<[OAuth2Scope]>, Error> {
            publish(try listOAuth2ScopesURLRequest(authServerId: authServerId, q: q, filter: filter, cursor: cursor, limit: limit))
        }
        #endif


        internal func listRefreshTokensForAuthorizationServerAndClientURLRequest(authServerId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens".expanded(using: [
                "authServerId": authServerId, 
                "clientId": clientId
            ]), method: "GET", query: [
                "expand": expand, 
                "after": after, 
                "limit": limit
            ])
        }

        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter expand: (query)  (optional)
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listRefreshTokensForAuthorizationServerAndClient(authServerId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil, completion: @escaping (Result<OktaResponse<[OAuth2RefreshToken]>, Error>) -> Void) {
            do {
                send(try listRefreshTokensForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId, expand: expand, after: after, limit: limit), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter expand: (query)  (optional)
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listRefreshTokensForAuthorizationServerAndClient(authServerId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) async throws -> OktaResponse<[OAuth2RefreshToken]> {
            try await send(try listRefreshTokensForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId, expand: expand, after: after, limit: limit))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter expand: (query)  (optional)
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listRefreshTokensForAuthorizationServerAndClient(authServerId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) throws -> AnyPublisher<OktaResponse<[OAuth2RefreshToken]>, Error> {
            publish(try listRefreshTokensForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId, expand: expand, after: after, limit: limit))
        }
        #endif


        internal func revokeRefreshTokenForAuthorizationServerAndClientURLRequest(authServerId: String, clientId: String, tokenId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}".expanded(using: [
                "authServerId": authServerId, 
                "clientId": clientId, 
                "tokenId": tokenId
            ]), method: "DELETE")
        }

        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter tokenId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func revokeRefreshTokenForAuthorizationServerAndClient(authServerId: String, clientId: String, tokenId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try revokeRefreshTokenForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId, tokenId: tokenId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter tokenId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func revokeRefreshTokenForAuthorizationServerAndClient(authServerId: String, clientId: String, tokenId: String) async throws -> OktaResponse<Empty> {
            try await send(try revokeRefreshTokenForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId, tokenId: tokenId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter tokenId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func revokeRefreshTokenForAuthorizationServerAndClient(authServerId: String, clientId: String, tokenId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try revokeRefreshTokenForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId, tokenId: tokenId))
        }
        #endif


        internal func revokeRefreshTokensForAuthorizationServerAndClientURLRequest(authServerId: String, clientId: String) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens".expanded(using: [
                "authServerId": authServerId, 
                "clientId": clientId
            ]), method: "DELETE")
        }

        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func revokeRefreshTokensForAuthorizationServerAndClient(authServerId: String, clientId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try revokeRefreshTokensForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func revokeRefreshTokensForAuthorizationServerAndClient(authServerId: String, clientId: String) async throws -> OktaResponse<Empty> {
            try await send(try revokeRefreshTokensForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter clientId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func revokeRefreshTokensForAuthorizationServerAndClient(authServerId: String, clientId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try revokeRefreshTokensForAuthorizationServerAndClientURLRequest(authServerId: authServerId, clientId: clientId))
        }
        #endif


        internal func rotateAuthorizationServerKeysURLRequest(authServerId: String, jwkUse: JwkUse) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate".expanded(using: [
                "authServerId": authServerId
            ]), method: "POST", body: jwkUse)
        }

        /**

         - parameter authServerId: (path)  
         - parameter jwkUse: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func rotateAuthorizationServerKeys(authServerId: String, jwkUse: JwkUse, completion: @escaping (Result<OktaResponse<[JsonWebKey]>, Error>) -> Void) {
            do {
                send(try rotateAuthorizationServerKeysURLRequest(authServerId: authServerId, jwkUse: jwkUse), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter jwkUse: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func rotateAuthorizationServerKeys(authServerId: String, jwkUse: JwkUse) async throws -> OktaResponse<[JsonWebKey]> {
            try await send(try rotateAuthorizationServerKeysURLRequest(authServerId: authServerId, jwkUse: jwkUse))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter jwkUse: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func rotateAuthorizationServerKeys(authServerId: String, jwkUse: JwkUse) throws -> AnyPublisher<OktaResponse<[JsonWebKey]>, Error> {
            publish(try rotateAuthorizationServerKeysURLRequest(authServerId: authServerId, jwkUse: jwkUse))
        }
        #endif


        internal func updateAuthorizationServerURLRequest(authServerId: String, authorizationServer: AuthorizationServer) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}".expanded(using: [
                "authServerId": authServerId
            ]), method: "PUT", body: authorizationServer)
        }

        /**

         - parameter authServerId: (path)  
         - parameter authorizationServer: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func updateAuthorizationServer(authServerId: String, authorizationServer: AuthorizationServer, completion: @escaping (Result<OktaResponse<AuthorizationServer>, Error>) -> Void) {
            do {
                send(try updateAuthorizationServerURLRequest(authServerId: authServerId, authorizationServer: authorizationServer), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter authorizationServer: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func updateAuthorizationServer(authServerId: String, authorizationServer: AuthorizationServer) async throws -> OktaResponse<AuthorizationServer> {
            try await send(try updateAuthorizationServerURLRequest(authServerId: authServerId, authorizationServer: authorizationServer))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter authorizationServer: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func updateAuthorizationServer(authServerId: String, authorizationServer: AuthorizationServer) throws -> AnyPublisher<OktaResponse<AuthorizationServer>, Error> {
            publish(try updateAuthorizationServerURLRequest(authServerId: authServerId, authorizationServer: authorizationServer))
        }
        #endif


        internal func updateAuthorizationServerPolicyURLRequest(authServerId: String, policyId: String, authorizationServerPolicy: AuthorizationServerPolicy) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}".expanded(using: [
                "authServerId": authServerId, 
                "policyId": policyId
            ]), method: "PUT", body: authorizationServerPolicy)
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter authorizationServerPolicy: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func updateAuthorizationServerPolicy(authServerId: String, policyId: String, authorizationServerPolicy: AuthorizationServerPolicy, completion: @escaping (Result<OktaResponse<AuthorizationServerPolicy>, Error>) -> Void) {
            do {
                send(try updateAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId, authorizationServerPolicy: authorizationServerPolicy), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter authorizationServerPolicy: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func updateAuthorizationServerPolicy(authServerId: String, policyId: String, authorizationServerPolicy: AuthorizationServerPolicy) async throws -> OktaResponse<AuthorizationServerPolicy> {
            try await send(try updateAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId, authorizationServerPolicy: authorizationServerPolicy))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter policyId: (path)  
         - parameter authorizationServerPolicy: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func updateAuthorizationServerPolicy(authServerId: String, policyId: String, authorizationServerPolicy: AuthorizationServerPolicy) throws -> AnyPublisher<OktaResponse<AuthorizationServerPolicy>, Error> {
            publish(try updateAuthorizationServerPolicyURLRequest(authServerId: authServerId, policyId: policyId, authorizationServerPolicy: authorizationServerPolicy))
        }
        #endif


        internal func updateAuthorizationServerPolicyRuleURLRequest(policyId: String, authServerId: String, ruleId: String, authorizationServerPolicyRule: AuthorizationServerPolicyRule) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}".expanded(using: [
                "policyId": policyId, 
                "authServerId": authServerId, 
                "ruleId": ruleId
            ]), method: "PUT", body: authorizationServerPolicyRule)
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter ruleId: (path)  
         - parameter authorizationServerPolicyRule: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func updateAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String, authorizationServerPolicyRule: AuthorizationServerPolicyRule, completion: @escaping (Result<OktaResponse<AuthorizationServerPolicyRule>, Error>) -> Void) {
            do {
                send(try updateAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, ruleId: ruleId, authorizationServerPolicyRule: authorizationServerPolicyRule), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter ruleId: (path)  
         - parameter authorizationServerPolicyRule: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func updateAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String, authorizationServerPolicyRule: AuthorizationServerPolicyRule) async throws -> OktaResponse<AuthorizationServerPolicyRule> {
            try await send(try updateAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, ruleId: ruleId, authorizationServerPolicyRule: authorizationServerPolicyRule))
        }

        #if canImport(Combine)
        /**

         - parameter policyId: (path)  
         - parameter authServerId: (path)  
         - parameter ruleId: (path)  
         - parameter authorizationServerPolicyRule: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func updateAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String, authorizationServerPolicyRule: AuthorizationServerPolicyRule) throws -> AnyPublisher<OktaResponse<AuthorizationServerPolicyRule>, Error> {
            publish(try updateAuthorizationServerPolicyRuleURLRequest(policyId: policyId, authServerId: authServerId, ruleId: ruleId, authorizationServerPolicyRule: authorizationServerPolicyRule))
        }
        #endif


        internal func updateOAuth2ClaimURLRequest(authServerId: String, claimId: String, oAuth2Claim: OAuth2Claim) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/claims/{claimId}".expanded(using: [
                "authServerId": authServerId, 
                "claimId": claimId
            ]), method: "PUT", body: oAuth2Claim)
        }

        /**

         - parameter authServerId: (path)  
         - parameter claimId: (path)  
         - parameter oAuth2Claim: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func updateOAuth2Claim(authServerId: String, claimId: String, oAuth2Claim: OAuth2Claim, completion: @escaping (Result<OktaResponse<OAuth2Claim>, Error>) -> Void) {
            do {
                send(try updateOAuth2ClaimURLRequest(authServerId: authServerId, claimId: claimId, oAuth2Claim: oAuth2Claim), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter claimId: (path)  
         - parameter oAuth2Claim: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func updateOAuth2Claim(authServerId: String, claimId: String, oAuth2Claim: OAuth2Claim) async throws -> OktaResponse<OAuth2Claim> {
            try await send(try updateOAuth2ClaimURLRequest(authServerId: authServerId, claimId: claimId, oAuth2Claim: oAuth2Claim))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter claimId: (path)  
         - parameter oAuth2Claim: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func updateOAuth2Claim(authServerId: String, claimId: String, oAuth2Claim: OAuth2Claim) throws -> AnyPublisher<OktaResponse<OAuth2Claim>, Error> {
            publish(try updateOAuth2ClaimURLRequest(authServerId: authServerId, claimId: claimId, oAuth2Claim: oAuth2Claim))
        }
        #endif


        internal func updateOAuth2ScopeURLRequest(authServerId: String, scopeId: String, oAuth2Scope: OAuth2Scope) throws -> URLRequest {
            try request(to: "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}".expanded(using: [
                "authServerId": authServerId, 
                "scopeId": scopeId
            ]), method: "PUT", body: oAuth2Scope)
        }

        /**

         - parameter authServerId: (path)  
         - parameter scopeId: (path)  
         - parameter oAuth2Scope: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func updateOAuth2Scope(authServerId: String, scopeId: String, oAuth2Scope: OAuth2Scope, completion: @escaping (Result<OktaResponse<OAuth2Scope>, Error>) -> Void) {
            do {
                send(try updateOAuth2ScopeURLRequest(authServerId: authServerId, scopeId: scopeId, oAuth2Scope: oAuth2Scope), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter authServerId: (path)  
         - parameter scopeId: (path)  
         - parameter oAuth2Scope: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func updateOAuth2Scope(authServerId: String, scopeId: String, oAuth2Scope: OAuth2Scope) async throws -> OktaResponse<OAuth2Scope> {
            try await send(try updateOAuth2ScopeURLRequest(authServerId: authServerId, scopeId: scopeId, oAuth2Scope: oAuth2Scope))
        }

        #if canImport(Combine)
        /**

         - parameter authServerId: (path)  
         - parameter scopeId: (path)  
         - parameter oAuth2Scope: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func updateOAuth2Scope(authServerId: String, scopeId: String, oAuth2Scope: OAuth2Scope) throws -> AnyPublisher<OktaResponse<OAuth2Scope>, Error> {
            publish(try updateOAuth2ScopeURLRequest(authServerId: authServerId, scopeId: scopeId, oAuth2Scope: oAuth2Scope))
        }
        #endif

    }
}
