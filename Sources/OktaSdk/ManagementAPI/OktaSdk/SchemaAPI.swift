//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct SchemaAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Retrieve the default Application User Schema for an Application
         
         - parameter appInstanceId: (path)  
         */
        public func getApplicationUserSchema(appInstanceId: String) async throws -> OktaResponse<UserSchema> {
            try await send(try request(to: "/api/v1/meta/schemas/apps/{appInstanceId}/default".expanded(using: [
                    "appInstanceId": appInstanceId
                ]), method: "GET"))
        }

        /**
         Retrieve the default Application User Schema for an Application
         
         - parameter appInstanceId: (path)  
         - parameter completion: Completion block
         */
        public func getApplicationUserSchema(appInstanceId: String, completion: @escaping (Result<OktaResponse<UserSchema>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/meta/schemas/apps/{appInstanceId}/default".expanded(using: [
                        "appInstanceId": appInstanceId
                    ]), method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Retrieve the default Group Schema
         
         */
        public func getGroupSchema() async throws -> OktaResponse<GroupSchema> {
            try await send(try request(to: "/api/v1/meta/schemas/group/default", method: "GET"))
        }

        /**
         Retrieve the default Group Schema
         
         - parameter completion: Completion block
         */
        public func getGroupSchema(completion: @escaping (Result<OktaResponse<GroupSchema>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/meta/schemas/group/default", method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Retrieve a User Schema
         
         - parameter schemaId: (path)  
         */
        public func getUserSchema(schemaId: String) async throws -> OktaResponse<UserSchema> {
            try await send(try request(to: "/api/v1/meta/schemas/user/{schemaId}".expanded(using: [
                    "schemaId": schemaId
                ]), method: "GET"))
        }

        /**
         Retrieve a User Schema
         
         - parameter schemaId: (path)  
         - parameter completion: Completion block
         */
        public func getUserSchema(schemaId: String, completion: @escaping (Result<OktaResponse<UserSchema>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/meta/schemas/user/{schemaId}".expanded(using: [
                        "schemaId": schemaId
                    ]), method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Update the default Application User Schema for an Application
         
         - parameter appInstanceId: (path)  
         - parameter body: (body)  (optional)
         */
        public func updateApplicationUserProfile(appInstanceId: String, body: UserSchema? = nil) async throws -> OktaResponse<UserSchema> {
            try await send(try requestWithBody(to: "/api/v1/meta/schemas/apps/{appInstanceId}/default".expanded(using: [
                    "appInstanceId": appInstanceId
                ]), method: "POST", body: body))
        }

        /**
         Update the default Application User Schema for an Application
         
         - parameter appInstanceId: (path)  
         - parameter body: (body)  (optional)
         - parameter completion: Completion block
         */
        public func updateApplicationUserProfile(appInstanceId: String, body: UserSchema? = nil, completion: @escaping (Result<OktaResponse<UserSchema>, Error>) -> Void) {
            do {
                send(try requestWithBody(to: "/api/v1/meta/schemas/apps/{appInstanceId}/default".expanded(using: [
                        "appInstanceId": appInstanceId
                    ]), method: "POST", body: body), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Update the default Group Schema
         
         - parameter groupSchema: (body)  (optional)
         */
        public func updateGroupSchema(groupSchema: GroupSchema? = nil) async throws -> OktaResponse<GroupSchema> {
            try await send(try requestWithBody(to: "/api/v1/meta/schemas/group/default", method: "POST", body: groupSchema))
        }

        /**
         Update the default Group Schema
         
         - parameter groupSchema: (body)  (optional)
         - parameter completion: Completion block
         */
        public func updateGroupSchema(groupSchema: GroupSchema? = nil, completion: @escaping (Result<OktaResponse<GroupSchema>, Error>) -> Void) {
            do {
                send(try requestWithBody(to: "/api/v1/meta/schemas/group/default", method: "POST", body: groupSchema), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Update a User Schema
         
         - parameter schemaId: (path)  
         - parameter userSchema: (body)  
         */
        public func updateUserProfile(schemaId: String, userSchema: UserSchema) async throws -> OktaResponse<UserSchema> {
            try await send(try requestWithBody(to: "/api/v1/meta/schemas/user/{schemaId}".expanded(using: [
                    "schemaId": schemaId
                ]), method: "POST", body: userSchema))
        }

        /**
         Update a User Schema
         
         - parameter schemaId: (path)  
         - parameter userSchema: (body)  
         - parameter completion: Completion block
         */
        public func updateUserProfile(schemaId: String, userSchema: UserSchema, completion: @escaping (Result<OktaResponse<UserSchema>, Error>) -> Void) {
            do {
                send(try requestWithBody(to: "/api/v1/meta/schemas/user/{schemaId}".expanded(using: [
                        "schemaId": schemaId
                    ]), method: "POST", body: userSchema), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

    }
}
