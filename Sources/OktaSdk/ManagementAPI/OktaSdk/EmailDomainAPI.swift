//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct EmailDomainAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Create an Email Domain
         
         - parameter emailDomain: (body)  
         */
        @available(iOS 13.0.0, tvOS 13.0.0, *)
        public func createEmailDomain(emailDomain: EmailDomain) async throws -> OktaResponse<EmailDomainResponse> {
            try await send(try requestWithBody(to: "/api/v1/email-domains", method: "POST", body: emailDomain))
        }

        /**
         Create an Email Domain
         
         - parameter emailDomain: (body)  
         - parameter completion: Completion block
         */
        public func createEmailDomain(emailDomain: EmailDomain, completion: @escaping (Result<OktaResponse<EmailDomainResponse>, Error>) -> Void) {
            do {
                send(try requestWithBody(to: "/api/v1/email-domains", method: "POST", body: emailDomain), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Delete an Email Domain
         
         - parameter emailDomainId: (path)  
         */
        @discardableResult
        @available(iOS 13.0.0, tvOS 13.0.0, *)
        public func deleteEmailDomain(emailDomainId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/email-domains/{emailDomainId}".expanded(using: [
                    "emailDomainId": emailDomainId
                ]), method: "DELETE"))
        }

        /**
         Delete an Email Domain
         
         - parameter emailDomainId: (path)  
         - parameter completion: Completion block
         */
        public func deleteEmailDomain(emailDomainId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/email-domains/{emailDomainId}".expanded(using: [
                        "emailDomainId": emailDomainId
                    ]), method: "DELETE"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Retrieve a Email Domain
         
         - parameter emailDomainId: (path)  
         */
        @available(iOS 13.0.0, tvOS 13.0.0, *)
        public func getEmailDomain(emailDomainId: String) async throws -> OktaResponse<EmailDomainResponse> {
            try await send(try request(to: "/api/v1/email-domains/{emailDomainId}".expanded(using: [
                    "emailDomainId": emailDomainId
                ]), method: "GET"))
        }

        /**
         Retrieve a Email Domain
         
         - parameter emailDomainId: (path)  
         - parameter completion: Completion block
         */
        public func getEmailDomain(emailDomainId: String, completion: @escaping (Result<OktaResponse<EmailDomainResponse>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/email-domains/{emailDomainId}".expanded(using: [
                        "emailDomainId": emailDomainId
                    ]), method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List all brands linked to an email domain
         
         - parameter emailDomainId: (path)  
         */
        @available(iOS 13.0.0, tvOS 13.0.0, *)
        public func listEmailDomainBrands(emailDomainId: String) async throws -> OktaResponse<[Brand]> {
            try await send(try request(to: "/api/v1/email-domains/{emailDomainId}/brands".expanded(using: [
                    "emailDomainId": emailDomainId
                ]), method: "GET"))
        }

        /**
         List all brands linked to an email domain
         
         - parameter emailDomainId: (path)  
         - parameter completion: Completion block
         */
        public func listEmailDomainBrands(emailDomainId: String, completion: @escaping (Result<OktaResponse<[Brand]>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/email-domains/{emailDomainId}/brands".expanded(using: [
                        "emailDomainId": emailDomainId
                    ]), method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List all email domains
         
         */
        @available(iOS 13.0.0, tvOS 13.0.0, *)
        public func listEmailDomains() async throws -> OktaResponse<EmailDomainListResponse> {
            try await send(try request(to: "/api/v1/email-domains", method: "GET"))
        }

        /**
         List all email domains
         
         - parameter completion: Completion block
         */
        public func listEmailDomains(completion: @escaping (Result<OktaResponse<EmailDomainListResponse>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/email-domains", method: "GET"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Update an Email Domain
         
         - parameter emailDomainId: (path)  
         - parameter updateEmailDomain: (body)  
         */
        @available(iOS 13.0.0, tvOS 13.0.0, *)
        public func updateEmailDomain(emailDomainId: String, updateEmailDomain: UpdateEmailDomain) async throws -> OktaResponse<EmailDomainResponse> {
            try await send(try requestWithBody(to: "/api/v1/email-domains/{emailDomainId}".expanded(using: [
                    "emailDomainId": emailDomainId
                ]), method: "PUT", body: updateEmailDomain))
        }

        /**
         Update an Email Domain
         
         - parameter emailDomainId: (path)  
         - parameter updateEmailDomain: (body)  
         - parameter completion: Completion block
         */
        public func updateEmailDomain(emailDomainId: String, updateEmailDomain: UpdateEmailDomain, completion: @escaping (Result<OktaResponse<EmailDomainResponse>, Error>) -> Void) {
            do {
                send(try requestWithBody(to: "/api/v1/email-domains/{emailDomainId}".expanded(using: [
                        "emailDomainId": emailDomainId
                    ]), method: "PUT", body: updateEmailDomain), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Verify Email Domain
         
         - parameter emailDomainId: (path)  
         */
        @available(iOS 13.0.0, tvOS 13.0.0, *)
        public func verifyEmailDomain(emailDomainId: String) async throws -> OktaResponse<EmailDomainResponse> {
            try await send(try request(to: "/api/v1/email-domains/{emailDomainId}/verify".expanded(using: [
                    "emailDomainId": emailDomainId
                ]), method: "POST"))
        }

        /**
         Verify Email Domain
         
         - parameter emailDomainId: (path)  
         - parameter completion: Completion block
         */
        public func verifyEmailDomain(emailDomainId: String, completion: @escaping (Result<OktaResponse<EmailDomainResponse>, Error>) -> Void) {
            do {
                send(try request(to: "/api/v1/email-domains/{emailDomainId}/verify".expanded(using: [
                        "emailDomainId": emailDomainId
                    ]), method: "POST"), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

    }
}
