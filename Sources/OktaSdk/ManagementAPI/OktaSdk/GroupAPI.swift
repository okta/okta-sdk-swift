//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(Combine)
import Combine
#endif

public extension OktaClient {

    struct GroupAPI: OktaClientAPI {
        internal let baseURL: URL
        internal let session: URLSession


        internal func activateGroupRuleURLRequest(ruleId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/rules/{ruleId}/lifecycle/activate".expanded(using: [
                "ruleId": ruleId
            ]), method: "POST")
        }

        /**
         Activate a group Rule
         
         - parameter ruleId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func activateGroupRule(ruleId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try activateGroupRuleURLRequest(ruleId: ruleId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Activate a group Rule
         
         - parameter ruleId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func activateGroupRule(ruleId: String) async throws -> OktaResponse<Empty> {
            try await send(try activateGroupRuleURLRequest(ruleId: ruleId))
        }

        #if canImport(Combine)
        /**
         Activate a group Rule
         
         - parameter ruleId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func activateGroupRule(ruleId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try activateGroupRuleURLRequest(ruleId: ruleId))
        }
        #endif


        internal func addApplicationInstanceTargetToAppAdminRoleGivenToGroupURLRequest(groupId: String, roleId: String, appName: String, applicationId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId, 
                "appName": appName, 
                "applicationId": applicationId
            ]), method: "PUT")
        }

        /**
         Add App Instance Target to App Administrator Role given to a Group
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         - parameter applicationId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func addApplicationInstanceTargetToAppAdminRoleGivenToGroup(groupId: String, roleId: String, appName: String, applicationId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try addApplicationInstanceTargetToAppAdminRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName, applicationId: applicationId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Add App Instance Target to App Administrator Role given to a Group
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         - parameter applicationId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func addApplicationInstanceTargetToAppAdminRoleGivenToGroup(groupId: String, roleId: String, appName: String, applicationId: String) async throws -> OktaResponse<Empty> {
            try await send(try addApplicationInstanceTargetToAppAdminRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName, applicationId: applicationId))
        }

        #if canImport(Combine)
        /**
         Add App Instance Target to App Administrator Role given to a Group
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         - parameter applicationId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func addApplicationInstanceTargetToAppAdminRoleGivenToGroup(groupId: String, roleId: String, appName: String, applicationId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try addApplicationInstanceTargetToAppAdminRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName, applicationId: applicationId))
        }
        #endif


        internal func addApplicationTargetToAdminRoleGivenToGroupURLRequest(groupId: String, roleId: String, appName: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId, 
                "appName": appName
            ]), method: "PUT")
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func addApplicationTargetToAdminRoleGivenToGroup(groupId: String, roleId: String, appName: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try addApplicationTargetToAdminRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func addApplicationTargetToAdminRoleGivenToGroup(groupId: String, roleId: String, appName: String) async throws -> OktaResponse<Empty> {
            try await send(try addApplicationTargetToAdminRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName))
        }

        #if canImport(Combine)
        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func addApplicationTargetToAdminRoleGivenToGroup(groupId: String, roleId: String, appName: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try addApplicationTargetToAdminRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName))
        }
        #endif


        internal func addGroupTargetToGroupAdministratorRoleForGroupURLRequest(groupId: String, roleId: String, targetGroupId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId, 
                "targetGroupId": targetGroupId
            ]), method: "PUT")
        }

        /**
         Add Group Target for Group Role
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter targetGroupId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func addGroupTargetToGroupAdministratorRoleForGroup(groupId: String, roleId: String, targetGroupId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try addGroupTargetToGroupAdministratorRoleForGroupURLRequest(groupId: groupId, roleId: roleId, targetGroupId: targetGroupId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Add Group Target for Group Role
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter targetGroupId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func addGroupTargetToGroupAdministratorRoleForGroup(groupId: String, roleId: String, targetGroupId: String) async throws -> OktaResponse<Empty> {
            try await send(try addGroupTargetToGroupAdministratorRoleForGroupURLRequest(groupId: groupId, roleId: roleId, targetGroupId: targetGroupId))
        }

        #if canImport(Combine)
        /**
         Add Group Target for Group Role
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter targetGroupId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func addGroupTargetToGroupAdministratorRoleForGroup(groupId: String, roleId: String, targetGroupId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try addGroupTargetToGroupAdministratorRoleForGroupURLRequest(groupId: groupId, roleId: roleId, targetGroupId: targetGroupId))
        }
        #endif


        internal func addUserToGroupURLRequest(groupId: String, userId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/users/{userId}".expanded(using: [
                "groupId": groupId, 
                "userId": userId
            ]), method: "PUT")
        }

        /**
         Add User to Group
         
         - parameter groupId: (path)  
         - parameter userId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func addUserToGroup(groupId: String, userId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try addUserToGroupURLRequest(groupId: groupId, userId: userId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Add User to Group
         
         - parameter groupId: (path)  
         - parameter userId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func addUserToGroup(groupId: String, userId: String) async throws -> OktaResponse<Empty> {
            try await send(try addUserToGroupURLRequest(groupId: groupId, userId: userId))
        }

        #if canImport(Combine)
        /**
         Add User to Group
         
         - parameter groupId: (path)  
         - parameter userId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func addUserToGroup(groupId: String, userId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try addUserToGroupURLRequest(groupId: groupId, userId: userId))
        }
        #endif


        internal func assignRoleToGroupURLRequest(groupId: String, assignRoleRequest: AssignRoleRequest, disableNotifications: String? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles".expanded(using: [
                "groupId": groupId
            ]), method: "POST", query: [
                "disableNotifications": disableNotifications
            ], body: assignRoleRequest)
        }

        /**

         - parameter groupId: (path)  
         - parameter assignRoleRequest: (body)  
         - parameter disableNotifications: (query)  (optional)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func assignRoleToGroup(groupId: String, assignRoleRequest: AssignRoleRequest, disableNotifications: String? = nil, completion: @escaping (Result<OktaResponse<Role>, Error>) -> Void) {
            do {
                send(try assignRoleToGroupURLRequest(groupId: groupId, assignRoleRequest: assignRoleRequest, disableNotifications: disableNotifications), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter groupId: (path)  
         - parameter assignRoleRequest: (body)  
         - parameter disableNotifications: (query)  (optional)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func assignRoleToGroup(groupId: String, assignRoleRequest: AssignRoleRequest, disableNotifications: String? = nil) async throws -> OktaResponse<Role> {
            try await send(try assignRoleToGroupURLRequest(groupId: groupId, assignRoleRequest: assignRoleRequest, disableNotifications: disableNotifications))
        }

        #if canImport(Combine)
        /**

         - parameter groupId: (path)  
         - parameter assignRoleRequest: (body)  
         - parameter disableNotifications: (query)  (optional)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func assignRoleToGroup(groupId: String, assignRoleRequest: AssignRoleRequest, disableNotifications: String? = nil) throws -> AnyPublisher<OktaResponse<Role>, Error> {
            publish(try assignRoleToGroupURLRequest(groupId: groupId, assignRoleRequest: assignRoleRequest, disableNotifications: disableNotifications))
        }
        #endif


        internal func createGroupURLRequest(group: Group) throws -> URLRequest {
            try request(to: "/api/v1/groups", method: "POST", body: group)
        }

        /**
         Add Group
         
         - parameter group: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func createGroup(group: Group, completion: @escaping (Result<OktaResponse<Group>, Error>) -> Void) {
            do {
                send(try createGroupURLRequest(group: group), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Add Group
         
         - parameter group: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func createGroup(group: Group) async throws -> OktaResponse<Group> {
            try await send(try createGroupURLRequest(group: group))
        }

        #if canImport(Combine)
        /**
         Add Group
         
         - parameter group: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func createGroup(group: Group) throws -> AnyPublisher<OktaResponse<Group>, Error> {
            publish(try createGroupURLRequest(group: group))
        }
        #endif


        internal func createGroupRuleURLRequest(groupRule: GroupRule) throws -> URLRequest {
            try request(to: "/api/v1/groups/rules", method: "POST", body: groupRule)
        }

        /**
         Create Group Rule
         
         - parameter groupRule: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func createGroupRule(groupRule: GroupRule, completion: @escaping (Result<OktaResponse<GroupRule>, Error>) -> Void) {
            do {
                send(try createGroupRuleURLRequest(groupRule: groupRule), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Create Group Rule
         
         - parameter groupRule: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func createGroupRule(groupRule: GroupRule) async throws -> OktaResponse<GroupRule> {
            try await send(try createGroupRuleURLRequest(groupRule: groupRule))
        }

        #if canImport(Combine)
        /**
         Create Group Rule
         
         - parameter groupRule: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func createGroupRule(groupRule: GroupRule) throws -> AnyPublisher<OktaResponse<GroupRule>, Error> {
            publish(try createGroupRuleURLRequest(groupRule: groupRule))
        }
        #endif


        internal func deactivateGroupRuleURLRequest(ruleId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/rules/{ruleId}/lifecycle/deactivate".expanded(using: [
                "ruleId": ruleId
            ]), method: "POST")
        }

        /**
         Deactivate a group Rule
         
         - parameter ruleId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deactivateGroupRule(ruleId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deactivateGroupRuleURLRequest(ruleId: ruleId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Deactivate a group Rule
         
         - parameter ruleId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deactivateGroupRule(ruleId: String) async throws -> OktaResponse<Empty> {
            try await send(try deactivateGroupRuleURLRequest(ruleId: ruleId))
        }

        #if canImport(Combine)
        /**
         Deactivate a group Rule
         
         - parameter ruleId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deactivateGroupRule(ruleId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deactivateGroupRuleURLRequest(ruleId: ruleId))
        }
        #endif


        internal func deleteGroupURLRequest(groupId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}".expanded(using: [
                "groupId": groupId
            ]), method: "DELETE")
        }

        /**
         Remove Group
         
         - parameter groupId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deleteGroup(groupId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deleteGroupURLRequest(groupId: groupId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Remove Group
         
         - parameter groupId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deleteGroup(groupId: String) async throws -> OktaResponse<Empty> {
            try await send(try deleteGroupURLRequest(groupId: groupId))
        }

        #if canImport(Combine)
        /**
         Remove Group
         
         - parameter groupId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deleteGroup(groupId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deleteGroupURLRequest(groupId: groupId))
        }
        #endif


        internal func deleteGroupRuleURLRequest(ruleId: String, removeUsers: Bool? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups/rules/{ruleId}".expanded(using: [
                "ruleId": ruleId
            ]), method: "DELETE", query: [
                "removeUsers": removeUsers
            ])
        }

        /**
         Delete a group Rule
         
         - parameter ruleId: (path)  
         - parameter removeUsers: (query) Indicates whether to keep or remove users from groups assigned by this rule. (optional)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func deleteGroupRule(ruleId: String, removeUsers: Bool? = nil, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try deleteGroupRuleURLRequest(ruleId: ruleId, removeUsers: removeUsers), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Delete a group Rule
         
         - parameter ruleId: (path)  
         - parameter removeUsers: (query) Indicates whether to keep or remove users from groups assigned by this rule. (optional)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func deleteGroupRule(ruleId: String, removeUsers: Bool? = nil) async throws -> OktaResponse<Empty> {
            try await send(try deleteGroupRuleURLRequest(ruleId: ruleId, removeUsers: removeUsers))
        }

        #if canImport(Combine)
        /**
         Delete a group Rule
         
         - parameter ruleId: (path)  
         - parameter removeUsers: (query) Indicates whether to keep or remove users from groups assigned by this rule. (optional)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func deleteGroupRule(ruleId: String, removeUsers: Bool? = nil) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try deleteGroupRuleURLRequest(ruleId: ruleId, removeUsers: removeUsers))
        }
        #endif


        internal func getGroupURLRequest(groupId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}".expanded(using: [
                "groupId": groupId
            ]), method: "GET")
        }

        /**
         List Group Rules
         
         - parameter groupId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getGroup(groupId: String, completion: @escaping (Result<OktaResponse<Group>, Error>) -> Void) {
            do {
                send(try getGroupURLRequest(groupId: groupId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List Group Rules
         
         - parameter groupId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getGroup(groupId: String) async throws -> OktaResponse<Group> {
            try await send(try getGroupURLRequest(groupId: groupId))
        }

        #if canImport(Combine)
        /**
         List Group Rules
         
         - parameter groupId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getGroup(groupId: String) throws -> AnyPublisher<OktaResponse<Group>, Error> {
            publish(try getGroupURLRequest(groupId: groupId))
        }
        #endif


        internal func getGroupRuleURLRequest(ruleId: String, expand: String? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups/rules/{ruleId}".expanded(using: [
                "ruleId": ruleId
            ]), method: "GET", query: [
                "expand": expand
            ])
        }

        /**
         Get Group Rule
         
         - parameter ruleId: (path)  
         - parameter expand: (query)  (optional)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getGroupRule(ruleId: String, expand: String? = nil, completion: @escaping (Result<OktaResponse<GroupRule>, Error>) -> Void) {
            do {
                send(try getGroupRuleURLRequest(ruleId: ruleId, expand: expand), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Get Group Rule
         
         - parameter ruleId: (path)  
         - parameter expand: (query)  (optional)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getGroupRule(ruleId: String, expand: String? = nil) async throws -> OktaResponse<GroupRule> {
            try await send(try getGroupRuleURLRequest(ruleId: ruleId, expand: expand))
        }

        #if canImport(Combine)
        /**
         Get Group Rule
         
         - parameter ruleId: (path)  
         - parameter expand: (query)  (optional)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getGroupRule(ruleId: String, expand: String? = nil) throws -> AnyPublisher<OktaResponse<GroupRule>, Error> {
            publish(try getGroupRuleURLRequest(ruleId: ruleId, expand: expand))
        }
        #endif


        internal func getRoleURLRequest(groupId: String, roleId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId
            ]), method: "GET")
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getRole(groupId: String, roleId: String, completion: @escaping (Result<OktaResponse<Role>, Error>) -> Void) {
            do {
                send(try getRoleURLRequest(groupId: groupId, roleId: roleId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getRole(groupId: String, roleId: String) async throws -> OktaResponse<Role> {
            try await send(try getRoleURLRequest(groupId: groupId, roleId: roleId))
        }

        #if canImport(Combine)
        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getRole(groupId: String, roleId: String) throws -> AnyPublisher<OktaResponse<Role>, Error> {
            publish(try getRoleURLRequest(groupId: groupId, roleId: roleId))
        }
        #endif


        internal func listApplicationTargetsForApplicationAdministratorRoleForGroupURLRequest(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId
            ]), method: "GET", query: [
                "after": after, 
                "limit": limit
            ])
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to 20)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listApplicationTargetsForApplicationAdministratorRoleForGroup(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil, completion: @escaping (Result<OktaResponse<[CatalogApplication]>, Error>) -> Void) {
            do {
                send(try listApplicationTargetsForApplicationAdministratorRoleForGroupURLRequest(groupId: groupId, roleId: roleId, after: after, limit: limit), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to 20)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listApplicationTargetsForApplicationAdministratorRoleForGroup(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil) async throws -> OktaResponse<[CatalogApplication]> {
            try await send(try listApplicationTargetsForApplicationAdministratorRoleForGroupURLRequest(groupId: groupId, roleId: roleId, after: after, limit: limit))
        }

        #if canImport(Combine)
        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to 20)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listApplicationTargetsForApplicationAdministratorRoleForGroup(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil) throws -> AnyPublisher<OktaResponse<[CatalogApplication]>, Error> {
            publish(try listApplicationTargetsForApplicationAdministratorRoleForGroupURLRequest(groupId: groupId, roleId: roleId, after: after, limit: limit))
        }
        #endif


        internal func listAssignedApplicationsForGroupURLRequest(groupId: String, after: String? = nil, limit: Int? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/apps".expanded(using: [
                "groupId": groupId
            ]), method: "GET", query: [
                "after": after, 
                "limit": limit
            ])
        }

        /**
         List Assigned Applications
         
         - parameter groupId: (path)  
         - parameter after: (query) Specifies the pagination cursor for the next page of apps (optional)
         - parameter limit: (query) Specifies the number of app results for a page (optional, default to 20)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listAssignedApplicationsForGroup(groupId: String, after: String? = nil, limit: Int? = nil, completion: @escaping (Result<OktaResponse<[Application]>, Error>) -> Void) {
            do {
                send(try listAssignedApplicationsForGroupURLRequest(groupId: groupId, after: after, limit: limit), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List Assigned Applications
         
         - parameter groupId: (path)  
         - parameter after: (query) Specifies the pagination cursor for the next page of apps (optional)
         - parameter limit: (query) Specifies the number of app results for a page (optional, default to 20)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listAssignedApplicationsForGroup(groupId: String, after: String? = nil, limit: Int? = nil) async throws -> OktaResponse<[Application]> {
            try await send(try listAssignedApplicationsForGroupURLRequest(groupId: groupId, after: after, limit: limit))
        }

        #if canImport(Combine)
        /**
         List Assigned Applications
         
         - parameter groupId: (path)  
         - parameter after: (query) Specifies the pagination cursor for the next page of apps (optional)
         - parameter limit: (query) Specifies the number of app results for a page (optional, default to 20)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listAssignedApplicationsForGroup(groupId: String, after: String? = nil, limit: Int? = nil) throws -> AnyPublisher<OktaResponse<[Application]>, Error> {
            publish(try listAssignedApplicationsForGroupURLRequest(groupId: groupId, after: after, limit: limit))
        }
        #endif


        internal func listGroupAssignedRolesURLRequest(groupId: String, expand: String? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles".expanded(using: [
                "groupId": groupId
            ]), method: "GET", query: [
                "expand": expand
            ])
        }

        /**

         - parameter groupId: (path)  
         - parameter expand: (query)  (optional)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listGroupAssignedRoles(groupId: String, expand: String? = nil, completion: @escaping (Result<OktaResponse<[Role]>, Error>) -> Void) {
            do {
                send(try listGroupAssignedRolesURLRequest(groupId: groupId, expand: expand), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter groupId: (path)  
         - parameter expand: (query)  (optional)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listGroupAssignedRoles(groupId: String, expand: String? = nil) async throws -> OktaResponse<[Role]> {
            try await send(try listGroupAssignedRolesURLRequest(groupId: groupId, expand: expand))
        }

        #if canImport(Combine)
        /**

         - parameter groupId: (path)  
         - parameter expand: (query)  (optional)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listGroupAssignedRoles(groupId: String, expand: String? = nil) throws -> AnyPublisher<OktaResponse<[Role]>, Error> {
            publish(try listGroupAssignedRolesURLRequest(groupId: groupId, expand: expand))
        }
        #endif


        internal func listGroupRulesURLRequest(limit: Int? = nil, after: String? = nil, search: String? = nil, expand: String? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups/rules", method: "GET", query: [
                "limit": limit, 
                "after": after, 
                "search": search, 
                "expand": expand
            ])
        }

        /**
         List Group Rules
         
         - parameter limit: (query) Specifies the number of rule results in a page (optional, default to 50)
         - parameter after: (query) Specifies the pagination cursor for the next page of rules (optional)
         - parameter search: (query) Specifies the keyword to search fules for (optional)
         - parameter expand: (query) If specified as &#x60;groupIdToGroupNameMap&#x60;, then show group names (optional)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listGroupRules(limit: Int? = nil, after: String? = nil, search: String? = nil, expand: String? = nil, completion: @escaping (Result<OktaResponse<[GroupRule]>, Error>) -> Void) {
            do {
                send(try listGroupRulesURLRequest(limit: limit, after: after, search: search, expand: expand), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List Group Rules
         
         - parameter limit: (query) Specifies the number of rule results in a page (optional, default to 50)
         - parameter after: (query) Specifies the pagination cursor for the next page of rules (optional)
         - parameter search: (query) Specifies the keyword to search fules for (optional)
         - parameter expand: (query) If specified as &#x60;groupIdToGroupNameMap&#x60;, then show group names (optional)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listGroupRules(limit: Int? = nil, after: String? = nil, search: String? = nil, expand: String? = nil) async throws -> OktaResponse<[GroupRule]> {
            try await send(try listGroupRulesURLRequest(limit: limit, after: after, search: search, expand: expand))
        }

        #if canImport(Combine)
        /**
         List Group Rules
         
         - parameter limit: (query) Specifies the number of rule results in a page (optional, default to 50)
         - parameter after: (query) Specifies the pagination cursor for the next page of rules (optional)
         - parameter search: (query) Specifies the keyword to search fules for (optional)
         - parameter expand: (query) If specified as &#x60;groupIdToGroupNameMap&#x60;, then show group names (optional)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listGroupRules(limit: Int? = nil, after: String? = nil, search: String? = nil, expand: String? = nil) throws -> AnyPublisher<OktaResponse<[GroupRule]>, Error> {
            publish(try listGroupRulesURLRequest(limit: limit, after: after, search: search, expand: expand))
        }
        #endif


        internal func listGroupTargetsForGroupRoleURLRequest(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}/targets/groups".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId
            ]), method: "GET", query: [
                "after": after, 
                "limit": limit
            ])
        }

        /**
         List Group Targets for Group Role
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to 20)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listGroupTargetsForGroupRole(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil, completion: @escaping (Result<OktaResponse<[Group]>, Error>) -> Void) {
            do {
                send(try listGroupTargetsForGroupRoleURLRequest(groupId: groupId, roleId: roleId, after: after, limit: limit), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List Group Targets for Group Role
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to 20)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listGroupTargetsForGroupRole(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil) async throws -> OktaResponse<[Group]> {
            try await send(try listGroupTargetsForGroupRoleURLRequest(groupId: groupId, roleId: roleId, after: after, limit: limit))
        }

        #if canImport(Combine)
        /**
         List Group Targets for Group Role
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to 20)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listGroupTargetsForGroupRole(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil) throws -> AnyPublisher<OktaResponse<[Group]>, Error> {
            publish(try listGroupTargetsForGroupRoleURLRequest(groupId: groupId, roleId: roleId, after: after, limit: limit))
        }
        #endif


        internal func listGroupUsersURLRequest(groupId: String, after: String? = nil, limit: Int? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/users".expanded(using: [
                "groupId": groupId
            ]), method: "GET", query: [
                "after": after, 
                "limit": limit
            ])
        }

        /**
         List Group Members
         
         - parameter groupId: (path)  
         - parameter after: (query) Specifies the pagination cursor for the next page of users (optional)
         - parameter limit: (query) Specifies the number of user results in a page (optional, default to 1000)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listGroupUsers(groupId: String, after: String? = nil, limit: Int? = nil, completion: @escaping (Result<OktaResponse<[User]>, Error>) -> Void) {
            do {
                send(try listGroupUsersURLRequest(groupId: groupId, after: after, limit: limit), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List Group Members
         
         - parameter groupId: (path)  
         - parameter after: (query) Specifies the pagination cursor for the next page of users (optional)
         - parameter limit: (query) Specifies the number of user results in a page (optional, default to 1000)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listGroupUsers(groupId: String, after: String? = nil, limit: Int? = nil) async throws -> OktaResponse<[User]> {
            try await send(try listGroupUsersURLRequest(groupId: groupId, after: after, limit: limit))
        }

        #if canImport(Combine)
        /**
         List Group Members
         
         - parameter groupId: (path)  
         - parameter after: (query) Specifies the pagination cursor for the next page of users (optional)
         - parameter limit: (query) Specifies the number of user results in a page (optional, default to 1000)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listGroupUsers(groupId: String, after: String? = nil, limit: Int? = nil) throws -> AnyPublisher<OktaResponse<[User]>, Error> {
            publish(try listGroupUsersURLRequest(groupId: groupId, after: after, limit: limit))
        }
        #endif


        internal func listGroupsURLRequest(q: String? = nil, search: String? = nil, after: String? = nil, limit: Int? = nil, expand: String? = nil) throws -> URLRequest {
            try request(to: "/api/v1/groups", method: "GET", query: [
                "q": q, 
                "search": search, 
                "after": after, 
                "limit": limit, 
                "expand": expand
            ])
        }

        /**
         List Groups
         
         - parameter q: (query) Searches the name property of groups for matching value (optional)
         - parameter search: (query) Filter expression for groups (optional)
         - parameter after: (query) Specifies the pagination cursor for the next page of groups (optional)
         - parameter limit: (query) Specifies the number of group results in a page (optional, default to 10000)
         - parameter expand: (query) If specified, it causes additional metadata to be included in the response. (optional)
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listGroups(q: String? = nil, search: String? = nil, after: String? = nil, limit: Int? = nil, expand: String? = nil, completion: @escaping (Result<OktaResponse<[Group]>, Error>) -> Void) {
            do {
                send(try listGroupsURLRequest(q: q, search: search, after: after, limit: limit, expand: expand), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         List Groups
         
         - parameter q: (query) Searches the name property of groups for matching value (optional)
         - parameter search: (query) Filter expression for groups (optional)
         - parameter after: (query) Specifies the pagination cursor for the next page of groups (optional)
         - parameter limit: (query) Specifies the number of group results in a page (optional, default to 10000)
         - parameter expand: (query) If specified, it causes additional metadata to be included in the response. (optional)
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listGroups(q: String? = nil, search: String? = nil, after: String? = nil, limit: Int? = nil, expand: String? = nil) async throws -> OktaResponse<[Group]> {
            try await send(try listGroupsURLRequest(q: q, search: search, after: after, limit: limit, expand: expand))
        }

        #if canImport(Combine)
        /**
         List Groups
         
         - parameter q: (query) Searches the name property of groups for matching value (optional)
         - parameter search: (query) Filter expression for groups (optional)
         - parameter after: (query) Specifies the pagination cursor for the next page of groups (optional)
         - parameter limit: (query) Specifies the number of group results in a page (optional, default to 10000)
         - parameter expand: (query) If specified, it causes additional metadata to be included in the response. (optional)
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listGroups(q: String? = nil, search: String? = nil, after: String? = nil, limit: Int? = nil, expand: String? = nil) throws -> AnyPublisher<OktaResponse<[Group]>, Error> {
            publish(try listGroupsURLRequest(q: q, search: search, after: after, limit: limit, expand: expand))
        }
        #endif


        internal func removeApplicationTargetFromAdministratorRoleGivenToGroupURLRequest(groupId: String, roleId: String, appName: String, applicationId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId, 
                "appName": appName, 
                "applicationId": applicationId
            ]), method: "DELETE")
        }

        /**
         Remove App Instance Target to App Administrator Role given to a Group
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         - parameter applicationId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func removeApplicationTargetFromAdministratorRoleGivenToGroup(groupId: String, roleId: String, appName: String, applicationId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try removeApplicationTargetFromAdministratorRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName, applicationId: applicationId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Remove App Instance Target to App Administrator Role given to a Group
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         - parameter applicationId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func removeApplicationTargetFromAdministratorRoleGivenToGroup(groupId: String, roleId: String, appName: String, applicationId: String) async throws -> OktaResponse<Empty> {
            try await send(try removeApplicationTargetFromAdministratorRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName, applicationId: applicationId))
        }

        #if canImport(Combine)
        /**
         Remove App Instance Target to App Administrator Role given to a Group
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         - parameter applicationId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func removeApplicationTargetFromAdministratorRoleGivenToGroup(groupId: String, roleId: String, appName: String, applicationId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try removeApplicationTargetFromAdministratorRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName, applicationId: applicationId))
        }
        #endif


        internal func removeApplicationTargetFromApplicationAdministratorRoleGivenToGroupURLRequest(groupId: String, roleId: String, appName: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId, 
                "appName": appName
            ]), method: "DELETE")
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func removeApplicationTargetFromApplicationAdministratorRoleGivenToGroup(groupId: String, roleId: String, appName: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try removeApplicationTargetFromApplicationAdministratorRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func removeApplicationTargetFromApplicationAdministratorRoleGivenToGroup(groupId: String, roleId: String, appName: String) async throws -> OktaResponse<Empty> {
            try await send(try removeApplicationTargetFromApplicationAdministratorRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName))
        }

        #if canImport(Combine)
        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter appName: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func removeApplicationTargetFromApplicationAdministratorRoleGivenToGroup(groupId: String, roleId: String, appName: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try removeApplicationTargetFromApplicationAdministratorRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, appName: appName))
        }
        #endif


        internal func removeGroupTargetFromGroupAdministratorRoleGivenToGroupURLRequest(groupId: String, roleId: String, targetGroupId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId, 
                "targetGroupId": targetGroupId
            ]), method: "DELETE")
        }

        /**
         Delete Group Target for Group Role
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter targetGroupId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func removeGroupTargetFromGroupAdministratorRoleGivenToGroup(groupId: String, roleId: String, targetGroupId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try removeGroupTargetFromGroupAdministratorRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, targetGroupId: targetGroupId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Delete Group Target for Group Role
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter targetGroupId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func removeGroupTargetFromGroupAdministratorRoleGivenToGroup(groupId: String, roleId: String, targetGroupId: String) async throws -> OktaResponse<Empty> {
            try await send(try removeGroupTargetFromGroupAdministratorRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, targetGroupId: targetGroupId))
        }

        #if canImport(Combine)
        /**
         Delete Group Target for Group Role
         
         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter targetGroupId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func removeGroupTargetFromGroupAdministratorRoleGivenToGroup(groupId: String, roleId: String, targetGroupId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try removeGroupTargetFromGroupAdministratorRoleGivenToGroupURLRequest(groupId: groupId, roleId: roleId, targetGroupId: targetGroupId))
        }
        #endif


        internal func removeRoleFromGroupURLRequest(groupId: String, roleId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/roles/{roleId}".expanded(using: [
                "groupId": groupId, 
                "roleId": roleId
            ]), method: "DELETE")
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func removeRoleFromGroup(groupId: String, roleId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try removeRoleFromGroupURLRequest(groupId: groupId, roleId: roleId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func removeRoleFromGroup(groupId: String, roleId: String) async throws -> OktaResponse<Empty> {
            try await send(try removeRoleFromGroupURLRequest(groupId: groupId, roleId: roleId))
        }

        #if canImport(Combine)
        /**

         - parameter groupId: (path)  
         - parameter roleId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func removeRoleFromGroup(groupId: String, roleId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try removeRoleFromGroupURLRequest(groupId: groupId, roleId: roleId))
        }
        #endif


        internal func removeUserFromGroupURLRequest(groupId: String, userId: String) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}/users/{userId}".expanded(using: [
                "groupId": groupId, 
                "userId": userId
            ]), method: "DELETE")
        }

        /**
         Remove User from Group
         
         - parameter groupId: (path)  
         - parameter userId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func removeUserFromGroup(groupId: String, userId: String, completion: @escaping (Result<OktaResponse<Empty>, Error>) -> Void) {
            do {
                send(try removeUserFromGroupURLRequest(groupId: groupId, userId: userId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Remove User from Group
         
         - parameter groupId: (path)  
         - parameter userId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func removeUserFromGroup(groupId: String, userId: String) async throws -> OktaResponse<Empty> {
            try await send(try removeUserFromGroupURLRequest(groupId: groupId, userId: userId))
        }

        #if canImport(Combine)
        /**
         Remove User from Group
         
         - parameter groupId: (path)  
         - parameter userId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func removeUserFromGroup(groupId: String, userId: String) throws -> AnyPublisher<OktaResponse<Empty>, Error> {
            publish(try removeUserFromGroupURLRequest(groupId: groupId, userId: userId))
        }
        #endif


        internal func updateGroupURLRequest(groupId: String, group: Group) throws -> URLRequest {
            try request(to: "/api/v1/groups/{groupId}".expanded(using: [
                "groupId": groupId
            ]), method: "PUT", body: group)
        }

        /**
         Update Group
         
         - parameter groupId: (path)  
         - parameter group: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func updateGroup(groupId: String, group: Group, completion: @escaping (Result<OktaResponse<Group>, Error>) -> Void) {
            do {
                send(try updateGroupURLRequest(groupId: groupId, group: group), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Update Group
         
         - parameter groupId: (path)  
         - parameter group: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func updateGroup(groupId: String, group: Group) async throws -> OktaResponse<Group> {
            try await send(try updateGroupURLRequest(groupId: groupId, group: group))
        }

        #if canImport(Combine)
        /**
         Update Group
         
         - parameter groupId: (path)  
         - parameter group: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func updateGroup(groupId: String, group: Group) throws -> AnyPublisher<OktaResponse<Group>, Error> {
            publish(try updateGroupURLRequest(groupId: groupId, group: group))
        }
        #endif


        internal func updateGroupRuleURLRequest(ruleId: String, groupRule: GroupRule) throws -> URLRequest {
            try request(to: "/api/v1/groups/rules/{ruleId}".expanded(using: [
                "ruleId": ruleId
            ]), method: "PUT", body: groupRule)
        }

        /**

         - parameter ruleId: (path)  
         - parameter groupRule: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func updateGroupRule(ruleId: String, groupRule: GroupRule, completion: @escaping (Result<OktaResponse<GroupRule>, Error>) -> Void) {
            do {
                send(try updateGroupRuleURLRequest(ruleId: ruleId, groupRule: groupRule), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter ruleId: (path)  
         - parameter groupRule: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func updateGroupRule(ruleId: String, groupRule: GroupRule) async throws -> OktaResponse<GroupRule> {
            try await send(try updateGroupRuleURLRequest(ruleId: ruleId, groupRule: groupRule))
        }

        #if canImport(Combine)
        /**

         - parameter ruleId: (path)  
         - parameter groupRule: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func updateGroupRule(ruleId: String, groupRule: GroupRule) throws -> AnyPublisher<OktaResponse<GroupRule>, Error> {
            publish(try updateGroupRuleURLRequest(ruleId: ruleId, groupRule: groupRule))
        }
        #endif

    }
}
