//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct CAPTCHAAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Create a CAPTCHA instance
         
         - parameter instance: (body)  
         */
        public func createCaptchaInstance(instance: CAPTCHAInstance) async throws -> OktaResponse<CAPTCHAInstance> {
            try await send(try requestWithBody(to: "/api/v1/captchas", method: "POST", body: instance))
        }

        /**
         Delete a CAPTCHA Instance
         
         - parameter captchaId: (path) id of the CAPTCHA 
         */
        @discardableResult
        public func deleteCaptchaInstance(captchaId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/captchas/{captchaId}".expanded(using: [
                    "captchaId": captchaId
                ]), method: "DELETE"))
        }

        /**
         Retrieve a CAPTCHA Instance
         
         - parameter captchaId: (path) id of the CAPTCHA 
         */
        public func getCaptchaInstance(captchaId: String) async throws -> OktaResponse<CAPTCHAInstance> {
            try await send(try request(to: "/api/v1/captchas/{captchaId}".expanded(using: [
                    "captchaId": captchaId
                ]), method: "GET"))
        }

        /**
         List all CAPTCHA instances
         
         */
        public func listCaptchaInstances() async throws -> OktaResponse<[CAPTCHAInstance]> {
            try await send(try request(to: "/api/v1/captchas", method: "GET"))
        }

        /**
         Update a CAPTCHA instance
         
         - parameter captchaId: (path) id of the CAPTCHA 
         - parameter instance: (body)  
         */
        public func partialUpdateCaptchaInstance(captchaId: String, instance: CAPTCHAInstance) async throws -> OktaResponse<CAPTCHAInstance> {
            try await send(try requestWithBody(to: "/api/v1/captchas/{captchaId}".expanded(using: [
                    "captchaId": captchaId
                ]), method: "POST", body: instance))
        }

        /**
         Replace a CAPTCHA instance
         
         - parameter captchaId: (path) id of the CAPTCHA 
         - parameter instance: (body)  
         */
        public func updateCaptchaInstance(captchaId: String, instance: CAPTCHAInstance) async throws -> OktaResponse<CAPTCHAInstance> {
            try await send(try requestWithBody(to: "/api/v1/captchas/{captchaId}".expanded(using: [
                    "captchaId": captchaId
                ]), method: "PUT", body: instance))
        }

    }
}
