//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(Combine)
import Combine
#endif

public extension OktaClient {

    struct ProfileMappingAPI: OktaClientAPI {
        internal let baseURL: URL
        internal let urlSession: URLSession


        internal func getProfileMappingURLRequest(mappingId: String) throws -> URLRequest {
            try request(to: "/api/v1/mappings/{mappingId}".expanded(using: [
                "mappingId": mappingId
            ]), method: "GET")
        }

        /**
         Get Profile Mapping
         
         - parameter mappingId: (path)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func getProfileMapping(mappingId: String, completion: @escaping (Result<OktaResponse<ProfileMapping>, Error>) -> Void) {
            do {
                send(try getProfileMappingURLRequest(mappingId: mappingId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Get Profile Mapping
         
         - parameter mappingId: (path)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func getProfileMappingAsync(mappingId: String) async throws -> OktaResponse<ProfileMapping> {
            try await send(try getProfileMappingURLRequest(mappingId: mappingId))
        }

        #if canImport(Combine)
        /**
         Get Profile Mapping
         
         - parameter mappingId: (path)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func getProfileMapping(mappingId: String) throws -> AnyPublisher<OktaResponse<ProfileMapping>, Error> {
            publish(try getProfileMappingURLRequest(mappingId: mappingId))
        }
        #endif


        internal func listProfileMappingsURLRequest(after: String? = nil, limit: Int? = nil, sourceId: String? = nil, targetId: String? = nil) throws -> URLRequest {
            try request(to: "/api/v1/mappings", method: "GET", query: [
                "after": after, 
                "limit": limit, 
                "sourceId": sourceId, 
                "targetId": targetId
            ])
        }

        /**

         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         - parameter sourceId: (query)  (optional)
         - parameter targetId: (query)  (optional, default to "")
         - parameter completion: completion handler to receive the data and the error objects
         */
        func listProfileMappings(after: String? = nil, limit: Int? = nil, sourceId: String? = nil, targetId: String? = nil, completion: @escaping (Result<OktaResponse<[ProfileMapping]>, Error>) -> Void) {
            do {
                send(try listProfileMappingsURLRequest(after: after, limit: limit, sourceId: sourceId, targetId: targetId), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**

         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         - parameter sourceId: (query)  (optional)
         - parameter targetId: (query)  (optional, default to "")
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func listProfileMappingsAsync(after: String? = nil, limit: Int? = nil, sourceId: String? = nil, targetId: String? = nil) async throws -> OktaResponse<[ProfileMapping]> {
            try await send(try listProfileMappingsURLRequest(after: after, limit: limit, sourceId: sourceId, targetId: targetId))
        }

        #if canImport(Combine)
        /**

         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to -1)
         - parameter sourceId: (query)  (optional)
         - parameter targetId: (query)  (optional, default to "")
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func listProfileMappings(after: String? = nil, limit: Int? = nil, sourceId: String? = nil, targetId: String? = nil) throws -> AnyPublisher<OktaResponse<[ProfileMapping]>, Error> {
            publish(try listProfileMappingsURLRequest(after: after, limit: limit, sourceId: sourceId, targetId: targetId))
        }
        #endif


        internal func updateProfileMappingURLRequest(mappingId: String, profileMapping: ProfileMapping) throws -> URLRequest {
            try request(to: "/api/v1/mappings/{mappingId}".expanded(using: [
                "mappingId": mappingId
            ]), method: "POST", body: profileMapping)
        }

        /**
         Update Profile Mapping
         
         - parameter mappingId: (path)  
         - parameter profileMapping: (body)  
         - parameter completion: completion handler to receive the data and the error objects
         */
        func updateProfileMapping(mappingId: String, profileMapping: ProfileMapping, completion: @escaping (Result<OktaResponse<ProfileMapping>, Error>) -> Void) {
            do {
                send(try updateProfileMappingURLRequest(mappingId: mappingId, profileMapping: profileMapping), completion: completion)
            } catch {
                completion(.failure(error))
            }
        }

        /**
         Update Profile Mapping
         
         - parameter mappingId: (path)  
         - parameter profileMapping: (body)  
         */
        @available(iOS 15.0, tvOS 15.0, macOS 12.0, *)
        func updateProfileMappingAsync(mappingId: String, profileMapping: ProfileMapping) async throws -> OktaResponse<ProfileMapping> {
            try await send(try updateProfileMappingURLRequest(mappingId: mappingId, profileMapping: profileMapping))
        }

        #if canImport(Combine)
        /**
         Update Profile Mapping
         
         - parameter mappingId: (path)  
         - parameter profileMapping: (body)  
         */
        @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
        func updateProfileMapping(mappingId: String, profileMapping: ProfileMapping) throws -> AnyPublisher<OktaResponse<ProfileMapping>, Error> {
            publish(try updateProfileMappingURLRequest(mappingId: mappingId, profileMapping: profileMapping))
        }
        #endif

    }
}
