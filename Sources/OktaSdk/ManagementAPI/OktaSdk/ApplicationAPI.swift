//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct ApplicationAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Activate an Application
         
         - parameter appId: (path)  
         */
        @discardableResult
        func activateApplication(appId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/lifecycle/activate".expanded(using: [
                    "appId": appId
                ]), method: "POST"))
        }

        /**
         Activate the default Provisioning Connection
         
         - parameter appId: (path)  
         */
        @discardableResult
        func activateDefaultProvisioningConnectionForApplication(appId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/connections/default/lifecycle/activate".expanded(using: [
                    "appId": appId
                ]), method: "POST"))
        }

        /**
         Assign a User
         
         - parameter appId: (path)  
         - parameter appUser: (body)  
         */
        func assignUserToApplication(appId: String, appUser: AppUser) async throws -> OktaResponse<AppUser> {
            try await send(try requestWithBody(to: "/api/v1/apps/{appId}/users".expanded(using: [
                    "appId": appId
                ]), method: "POST", body: appUser))
        }

        /**
         Clone a Key Credential
         
         - parameter appId: (path)  
         - parameter keyId: (path)  
         - parameter targetAid: (query) Unique key of the target Application 
         */
        func cloneApplicationKey(appId: String, keyId: String, targetAid: String) async throws -> OktaResponse<JsonWebKey> {
            try await send(try request(to: "/api/v1/apps/{appId}/credentials/keys/{keyId}/clone".expanded(using: [
                    "appId": appId, 
                    "keyId": keyId
                ]), method: "POST", query: [
                    "targetAid": targetAid
                ]))
        }

        /**
         Create an Application
         
         - parameter application: (body)  
         - parameter activate: (query) Executes activation lifecycle operation when creating the app (optional, default to true)
         - parameter oktaAccessGatewayAgent: (header)  (optional)
         */
        func createApplication(application: Application, activate: Bool? = nil, oktaAccessGatewayAgent: String? = nil) async throws -> OktaResponse<Application> {
            try await send(try requestWithBody(to: "/api/v1/apps", method: "POST", query: [
                    "activate": activate
                ], headers: [
                    "oktaAccessGatewayAgent": oktaAccessGatewayAgent?.stringValue
                ], body: application))
        }

        /**
         Assign a Group
         
         - parameter appId: (path)  
         - parameter groupId: (path)  
         - parameter applicationGroupAssignment: (body)  (optional)
         */
        func createApplicationGroupAssignment(appId: String, groupId: String, applicationGroupAssignment: ApplicationGroupAssignment? = nil) async throws -> OktaResponse<ApplicationGroupAssignment> {
            try await send(try requestWithBody(to: "/api/v1/apps/{appId}/groups/{groupId}".expanded(using: [
                    "appId": appId, 
                    "groupId": groupId
                ]), method: "PUT", body: applicationGroupAssignment))
        }

        /**
         Deactivate an Application
         
         - parameter appId: (path)  
         */
        @discardableResult
        func deactivateApplication(appId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/lifecycle/deactivate".expanded(using: [
                    "appId": appId
                ]), method: "POST"))
        }

        /**
         Deactivate the default Provisioning Connection for an Application
         
         - parameter appId: (path)  
         */
        @discardableResult
        func deactivateDefaultProvisioningConnectionForApplication(appId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/connections/default/lifecycle/deactivate".expanded(using: [
                    "appId": appId
                ]), method: "POST"))
        }

        /**
         Delete an Application
         
         - parameter appId: (path)  
         */
        @discardableResult
        func deleteApplication(appId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}".expanded(using: [
                    "appId": appId
                ]), method: "DELETE"))
        }

        /**
         Unassign a Group
         
         - parameter appId: (path)  
         - parameter groupId: (path)  
         */
        @discardableResult
        func deleteApplicationGroupAssignment(appId: String, groupId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/groups/{groupId}".expanded(using: [
                    "appId": appId, 
                    "groupId": groupId
                ]), method: "DELETE"))
        }

        /**
         Unassign a User
         
         - parameter appId: (path)  
         - parameter userId: (path)  
         - parameter sendEmail: (query)  (optional, default to false)
         */
        @discardableResult
        func deleteApplicationUser(appId: String, userId: String, sendEmail: Bool? = nil) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/users/{userId}".expanded(using: [
                    "appId": appId, 
                    "userId": userId
                ]), method: "DELETE", query: [
                    "sendEmail": sendEmail
                ]))
        }

        /**
         Generate a Key Credential
         
         - parameter appId: (path)  
         - parameter validityYears: (query)  (optional)
         */
        func generateApplicationKey(appId: String, validityYears: Int? = nil) async throws -> OktaResponse<JsonWebKey> {
            try await send(try request(to: "/api/v1/apps/{appId}/credentials/keys/generate".expanded(using: [
                    "appId": appId
                ]), method: "POST", query: [
                    "validityYears": validityYears
                ]))
        }

        /**
         Generate a Certificate Signing Request
         
         - parameter appId: (path)  
         - parameter metadata: (body)  
         */
        func generateCsrForApplication(appId: String, metadata: CsrMetadata) async throws -> OktaResponse<Csr> {
            try await send(try requestWithBody(to: "/api/v1/apps/{appId}/credentials/csrs".expanded(using: [
                    "appId": appId
                ]), method: "POST", body: metadata))
        }

        /**
         Retrieve an Application
         
         - parameter appId: (path)  
         - parameter expand: (query)  (optional)
         */
        func getApplication(appId: String, expand: String? = nil) async throws -> OktaResponse<Application> {
            try await send(try request(to: "/api/v1/apps/{appId}".expanded(using: [
                    "appId": appId
                ]), method: "GET", query: [
                    "expand": expand
                ]))
        }

        /**
         Retrieve an Assigned Group
         
         - parameter appId: (path)  
         - parameter groupId: (path)  
         - parameter expand: (query)  (optional)
         */
        func getApplicationGroupAssignment(appId: String, groupId: String, expand: String? = nil) async throws -> OktaResponse<ApplicationGroupAssignment> {
            try await send(try request(to: "/api/v1/apps/{appId}/groups/{groupId}".expanded(using: [
                    "appId": appId, 
                    "groupId": groupId
                ]), method: "GET", query: [
                    "expand": expand
                ]))
        }

        /**
         Retrieve a Key Credential
         
         - parameter appId: (path)  
         - parameter keyId: (path)  
         */
        func getApplicationKey(appId: String, keyId: String) async throws -> OktaResponse<JsonWebKey> {
            try await send(try request(to: "/api/v1/apps/{appId}/credentials/keys/{keyId}".expanded(using: [
                    "appId": appId, 
                    "keyId": keyId
                ]), method: "GET"))
        }

        /**
         Retrieve an Assigned User
         
         - parameter appId: (path)  
         - parameter userId: (path)  
         - parameter expand: (query)  (optional)
         */
        func getApplicationUser(appId: String, userId: String, expand: String? = nil) async throws -> OktaResponse<AppUser> {
            try await send(try request(to: "/api/v1/apps/{appId}/users/{userId}".expanded(using: [
                    "appId": appId, 
                    "userId": userId
                ]), method: "GET", query: [
                    "expand": expand
                ]))
        }

        /**
         Retrieve a Certificate Signing Request
         
         - parameter appId: (path)  
         - parameter csrId: (path)  
         */
        func getCsrForApplication(appId: String, csrId: String) async throws -> OktaResponse<Csr> {
            try await send(try request(to: "/api/v1/apps/{appId}/credentials/csrs/{csrId}".expanded(using: [
                    "appId": appId, 
                    "csrId": csrId
                ]), method: "GET"))
        }

        /**
         Retrieve the default Provisioning Connection
         
         - parameter appId: (path)  
         */
        func getDefaultProvisioningConnectionForApplication(appId: String) async throws -> OktaResponse<ProvisioningConnection> {
            try await send(try request(to: "/api/v1/apps/{appId}/connections/default".expanded(using: [
                    "appId": appId
                ]), method: "GET"))
        }

        /**
         Retrieve a Feature
         
         - parameter appId: (path)  
         - parameter name: (path)  
         */
        func getFeatureForApplication(appId: String, name: String) async throws -> OktaResponse<ApplicationFeature> {
            try await send(try request(to: "/api/v1/apps/{appId}/features/{name}".expanded(using: [
                    "appId": appId, 
                    "name": name
                ]), method: "GET"))
        }

        /**
         Retrieve an OAuth 2.0 Token
         
         - parameter appId: (path)  
         - parameter tokenId: (path)  
         - parameter expand: (query)  (optional)
         */
        func getOAuth2TokenForApplication(appId: String, tokenId: String, expand: String? = nil) async throws -> OktaResponse<OAuth2Token> {
            try await send(try request(to: "/api/v1/apps/{appId}/tokens/{tokenId}".expanded(using: [
                    "appId": appId, 
                    "tokenId": tokenId
                ]), method: "GET", query: [
                    "expand": expand
                ]))
        }

        /**
         Retrieve a Scope Consent Grant
         
         - parameter appId: (path)  
         - parameter grantId: (path)  
         - parameter expand: (query)  (optional)
         */
        func getScopeConsentGrant(appId: String, grantId: String, expand: String? = nil) async throws -> OktaResponse<OAuth2ScopeConsentGrant> {
            try await send(try request(to: "/api/v1/apps/{appId}/grants/{grantId}".expanded(using: [
                    "appId": appId, 
                    "grantId": grantId
                ]), method: "GET", query: [
                    "expand": expand
                ]))
        }

        /**
         Grant Consent to Scope
         
         - parameter appId: (path)  
         - parameter oAuth2ScopeConsentGrant: (body)  
         */
        func grantConsentToScope(appId: String, oAuth2ScopeConsentGrant: OAuth2ScopeConsentGrant) async throws -> OktaResponse<OAuth2ScopeConsentGrant> {
            try await send(try requestWithBody(to: "/api/v1/apps/{appId}/grants".expanded(using: [
                    "appId": appId
                ]), method: "POST", body: oAuth2ScopeConsentGrant))
        }

        /**
         List all Assigned Groups
         
         - parameter appId: (path)  
         - parameter q: (query)  (optional)
         - parameter after: (query) Specifies the pagination cursor for the next page of assignments (optional)
         - parameter limit: (query) Specifies the number of results for a page (optional, default to -1)
         - parameter expand: (query)  (optional)
         */
        func listApplicationGroupAssignments(appId: String, q: String? = nil, after: String? = nil, limit: Int? = nil, expand: String? = nil) async throws -> OktaResponse<[ApplicationGroupAssignment]> {
            try await send(try request(to: "/api/v1/apps/{appId}/groups".expanded(using: [
                    "appId": appId
                ]), method: "GET", query: [
                    "q": q, 
                    "after": after, 
                    "limit": limit, 
                    "expand": expand
                ]))
        }

        /**
         List all Key Credentials
         
         - parameter appId: (path)  
         */
        func listApplicationKeys(appId: String) async throws -> OktaResponse<[JsonWebKey]> {
            try await send(try request(to: "/api/v1/apps/{appId}/credentials/keys".expanded(using: [
                    "appId": appId
                ]), method: "GET"))
        }

        /**
         List all Assigned Users
         
         - parameter appId: (path)  
         - parameter q: (query)  (optional)
         - parameter queryScope: (query)  (optional)
         - parameter after: (query) specifies the pagination cursor for the next page of assignments (optional)
         - parameter limit: (query) specifies the number of results for a page (optional, default to -1)
         - parameter filter: (query)  (optional)
         - parameter expand: (query)  (optional)
         */
        func listApplicationUsers(appId: String, q: String? = nil, queryScope: String? = nil, after: String? = nil, limit: Int? = nil, filter: String? = nil, expand: String? = nil) async throws -> OktaResponse<[AppUser]> {
            try await send(try request(to: "/api/v1/apps/{appId}/users".expanded(using: [
                    "appId": appId
                ]), method: "GET", query: [
                    "q": q, 
                    "queryScope": queryScope, 
                    "after": after, 
                    "limit": limit, 
                    "filter": filter, 
                    "expand": expand
                ]))
        }

        /**
         List all Applications
         
         - parameter q: (query)  (optional)
         - parameter after: (query) Specifies the pagination cursor for the next page of apps (optional)
         - parameter limit: (query) Specifies the number of results for a page (optional, default to -1)
         - parameter filter: (query) Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)
         - parameter expand: (query) Traverses users link relationship and optionally embeds Application User resource (optional)
         - parameter includeNonDeleted: (query)  (optional, default to false)
         */
        func listApplications(q: String? = nil, after: String? = nil, limit: Int? = nil, filter: String? = nil, expand: String? = nil, includeNonDeleted: Bool? = nil) async throws -> OktaResponse<[Application]> {
            try await send(try request(to: "/api/v1/apps", method: "GET", query: [
                    "q": q, 
                    "after": after, 
                    "limit": limit, 
                    "filter": filter, 
                    "expand": expand, 
                    "includeNonDeleted": includeNonDeleted
                ]))
        }

        /**
         List all Certificate Signing Requests
         
         - parameter appId: (path)  
         */
        func listCsrsForApplication(appId: String) async throws -> OktaResponse<[Csr]> {
            try await send(try request(to: "/api/v1/apps/{appId}/credentials/csrs".expanded(using: [
                    "appId": appId
                ]), method: "GET"))
        }

        /**
         List all Features
         
         - parameter appId: (path)  
         */
        func listFeaturesForApplication(appId: String) async throws -> OktaResponse<[ApplicationFeature]> {
            try await send(try request(to: "/api/v1/apps/{appId}/features".expanded(using: [
                    "appId": appId
                ]), method: "GET"))
        }

        /**
         List all OAuth 2.0 Tokens
         
         - parameter appId: (path)  
         - parameter expand: (query)  (optional)
         - parameter after: (query)  (optional)
         - parameter limit: (query)  (optional, default to 20)
         */
        func listOAuth2TokensForApplication(appId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) async throws -> OktaResponse<[OAuth2Token]> {
            try await send(try request(to: "/api/v1/apps/{appId}/tokens".expanded(using: [
                    "appId": appId
                ]), method: "GET", query: [
                    "expand": expand, 
                    "after": after, 
                    "limit": limit
                ]))
        }

        /**
         List all Scope Consent Grants
         
         - parameter appId: (path)  
         - parameter expand: (query)  (optional)
         */
        func listScopeConsentGrants(appId: String, expand: String? = nil) async throws -> OktaResponse<[OAuth2ScopeConsentGrant]> {
            try await send(try request(to: "/api/v1/apps/{appId}/grants".expanded(using: [
                    "appId": appId
                ]), method: "GET", query: [
                    "expand": expand
                ]))
        }

        /**
         Publish a Certificate Signing Request
         
         - parameter appId: (path)  
         - parameter csrId: (path)  
         - parameter body: (body)  
         */
        func publishCsrFromApplication(appId: String, csrId: String, body: URL) async throws -> OktaResponse<JsonWebKey> {
            try await send(try requestWithBody(to: "/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish".expanded(using: [
                    "appId": appId, 
                    "csrId": csrId
                ]), method: "POST", body: body))
        }

        /**
         Revoke a Certificate Signing Request
         
         - parameter appId: (path)  
         - parameter csrId: (path)  
         */
        @discardableResult
        func revokeCsrFromApplication(appId: String, csrId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/credentials/csrs/{csrId}".expanded(using: [
                    "appId": appId, 
                    "csrId": csrId
                ]), method: "DELETE"))
        }

        /**
         Revoke an OAuth 2.0 Token
         
         - parameter appId: (path)  
         - parameter tokenId: (path)  
         */
        @discardableResult
        func revokeOAuth2TokenForApplication(appId: String, tokenId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/tokens/{tokenId}".expanded(using: [
                    "appId": appId, 
                    "tokenId": tokenId
                ]), method: "DELETE"))
        }

        /**
         Revoke all OAuth 2.0 Tokens
         
         - parameter appId: (path)  
         */
        @discardableResult
        func revokeOAuth2TokensForApplication(appId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/tokens".expanded(using: [
                    "appId": appId
                ]), method: "DELETE"))
        }

        /**
         Revoke a Scope Consent Grant
         
         - parameter appId: (path)  
         - parameter grantId: (path)  
         */
        @discardableResult
        func revokeScopeConsentGrant(appId: String, grantId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/grants/{grantId}".expanded(using: [
                    "appId": appId, 
                    "grantId": grantId
                ]), method: "DELETE"))
        }

        /**
         Update the default Provisioning Connection
         
         - parameter appId: (path)  
         - parameter provisioningConnectionRequest: (body)  
         - parameter activate: (query)  (optional)
         */
        func setDefaultProvisioningConnectionForApplication(appId: String, provisioningConnectionRequest: ProvisioningConnectionRequest, activate: Bool? = nil) async throws -> OktaResponse<ProvisioningConnection> {
            try await send(try requestWithBody(to: "/api/v1/apps/{appId}/connections/default".expanded(using: [
                    "appId": appId
                ]), method: "POST", query: [
                    "activate": activate
                ], body: provisioningConnectionRequest))
        }

        /**
         Replace an Application
         
         - parameter appId: (path)  
         - parameter application: (body)  
         */
        func updateApplication(appId: String, application: Application) async throws -> OktaResponse<Application> {
            try await send(try requestWithBody(to: "/api/v1/apps/{appId}".expanded(using: [
                    "appId": appId
                ]), method: "PUT", body: application))
        }

        /**
         Update an Application Profile for Assigned User
         
         - parameter appId: (path)  
         - parameter userId: (path)  
         - parameter appUser: (body)  
         */
        func updateApplicationUser(appId: String, userId: String, appUser: AppUser) async throws -> OktaResponse<AppUser> {
            try await send(try requestWithBody(to: "/api/v1/apps/{appId}/users/{userId}".expanded(using: [
                    "appId": appId, 
                    "userId": userId
                ]), method: "POST", body: appUser))
        }

        /**
         Update a Feature
         
         - parameter appId: (path)  
         - parameter name: (path)  
         - parameter capabilitiesObject: (body)  
         */
        func updateFeatureForApplication(appId: String, name: String, capabilitiesObject: CapabilitiesObject) async throws -> OktaResponse<ApplicationFeature> {
            try await send(try requestWithBody(to: "/api/v1/apps/{appId}/features/{name}".expanded(using: [
                    "appId": appId, 
                    "name": name
                ]), method: "PUT", body: capabilitiesObject))
        }

        /**
         Upload a Logo
         
         - parameter appId: (path)  
         - parameter file: (form)  
         */
        @discardableResult
        func uploadApplicationLogo(appId: String, file: URL) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/apps/{appId}/logo".expanded(using: [
                    "appId": appId
                ]), method: "POST"))
        }

    }
}
