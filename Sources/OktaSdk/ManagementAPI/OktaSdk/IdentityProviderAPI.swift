//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

public extension OktaClient {

    struct IdentityProviderAPI: OktaClientAPI {
        internal let context: OktaClient.APIContext

        /**
         Activate an Identity Provider
         
         - parameter idpId: (path)  
         */
        public func activateIdentityProvider(idpId: String) async throws -> OktaResponse<IdentityProvider> {
            try await send(try request(to: "/api/v1/idps/{idpId}/lifecycle/activate".expanded(using: [
                    "idpId": idpId
                ]), method: "POST"))
        }

        /**
         Clone a Signing Credential Key
         
         - parameter idpId: (path)  
         - parameter keyId: (path)  
         - parameter targetIdpId: (query)  
         */
        public func cloneIdentityProviderKey(idpId: String, keyId: String, targetIdpId: String) async throws -> OktaResponse<JsonWebKey> {
            try await send(try request(to: "/api/v1/idps/{idpId}/credentials/keys/{keyId}/clone".expanded(using: [
                    "idpId": idpId, 
                    "keyId": keyId
                ]), method: "POST", query: [
                    "targetIdpId": targetIdpId
                ]))
        }

        /**
         Create an Identity Provider
         
         - parameter identityProvider: (body)  
         */
        public func createIdentityProvider(identityProvider: IdentityProvider) async throws -> OktaResponse<IdentityProvider> {
            try await send(try requestWithBody(to: "/api/v1/idps", method: "POST", body: identityProvider))
        }

        /**
         Create an X.509 Certificate Public Key
         
         - parameter jsonWebKey: (body)  
         */
        public func createIdentityProviderKey(jsonWebKey: JsonWebKey) async throws -> OktaResponse<JsonWebKey> {
            try await send(try requestWithBody(to: "/api/v1/idps/credentials/keys", method: "POST", body: jsonWebKey))
        }

        /**
         Deactivate an Identity Provider
         
         - parameter idpId: (path)  
         */
        public func deactivateIdentityProvider(idpId: String) async throws -> OktaResponse<IdentityProvider> {
            try await send(try request(to: "/api/v1/idps/{idpId}/lifecycle/deactivate".expanded(using: [
                    "idpId": idpId
                ]), method: "POST"))
        }

        /**
         Delete an Identity Provider
         
         - parameter idpId: (path)  
         */
        @discardableResult
        public func deleteIdentityProvider(idpId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/idps/{idpId}".expanded(using: [
                    "idpId": idpId
                ]), method: "DELETE"))
        }

        /**
         Delete a Signing Credential Key
         
         - parameter keyId: (path)  
         */
        @discardableResult
        public func deleteIdentityProviderKey(keyId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/idps/credentials/keys/{keyId}".expanded(using: [
                    "keyId": keyId
                ]), method: "DELETE"))
        }

        /**
         Generate a Certificate Signing Request
         
         - parameter idpId: (path)  
         - parameter metadata: (body)  
         */
        public func generateCsrForIdentityProvider(idpId: String, metadata: CsrMetadata) async throws -> OktaResponse<Csr> {
            try await send(try requestWithBody(to: "/api/v1/idps/{idpId}/credentials/csrs".expanded(using: [
                    "idpId": idpId
                ]), method: "POST", body: metadata))
        }

        /**
         Generate a new Signing Credential Key
         
         - parameter idpId: (path)  
         - parameter validityYears: (query) expiry of the IdP Key Credential 
         */
        public func generateIdentityProviderSigningKey(idpId: String, validityYears: Int) async throws -> OktaResponse<JsonWebKey> {
            try await send(try request(to: "/api/v1/idps/{idpId}/credentials/keys/generate".expanded(using: [
                    "idpId": idpId
                ]), method: "POST", query: [
                    "validityYears": validityYears
                ]))
        }

        /**
         Retrieve a Certificate Signing Request
         
         - parameter idpId: (path)  
         - parameter csrId: (path)  
         */
        public func getCsrForIdentityProvider(idpId: String, csrId: String) async throws -> OktaResponse<Csr> {
            try await send(try request(to: "/api/v1/idps/{idpId}/credentials/csrs/{csrId}".expanded(using: [
                    "idpId": idpId, 
                    "csrId": csrId
                ]), method: "GET"))
        }

        /**
         Retrieve an Identity Provider
         
         - parameter idpId: (path)  
         */
        public func getIdentityProvider(idpId: String) async throws -> OktaResponse<IdentityProvider> {
            try await send(try request(to: "/api/v1/idps/{idpId}".expanded(using: [
                    "idpId": idpId
                ]), method: "GET"))
        }

        /**
         Retrieve a User
         
         - parameter idpId: (path)  
         - parameter userId: (path)  
         */
        public func getIdentityProviderApplicationUser(idpId: String, userId: String) async throws -> OktaResponse<IdentityProviderApplicationUser> {
            try await send(try request(to: "/api/v1/idps/{idpId}/users/{userId}".expanded(using: [
                    "idpId": idpId, 
                    "userId": userId
                ]), method: "GET"))
        }

        /**
         Retrieve an Credential Key
         
         - parameter keyId: (path)  
         */
        public func getIdentityProviderKey(keyId: String) async throws -> OktaResponse<JsonWebKey> {
            try await send(try request(to: "/api/v1/idps/credentials/keys/{keyId}".expanded(using: [
                    "keyId": keyId
                ]), method: "GET"))
        }

        /**
         Retrieve a Signing Credential Key
         
         - parameter idpId: (path)  
         - parameter keyId: (path)  
         */
        public func getIdentityProviderSigningKey(idpId: String, keyId: String) async throws -> OktaResponse<JsonWebKey> {
            try await send(try request(to: "/api/v1/idps/{idpId}/credentials/keys/{keyId}".expanded(using: [
                    "idpId": idpId, 
                    "keyId": keyId
                ]), method: "GET"))
        }

        /**
         Link a User to a Social IdP
         
         - parameter idpId: (path)  
         - parameter userId: (path)  
         - parameter userIdentityProviderLinkRequest: (body)  
         */
        public func linkUserToIdentityProvider(idpId: String, userId: String, userIdentityProviderLinkRequest: UserIdentityProviderLinkRequest) async throws -> OktaResponse<IdentityProviderApplicationUser> {
            try await send(try requestWithBody(to: "/api/v1/idps/{idpId}/users/{userId}".expanded(using: [
                    "idpId": idpId, 
                    "userId": userId
                ]), method: "POST", body: userIdentityProviderLinkRequest))
        }

        /**
         List all Certificate Signing Requests
         
         - parameter idpId: (path)  
         */
        public func listCsrsForIdentityProvider(idpId: String) async throws -> OktaResponse<[Csr]> {
            try await send(try request(to: "/api/v1/idps/{idpId}/credentials/csrs".expanded(using: [
                    "idpId": idpId
                ]), method: "GET"))
        }

        /**
         List all Users
         
         - parameter idpId: (path)  
         */
        public func listIdentityProviderApplicationUsers(idpId: String) async throws -> OktaResponse<[IdentityProviderApplicationUser]> {
            try await send(try request(to: "/api/v1/idps/{idpId}/users".expanded(using: [
                    "idpId": idpId
                ]), method: "GET"))
        }

        /**
         List all Credential Keys
         
         - parameter after: (query) Specifies the pagination cursor for the next page of keys (optional)
         - parameter limit: (query) Specifies the number of key results in a page (optional, default to 20)
         */
        public func listIdentityProviderKeys(after: String? = nil, limit: Int? = nil) async throws -> OktaResponse<[JsonWebKey]> {
            try await send(try request(to: "/api/v1/idps/credentials/keys", method: "GET", query: [
                    "after": after, 
                    "limit": limit
                ]))
        }

        /**
         List all Signing Credential Keys
         
         - parameter idpId: (path)  
         */
        public func listIdentityProviderSigningKeys(idpId: String) async throws -> OktaResponse<[JsonWebKey]> {
            try await send(try request(to: "/api/v1/idps/{idpId}/credentials/keys".expanded(using: [
                    "idpId": idpId
                ]), method: "GET"))
        }

        /**
         List all Identity Providers
         
         - parameter q: (query) Searches the name property of IdPs for matching value (optional)
         - parameter after: (query) Specifies the pagination cursor for the next page of IdPs (optional)
         - parameter limit: (query) Specifies the number of IdP results in a page (optional, default to 20)
         - parameter type: (query) Filters IdPs by type (optional)
         */
        public func listIdentityProviders(q: String? = nil, after: String? = nil, limit: Int? = nil, type: String? = nil) async throws -> OktaResponse<[IdentityProvider]> {
            try await send(try request(to: "/api/v1/idps", method: "GET", query: [
                    "q": q, 
                    "after": after, 
                    "limit": limit, 
                    "type": type
                ]))
        }

        /**
         List all Tokens from a OIDC Identity Provider
         
         - parameter idpId: (path)  
         - parameter userId: (path)  
         */
        public func listSocialAuthTokens(idpId: String, userId: String) async throws -> OktaResponse<[SocialAuthToken]> {
            try await send(try request(to: "/api/v1/idps/{idpId}/users/{userId}/credentials/tokens".expanded(using: [
                    "idpId": idpId, 
                    "userId": userId
                ]), method: "GET"))
        }

        /**
         Publish a Certificate Signing Request
         
         - parameter idpId: (path)  
         - parameter csrId: (path)  
         - parameter body: (body)  
         */
        public func publishCsrForIdentityProvider(idpId: String, csrId: String, body: URL) async throws -> OktaResponse<JsonWebKey> {
            try await send(try requestWithBody(to: "/api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish".expanded(using: [
                    "idpId": idpId, 
                    "csrId": csrId
                ]), method: "POST", body: body))
        }

        /**
         Revoke a Certificate Signing Request
         
         - parameter idpId: (path)  
         - parameter csrId: (path)  
         */
        @discardableResult
        public func revokeCsrForIdentityProvider(idpId: String, csrId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/idps/{idpId}/credentials/csrs/{csrId}".expanded(using: [
                    "idpId": idpId, 
                    "csrId": csrId
                ]), method: "DELETE"))
        }

        /**
         Unlink a User from IdP
         
         - parameter idpId: (path)  
         - parameter userId: (path)  
         */
        @discardableResult
        public func unlinkUserFromIdentityProvider(idpId: String, userId: String) async throws -> OktaResponse<Empty> {
            try await send(try request(to: "/api/v1/idps/{idpId}/users/{userId}".expanded(using: [
                    "idpId": idpId, 
                    "userId": userId
                ]), method: "DELETE"))
        }

        /**
         Replace an Identity Provider
         
         - parameter idpId: (path)  
         - parameter identityProvider: (body)  
         */
        public func updateIdentityProvider(idpId: String, identityProvider: IdentityProvider) async throws -> OktaResponse<IdentityProvider> {
            try await send(try requestWithBody(to: "/api/v1/idps/{idpId}".expanded(using: [
                    "idpId": idpId
                ]), method: "PUT", body: identityProvider))
        }

    }
}
