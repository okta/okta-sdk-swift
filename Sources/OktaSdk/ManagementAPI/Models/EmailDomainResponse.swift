//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct EmailDomainResponse: Codable, Hashable {

    public var dnsValidationRecords: [DNSRecord]?
    public var domain: String?
    public var id: String?
    public var validationStatus: EmailDomainStatus?
    public var displayName: String
    public var userName: String

    public init(dnsValidationRecords: [DNSRecord]? = nil, domain: String? = nil, id: String? = nil, validationStatus: EmailDomainStatus? = nil, displayName: String, userName: String) {
        self.dnsValidationRecords = dnsValidationRecords
        self.domain = domain
        self.id = id
        self.validationStatus = validationStatus
        self.displayName = displayName
        self.userName = userName
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dnsValidationRecords
        case domain
        case id
        case validationStatus
        case displayName
        case userName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dnsValidationRecords, forKey: .dnsValidationRecords)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(validationStatus, forKey: .validationStatus)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(userName, forKey: .userName)
    }



}

