//
// SamlApplicationSettingsSignOn.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SamlApplicationSettingsSignOn: Codable/*, Hashable*/ {

    public var allowMultipleAcsEndpoints: Bool?
    public var acsEndpoints: [AcsEndpoint]?
    public var assertionSigned: Bool?
    public var attributeStatements: [SamlAttributeStatement]?
    public var audience: String?
    public var audienceOverride: String?
    public var authnContextClassRef: String?
    public var defaultRelayState: String?
    public var destination: String?
    public var destinationOverride: String?
    public var digestAlgorithm: String?
    public var honorForceAuthn: Bool?
    public var idpIssuer: String?
    public var inlineHooks: [SignOnInlineHook]?
    public var recipient: String?
    public var recipientOverride: String?
    public var requestCompressed: Bool?
    public var responseSigned: Bool?
    public var signatureAlgorithm: String?
    public var slo: SingleLogout?
    public var spIssuer: String?
    public var ssoAcsUrl: String?
    public var ssoAcsUrlOverride: String?
    public var spCertificate: SpCertificate?
    public var subjectNameIdFormat: String?
    public var subjectNameIdTemplate: String?

    public init(allowMultipleAcsEndpoints: Bool? = nil, acsEndpoints: [AcsEndpoint]? = nil, assertionSigned: Bool? = nil, attributeStatements: [SamlAttributeStatement]? = nil, audience: String? = nil, audienceOverride: String? = nil, authnContextClassRef: String? = nil, defaultRelayState: String? = nil, destination: String? = nil, destinationOverride: String? = nil, digestAlgorithm: String? = nil, honorForceAuthn: Bool? = nil, idpIssuer: String? = nil, inlineHooks: [SignOnInlineHook]? = nil, recipient: String? = nil, recipientOverride: String? = nil, requestCompressed: Bool? = nil, responseSigned: Bool? = nil, signatureAlgorithm: String? = nil, slo: SingleLogout? = nil, spIssuer: String? = nil, ssoAcsUrl: String? = nil, ssoAcsUrlOverride: String? = nil, spCertificate: SpCertificate? = nil, subjectNameIdFormat: String? = nil, subjectNameIdTemplate: String? = nil) {
        self.allowMultipleAcsEndpoints = allowMultipleAcsEndpoints
        self.acsEndpoints = acsEndpoints
        self.assertionSigned = assertionSigned
        self.attributeStatements = attributeStatements
        self.audience = audience
        self.audienceOverride = audienceOverride
        self.authnContextClassRef = authnContextClassRef
        self.defaultRelayState = defaultRelayState
        self.destination = destination
        self.destinationOverride = destinationOverride
        self.digestAlgorithm = digestAlgorithm
        self.honorForceAuthn = honorForceAuthn
        self.idpIssuer = idpIssuer
        self.inlineHooks = inlineHooks
        self.recipient = recipient
        self.recipientOverride = recipientOverride
        self.requestCompressed = requestCompressed
        self.responseSigned = responseSigned
        self.signatureAlgorithm = signatureAlgorithm
        self.slo = slo
        self.spIssuer = spIssuer
        self.ssoAcsUrl = ssoAcsUrl
        self.ssoAcsUrlOverride = ssoAcsUrlOverride
        self.spCertificate = spCertificate
        self.subjectNameIdFormat = subjectNameIdFormat
        self.subjectNameIdTemplate = subjectNameIdTemplate
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case allowMultipleAcsEndpoints
        case acsEndpoints
        case assertionSigned
        case attributeStatements
        case audience
        case audienceOverride
        case authnContextClassRef
        case defaultRelayState
        case destination
        case destinationOverride
        case digestAlgorithm
        case honorForceAuthn
        case idpIssuer
        case inlineHooks
        case recipient
        case recipientOverride
        case requestCompressed
        case responseSigned
        case signatureAlgorithm
        case slo
        case spIssuer
        case ssoAcsUrl
        case ssoAcsUrlOverride
        case spCertificate
        case subjectNameIdFormat
        case subjectNameIdTemplate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(allowMultipleAcsEndpoints, forKey: .allowMultipleAcsEndpoints)
        try container.encodeIfPresent(acsEndpoints, forKey: .acsEndpoints)
        try container.encodeIfPresent(assertionSigned, forKey: .assertionSigned)
        try container.encodeIfPresent(attributeStatements, forKey: .attributeStatements)
        try container.encodeIfPresent(audience, forKey: .audience)
        try container.encodeIfPresent(audienceOverride, forKey: .audienceOverride)
        try container.encodeIfPresent(authnContextClassRef, forKey: .authnContextClassRef)
        try container.encodeIfPresent(defaultRelayState, forKey: .defaultRelayState)
        try container.encodeIfPresent(destination, forKey: .destination)
        try container.encodeIfPresent(destinationOverride, forKey: .destinationOverride)
        try container.encodeIfPresent(digestAlgorithm, forKey: .digestAlgorithm)
        try container.encodeIfPresent(honorForceAuthn, forKey: .honorForceAuthn)
        try container.encodeIfPresent(idpIssuer, forKey: .idpIssuer)
        try container.encodeIfPresent(inlineHooks, forKey: .inlineHooks)
        try container.encodeIfPresent(recipient, forKey: .recipient)
        try container.encodeIfPresent(recipientOverride, forKey: .recipientOverride)
        try container.encodeIfPresent(requestCompressed, forKey: .requestCompressed)
        try container.encodeIfPresent(responseSigned, forKey: .responseSigned)
        try container.encodeIfPresent(signatureAlgorithm, forKey: .signatureAlgorithm)
        try container.encodeIfPresent(slo, forKey: .slo)
        try container.encodeIfPresent(spIssuer, forKey: .spIssuer)
        try container.encodeIfPresent(ssoAcsUrl, forKey: .ssoAcsUrl)
        try container.encodeIfPresent(ssoAcsUrlOverride, forKey: .ssoAcsUrlOverride)
        try container.encodeIfPresent(spCertificate, forKey: .spCertificate)
        try container.encodeIfPresent(subjectNameIdFormat, forKey: .subjectNameIdFormat)
        try container.encodeIfPresent(subjectNameIdTemplate, forKey: .subjectNameIdTemplate)
    }



}

