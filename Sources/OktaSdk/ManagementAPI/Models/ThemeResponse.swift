//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ThemeResponse: Codable, Hashable {

    public var backgroundImage: String?
    public var emailTemplateTouchPointVariant: EmailTemplateTouchPointVariant?
    public var endUserDashboardTouchPointVariant: EndUserDashboardTouchPointVariant?
    public var errorPageTouchPointVariant: ErrorPageTouchPointVariant?
    public var favicon: String?
    public var id: String?
    public var logo: String?
    public var primaryColorContrastHex: String?
    public var primaryColorHex: String?
    public var secondaryColorContrastHex: String?
    public var secondaryColorHex: String?
    public var signInPageTouchPointVariant: SignInPageTouchPointVariant?
    public var links: [String: AnyCodable]?

    public init(backgroundImage: String? = nil, emailTemplateTouchPointVariant: EmailTemplateTouchPointVariant? = nil, endUserDashboardTouchPointVariant: EndUserDashboardTouchPointVariant? = nil, errorPageTouchPointVariant: ErrorPageTouchPointVariant? = nil, favicon: String? = nil, id: String? = nil, logo: String? = nil, primaryColorContrastHex: String? = nil, primaryColorHex: String? = nil, secondaryColorContrastHex: String? = nil, secondaryColorHex: String? = nil, signInPageTouchPointVariant: SignInPageTouchPointVariant? = nil, links: [String: AnyCodable]? = nil) {
        self.backgroundImage = backgroundImage
        self.emailTemplateTouchPointVariant = emailTemplateTouchPointVariant
        self.endUserDashboardTouchPointVariant = endUserDashboardTouchPointVariant
        self.errorPageTouchPointVariant = errorPageTouchPointVariant
        self.favicon = favicon
        self.id = id
        self.logo = logo
        self.primaryColorContrastHex = primaryColorContrastHex
        self.primaryColorHex = primaryColorHex
        self.secondaryColorContrastHex = secondaryColorContrastHex
        self.secondaryColorHex = secondaryColorHex
        self.signInPageTouchPointVariant = signInPageTouchPointVariant
        self.links = links
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case backgroundImage
        case emailTemplateTouchPointVariant
        case endUserDashboardTouchPointVariant
        case errorPageTouchPointVariant
        case favicon
        case id
        case logo
        case primaryColorContrastHex
        case primaryColorHex
        case secondaryColorContrastHex
        case secondaryColorHex
        case signInPageTouchPointVariant
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(backgroundImage, forKey: .backgroundImage)
        try container.encodeIfPresent(emailTemplateTouchPointVariant, forKey: .emailTemplateTouchPointVariant)
        try container.encodeIfPresent(endUserDashboardTouchPointVariant, forKey: .endUserDashboardTouchPointVariant)
        try container.encodeIfPresent(errorPageTouchPointVariant, forKey: .errorPageTouchPointVariant)
        try container.encodeIfPresent(favicon, forKey: .favicon)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(primaryColorContrastHex, forKey: .primaryColorContrastHex)
        try container.encodeIfPresent(primaryColorHex, forKey: .primaryColorHex)
        try container.encodeIfPresent(secondaryColorContrastHex, forKey: .secondaryColorContrastHex)
        try container.encodeIfPresent(secondaryColorHex, forKey: .secondaryColorHex)
        try container.encodeIfPresent(signInPageTouchPointVariant, forKey: .signInPageTouchPointVariant)
        try container.encodeIfPresent(links, forKey: .links)
    }



}

