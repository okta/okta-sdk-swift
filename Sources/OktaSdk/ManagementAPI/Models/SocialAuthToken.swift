//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SocialAuthToken: Codable, Hashable {

    public enum TokenType: String, Codable, CaseIterable {
        case access = "ACCESS"
        case refresh = "REFRESH"
    }
    public var expiresAt: Date?
    public var id: String?
    public var scopes: [String]?
    public var token: String?
    public var tokenAuthScheme: String?
    public var tokenType: TokenType?

    public init(expiresAt: Date? = nil, id: String? = nil, scopes: [String]? = nil, token: String? = nil, tokenAuthScheme: String? = nil, tokenType: TokenType? = nil) {
        self.expiresAt = expiresAt
        self.id = id
        self.scopes = scopes
        self.token = token
        self.tokenAuthScheme = tokenAuthScheme
        self.tokenType = tokenType
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expiresAt
        case id
        case scopes
        case token
        case tokenAuthScheme
        case tokenType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(tokenAuthScheme, forKey: .tokenAuthScheme)
        try container.encodeIfPresent(tokenType, forKey: .tokenType)
    }



}

