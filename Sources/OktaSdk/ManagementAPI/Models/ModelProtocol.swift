//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ModelProtocol: Codable, Hashable {

    public var algorithms: ProtocolAlgorithms?
    public var credentials: IdentityProviderCredentials?
    public var endpoints: ProtocolEndpoints?
    public var issuer: ProtocolEndpoint?
    public var relayState: ProtocolRelayState?
    public var scopes: [String]?
    public var settings: ProtocolSettings?
    public var type: ProtocolType?

    public init(algorithms: ProtocolAlgorithms? = nil, credentials: IdentityProviderCredentials? = nil, endpoints: ProtocolEndpoints? = nil, issuer: ProtocolEndpoint? = nil, relayState: ProtocolRelayState? = nil, scopes: [String]? = nil, settings: ProtocolSettings? = nil, type: ProtocolType? = nil) {
        self.algorithms = algorithms
        self.credentials = credentials
        self.endpoints = endpoints
        self.issuer = issuer
        self.relayState = relayState
        self.scopes = scopes
        self.settings = settings
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case algorithms
        case credentials
        case endpoints
        case issuer
        case relayState
        case scopes
        case settings
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(algorithms, forKey: .algorithms)
        try container.encodeIfPresent(credentials, forKey: .credentials)
        try container.encodeIfPresent(endpoints, forKey: .endpoints)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(relayState, forKey: .relayState)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(settings, forKey: .settings)
        try container.encodeIfPresent(type, forKey: .type)
    }



}

