//
// OAuth2RefreshToken.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct OAuth2RefreshToken: Codable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case active = "ACTIVE"
        case revoked = "REVOKED"
    }
    public var embedded: [String: AnyCodable]?
    public var links: [String: AnyCodable]?
    public var clientId: String?
    public var created: Date?
    public var createdBy: OAuth2Actor?
    public var expiresAt: Date?
    public var id: String?
    public var issuer: String?
    public var lastUpdated: Date?
    public var scopes: [String]?
    public var status: Status?
    public var userId: String?

    public init(embedded: [String: AnyCodable]? = nil, links: [String: AnyCodable]? = nil, clientId: String? = nil, created: Date? = nil, createdBy: OAuth2Actor? = nil, expiresAt: Date? = nil, id: String? = nil, issuer: String? = nil, lastUpdated: Date? = nil, scopes: [String]? = nil, status: Status? = nil, userId: String? = nil) {
        self.embedded = embedded
        self.links = links
        self.clientId = clientId
        self.created = created
        self.createdBy = createdBy
        self.expiresAt = expiresAt
        self.id = id
        self.issuer = issuer
        self.lastUpdated = lastUpdated
        self.scopes = scopes
        self.status = status
        self.userId = userId
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case embedded = "_embedded"
        case links = "_links"
        case clientId
        case created
        case createdBy
        case expiresAt
        case id
        case issuer
        case lastUpdated
        case scopes
        case status
        case userId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(embedded, forKey: .embedded)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(userId, forKey: .userId)
    }



}

