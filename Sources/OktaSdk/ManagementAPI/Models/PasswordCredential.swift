//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct PasswordCredential: Codable, Hashable {

    public var hash: PasswordCredentialHash?
    public var hook: PasswordCredentialHook?
    public var value: String?

    public init(hash: PasswordCredentialHash? = nil, hook: PasswordCredentialHook? = nil, value: String? = nil) {
        self.hash = hash
        self.hook = hook
        self.value = value
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hash
        case hook
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(hash, forKey: .hash)
        try container.encodeIfPresent(hook, forKey: .hook)
        try container.encodeIfPresent(value, forKey: .value)
    }



}

