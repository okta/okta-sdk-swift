//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** The schedule of auto-update configured by admin. */
public struct AutoUpdateSchedule: Codable, Hashable {

    public var cron: String?
    /** delay in days */
    public var delay: Int?
    /** duration in minutes */
    public var duration: Int?
    /** last time when the updated finished (success or failed, exclude cancelled), null if job haven&#39;t finished once yet. */
    public var lastUpdated: Date?
    public var timezone: String?

    public init(cron: String? = nil, delay: Int? = nil, duration: Int? = nil, lastUpdated: Date? = nil, timezone: String? = nil) {
        self.cron = cron
        self.delay = delay
        self.duration = duration
        self.lastUpdated = lastUpdated
        self.timezone = timezone
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cron
        case delay
        case duration
        case lastUpdated
        case timezone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cron, forKey: .cron)
        try container.encodeIfPresent(delay, forKey: .delay)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(timezone, forKey: .timezone)
    }



}

