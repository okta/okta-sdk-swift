//
// VerifyUserFactorResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct VerifyUserFactorResponse: Codable, Hashable {

    public enum FactorResult: String, Codable, CaseIterable {
        case success = "SUCCESS"
        case expired = "EXPIRED"
        case challenge = "CHALLENGE"
        case waiting = "WAITING"
        case failed = "FAILED"
        case rejected = "REJECTED"
        case timeout = "TIMEOUT"
        case timeWindowExceeded = "TIME_WINDOW_EXCEEDED"
        case passcodeReplayed = "PASSCODE_REPLAYED"
        case error = "ERROR"
    }
    public var embedded: [String: AnyCodable]?
    public var links: [String: AnyCodable]?
    public var expiresAt: Date?
    public var factorResult: FactorResult?
    public var factorResultMessage: String?

    public init(embedded: [String: AnyCodable]? = nil, links: [String: AnyCodable]? = nil, expiresAt: Date? = nil, factorResult: FactorResult? = nil, factorResultMessage: String? = nil) {
        self.embedded = embedded
        self.links = links
        self.expiresAt = expiresAt
        self.factorResult = factorResult
        self.factorResultMessage = factorResultMessage
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case embedded = "_embedded"
        case links = "_links"
        case expiresAt
        case factorResult
        case factorResultMessage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(embedded, forKey: .embedded)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(factorResult, forKey: .factorResult)
        try container.encodeIfPresent(factorResultMessage, forKey: .factorResultMessage)
    }



}
