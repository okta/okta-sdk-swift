//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct VerifyUserFactorResponse: Codable, Hashable {

    public var expiresAt: Date?
    public var factorResult: VerifyUserFactorResult?
    public var factorResultMessage: String?
    public var embedded: [String: AnyCodable]?
    public var links: [String: AnyCodable]?

    public init(expiresAt: Date? = nil, factorResult: VerifyUserFactorResult? = nil, factorResultMessage: String? = nil, embedded: [String: AnyCodable]? = nil, links: [String: AnyCodable]? = nil) {
        self.expiresAt = expiresAt
        self.factorResult = factorResult
        self.factorResultMessage = factorResultMessage
        self.embedded = embedded
        self.links = links
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expiresAt
        case factorResult
        case factorResultMessage
        case embedded = "_embedded"
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(factorResult, forKey: .factorResult)
        try container.encodeIfPresent(factorResultMessage, forKey: .factorResultMessage)
        try container.encodeIfPresent(embedded, forKey: .embedded)
        try container.encodeIfPresent(links, forKey: .links)
    }



}

