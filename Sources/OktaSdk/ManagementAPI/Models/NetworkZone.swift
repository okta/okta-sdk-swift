//
// NetworkZone.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct NetworkZone: Codable, Hashable {

    public var type: NetworkZoneType?
    public var id: String?
    public var name: String?
    public var system: Bool?
    public var usage: NetworkZoneUsage?
    public var status: NetworkZoneStatus?
    public var proxyType: String?
    public var locations: [NetworkZoneLocation]?
    public var gateways: [NetworkZoneAddress]?
    public var proxies: [NetworkZoneAddress]?
    public var asns: [String]?
    public var created: Date?
    public var lastUpdated: Date?
    public var links: [String: AnyCodable]?

    public init(type: NetworkZoneType? = nil, id: String? = nil, name: String? = nil, system: Bool? = nil, usage: NetworkZoneUsage? = nil, status: NetworkZoneStatus? = nil, proxyType: String? = nil, locations: [NetworkZoneLocation]? = nil, gateways: [NetworkZoneAddress]? = nil, proxies: [NetworkZoneAddress]? = nil, asns: [String]? = nil, created: Date? = nil, lastUpdated: Date? = nil, links: [String: AnyCodable]? = nil) {
        self.type = type
        self.id = id
        self.name = name
        self.system = system
        self.usage = usage
        self.status = status
        self.proxyType = proxyType
        self.locations = locations
        self.gateways = gateways
        self.proxies = proxies
        self.asns = asns
        self.created = created
        self.lastUpdated = lastUpdated
        self.links = links
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case id
        case name
        case system
        case usage
        case status
        case proxyType
        case locations
        case gateways
        case proxies
        case asns
        case created
        case lastUpdated
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(system, forKey: .system)
        try container.encodeIfPresent(usage, forKey: .usage)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(proxyType, forKey: .proxyType)
        try container.encodeIfPresent(locations, forKey: .locations)
        try container.encodeIfPresent(gateways, forKey: .gateways)
        try container.encodeIfPresent(proxies, forKey: .proxies)
        try container.encodeIfPresent(asns, forKey: .asns)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(links, forKey: .links)
    }



}

