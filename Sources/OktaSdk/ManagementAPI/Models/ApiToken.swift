//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** An API token for an Okta User. This token is NOT scoped any further and can be used for any API the user has permissions to call. */
public struct ApiToken: Codable, Hashable {

    public var clientName: String?
    public var created: Date?
    public var expiresAt: Date?
    public var id: String?
    public var lastUpdated: Date?
    public var name: String
    /** A time duration specified as an [ISO-8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). */
    public var tokenWindow: String?
    public var userId: String?
    public var link: ApiTokenLink?

    public init(clientName: String? = nil, created: Date? = nil, expiresAt: Date? = nil, id: String? = nil, lastUpdated: Date? = nil, name: String, tokenWindow: String? = nil, userId: String? = nil, link: ApiTokenLink? = nil) {
        self.clientName = clientName
        self.created = created
        self.expiresAt = expiresAt
        self.id = id
        self.lastUpdated = lastUpdated
        self.name = name
        self.tokenWindow = tokenWindow
        self.userId = userId
        self.link = link
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case clientName
        case created
        case expiresAt
        case id
        case lastUpdated
        case name
        case tokenWindow
        case userId
        case link = "_link"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(clientName, forKey: .clientName)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(tokenWindow, forKey: .tokenWindow)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(link, forKey: .link)
    }



}

