//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct PolicySubject: Codable, Hashable {

    public var filter: String?
    public var format: [String]?
    public var matchAttribute: String?
    public var matchType: PolicySubjectMatchType?
    public var userNameTemplate: PolicyUserNameTemplate?

    public init(filter: String? = nil, format: [String]? = nil, matchAttribute: String? = nil, matchType: PolicySubjectMatchType? = nil, userNameTemplate: PolicyUserNameTemplate? = nil) {
        self.filter = filter
        self.format = format
        self.matchAttribute = matchAttribute
        self.matchType = matchType
        self.userNameTemplate = userNameTemplate
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filter
        case format
        case matchAttribute
        case matchType
        case userNameTemplate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(filter, forKey: .filter)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(matchAttribute, forKey: .matchAttribute)
        try container.encodeIfPresent(matchType, forKey: .matchType)
        try container.encodeIfPresent(userNameTemplate, forKey: .userNameTemplate)
    }



}

