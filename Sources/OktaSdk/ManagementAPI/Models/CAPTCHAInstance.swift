//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/**  */
public struct CAPTCHAInstance: Codable, Hashable {

    public var id: String?
    public var name: String?
    public var secretKey: String?
    public var siteKey: String?
    public var type: CAPTCHAType?
    public var link: ApiTokenLink?

    public init(id: String? = nil, name: String? = nil, secretKey: String? = nil, siteKey: String? = nil, type: CAPTCHAType? = nil, link: ApiTokenLink? = nil) {
        self.id = id
        self.name = name
        self.secretKey = secretKey
        self.siteKey = siteKey
        self.type = type
        self.link = link
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case secretKey
        case siteKey
        case type
        case link = "_link"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(secretKey, forKey: .secretKey)
        try container.encodeIfPresent(siteKey, forKey: .siteKey)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(link, forKey: .link)
    }



}

