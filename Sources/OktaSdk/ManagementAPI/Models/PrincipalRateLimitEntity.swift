//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/**  */
public struct PrincipalRateLimitEntity: Codable, Hashable {

    public var createdBy: String?
    public var createdDate: Date?
    public var defaultConcurrencyPercentage: Int?
    public var defaultPercentage: Int?
    public var id: String?
    public var lastUpdate: Date?
    public var lastUpdatedBy: String?
    public var orgId: String?
    public var principalId: String
    public var principalType: PrincipalType

    public init(createdBy: String? = nil, createdDate: Date? = nil, defaultConcurrencyPercentage: Int? = nil, defaultPercentage: Int? = nil, id: String? = nil, lastUpdate: Date? = nil, lastUpdatedBy: String? = nil, orgId: String? = nil, principalId: String, principalType: PrincipalType) {
        self.createdBy = createdBy
        self.createdDate = createdDate
        self.defaultConcurrencyPercentage = defaultConcurrencyPercentage
        self.defaultPercentage = defaultPercentage
        self.id = id
        self.lastUpdate = lastUpdate
        self.lastUpdatedBy = lastUpdatedBy
        self.orgId = orgId
        self.principalId = principalId
        self.principalType = principalType
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdBy
        case createdDate
        case defaultConcurrencyPercentage
        case defaultPercentage
        case id
        case lastUpdate
        case lastUpdatedBy
        case orgId
        case principalId
        case principalType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(defaultConcurrencyPercentage, forKey: .defaultConcurrencyPercentage)
        try container.encodeIfPresent(defaultPercentage, forKey: .defaultPercentage)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
        try container.encodeIfPresent(lastUpdatedBy, forKey: .lastUpdatedBy)
        try container.encodeIfPresent(orgId, forKey: .orgId)
        try container.encode(principalId, forKey: .principalId)
        try container.encode(principalType, forKey: .principalType)
    }



}

