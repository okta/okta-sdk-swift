//
// OktaSignOnPolicyRuleSignonActions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct OktaSignOnPolicyRuleSignonActions: Codable/*, Hashable*/ {

    public enum Access: String, Codable, CaseIterable {
        case allow = "ALLOW"
        case deny = "DENY"
    }
    public enum FactorPromptMode: String, Codable, CaseIterable {
        case always = "ALWAYS"
        case device = "DEVICE"
        case session = "SESSION"
    }
    public var access: Access?
    public var factorLifetime: Int?
    public var factorPromptMode: FactorPromptMode?
    public var rememberDeviceByDefault: Bool? = false
    public var requireFactor: Bool? = false
    public var session: OktaSignOnPolicyRuleSignonSessionActions?

    public init(access: Access? = nil, factorLifetime: Int? = nil, factorPromptMode: FactorPromptMode? = nil, rememberDeviceByDefault: Bool? = false, requireFactor: Bool? = false, session: OktaSignOnPolicyRuleSignonSessionActions? = nil) {
        self.access = access
        self.factorLifetime = factorLifetime
        self.factorPromptMode = factorPromptMode
        self.rememberDeviceByDefault = rememberDeviceByDefault
        self.requireFactor = requireFactor
        self.session = session
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case access
        case factorLifetime
        case factorPromptMode
        case rememberDeviceByDefault
        case requireFactor
        case session
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(access, forKey: .access)
        try container.encodeIfPresent(factorLifetime, forKey: .factorLifetime)
        try container.encodeIfPresent(factorPromptMode, forKey: .factorPromptMode)
        try container.encodeIfPresent(rememberDeviceByDefault, forKey: .rememberDeviceByDefault)
        try container.encodeIfPresent(requireFactor, forKey: .requireFactor)
        try container.encodeIfPresent(session, forKey: .session)
    }



}

