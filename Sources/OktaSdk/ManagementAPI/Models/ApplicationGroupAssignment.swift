//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ApplicationGroupAssignment: Codable, Hashable {

    public var id: String?
    public var lastUpdated: Date?
    public var priority: Int?
    public var profile: [String: AnyCodable]?
    public var embedded: [String: AnyCodable]?
    public var links: [String: AnyCodable]?

    public init(id: String? = nil, lastUpdated: Date? = nil, priority: Int? = nil, profile: [String: AnyCodable]? = nil, embedded: [String: AnyCodable]? = nil, links: [String: AnyCodable]? = nil) {
        self.id = id
        self.lastUpdated = lastUpdated
        self.priority = priority
        self.profile = profile
        self.embedded = embedded
        self.links = links
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case lastUpdated
        case priority
        case profile
        case embedded = "_embedded"
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(profile, forKey: .profile)
        try container.encodeIfPresent(embedded, forKey: .embedded)
        try container.encodeIfPresent(links, forKey: .links)
    }



}

