//
// SwaThreeFieldApplicationSettingsApplication.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SwaThreeFieldApplicationSettingsApplication: Codable/*, Hashable*/ {

    public var buttonSelector: String?
    public var extraFieldSelector: String?
    public var extraFieldValue: String?
    public var loginUrlRegex: String?
    public var passwordSelector: String?
    public var targetURL: String?
    public var userNameSelector: String?

    public init(buttonSelector: String? = nil, extraFieldSelector: String? = nil, extraFieldValue: String? = nil, loginUrlRegex: String? = nil, passwordSelector: String? = nil, targetURL: String? = nil, userNameSelector: String? = nil) {
        self.buttonSelector = buttonSelector
        self.extraFieldSelector = extraFieldSelector
        self.extraFieldValue = extraFieldValue
        self.loginUrlRegex = loginUrlRegex
        self.passwordSelector = passwordSelector
        self.targetURL = targetURL
        self.userNameSelector = userNameSelector
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case buttonSelector
        case extraFieldSelector
        case extraFieldValue
        case loginUrlRegex
        case passwordSelector
        case targetURL
        case userNameSelector
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(buttonSelector, forKey: .buttonSelector)
        try container.encodeIfPresent(extraFieldSelector, forKey: .extraFieldSelector)
        try container.encodeIfPresent(extraFieldValue, forKey: .extraFieldValue)
        try container.encodeIfPresent(loginUrlRegex, forKey: .loginUrlRegex)
        try container.encodeIfPresent(passwordSelector, forKey: .passwordSelector)
        try container.encodeIfPresent(targetURL, forKey: .targetURL)
        try container.encodeIfPresent(userNameSelector, forKey: .userNameSelector)
    }



}

