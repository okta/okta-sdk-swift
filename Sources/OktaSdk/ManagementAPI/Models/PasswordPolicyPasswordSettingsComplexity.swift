//
// PasswordPolicyPasswordSettingsComplexity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct PasswordPolicyPasswordSettingsComplexity: Codable, Hashable {

    public var dictionary: PasswordDictionary?
    public var excludeAttributes: [String]?
    public var excludeUsername: Bool? = true
    public var minLength: Int?
    public var minLowerCase: Int?
    public var minNumber: Int?
    public var minSymbol: Int?
    public var minUpperCase: Int?

    public init(dictionary: PasswordDictionary? = nil, excludeAttributes: [String]? = nil, excludeUsername: Bool? = true, minLength: Int? = nil, minLowerCase: Int? = nil, minNumber: Int? = nil, minSymbol: Int? = nil, minUpperCase: Int? = nil) {
        self.dictionary = dictionary
        self.excludeAttributes = excludeAttributes
        self.excludeUsername = excludeUsername
        self.minLength = minLength
        self.minLowerCase = minLowerCase
        self.minNumber = minNumber
        self.minSymbol = minSymbol
        self.minUpperCase = minUpperCase
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dictionary
        case excludeAttributes
        case excludeUsername
        case minLength
        case minLowerCase
        case minNumber
        case minSymbol
        case minUpperCase
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dictionary, forKey: .dictionary)
        try container.encodeIfPresent(excludeAttributes, forKey: .excludeAttributes)
        try container.encodeIfPresent(excludeUsername, forKey: .excludeUsername)
        try container.encodeIfPresent(minLength, forKey: .minLength)
        try container.encodeIfPresent(minLowerCase, forKey: .minLowerCase)
        try container.encodeIfPresent(minNumber, forKey: .minNumber)
        try container.encodeIfPresent(minSymbol, forKey: .minSymbol)
        try container.encodeIfPresent(minUpperCase, forKey: .minUpperCase)
    }



}

