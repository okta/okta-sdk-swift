//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct DevicePolicyRuleCondition: Codable, Hashable {

    public enum TrustLevel: String, Codable, CaseIterable {
        case any = "ANY"
        case trusted = "TRUSTED"
    }
    public var migrated: Bool?
    public var platform: DevicePolicyRuleConditionPlatform?
    public var rooted: Bool?
    public var trustLevel: TrustLevel?

    public init(migrated: Bool? = nil, platform: DevicePolicyRuleConditionPlatform? = nil, rooted: Bool? = nil, trustLevel: TrustLevel? = nil) {
        self.migrated = migrated
        self.platform = platform
        self.rooted = rooted
        self.trustLevel = trustLevel
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case migrated
        case platform
        case rooted
        case trustLevel
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(migrated, forKey: .migrated)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(rooted, forKey: .rooted)
        try container.encodeIfPresent(trustLevel, forKey: .trustLevel)
    }



}

