//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct GroupSchema: Codable, Hashable {

    public var schema: String?
    public var links: [String: AnyCodable]?
    public var created: String?
    public var definitions: GroupSchemaDefinitions?
    public var description: String?
    public var id: String?
    public var lastUpdated: String?
    public var name: String?
    public var properties: UserSchemaProperties?
    public var title: String?
    public var type: String?

    public init(schema: String? = nil, links: [String: AnyCodable]? = nil, created: String? = nil, definitions: GroupSchemaDefinitions? = nil, description: String? = nil, id: String? = nil, lastUpdated: String? = nil, name: String? = nil, properties: UserSchemaProperties? = nil, title: String? = nil, type: String? = nil) {
        self.schema = schema
        self.links = links
        self.created = created
        self.definitions = definitions
        self.description = description
        self.id = id
        self.lastUpdated = lastUpdated
        self.name = name
        self.properties = properties
        self.title = title
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case schema = "$schema"
        case links = "_links"
        case created
        case definitions
        case description
        case id
        case lastUpdated
        case name
        case properties
        case title
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(schema, forKey: .schema)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(definitions, forKey: .definitions)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(type, forKey: .type)
    }



}

