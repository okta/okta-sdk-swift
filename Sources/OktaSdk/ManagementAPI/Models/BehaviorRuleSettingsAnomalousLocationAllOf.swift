//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct BehaviorRuleSettingsAnomalousLocationAllOf: Codable, Hashable {

    public var granularity: LocationGranularity
    /** Required when &#x60;granularity&#x60; is &#x60;LAT_LONG&#x60;. Radius from the provided coordinates in kilometers. */
    public var radiusKilometers: Int?

    public init(granularity: LocationGranularity, radiusKilometers: Int? = nil) {
        self.granularity = granularity
        self.radiusKilometers = radiusKilometers
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case granularity
        case radiusKilometers
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(granularity, forKey: .granularity)
        try container.encodeIfPresent(radiusKilometers, forKey: .radiusKilometers)
    }



}

