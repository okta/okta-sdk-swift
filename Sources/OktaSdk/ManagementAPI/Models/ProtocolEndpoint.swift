//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ProtocolEndpoint: Codable, Hashable {

    public enum Binding: String, Codable, CaseIterable {
        case post = "HTTP-POST"
        case redirect = "HTTP-REDIRECT"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case instance = "INSTANCE"
        case org = "ORG"
    }
    public var binding: Binding?
    public var destination: String?
    public var type: ModelType?
    public var url: String?

    public init(binding: Binding? = nil, destination: String? = nil, type: ModelType? = nil, url: String? = nil) {
        self.binding = binding
        self.destination = destination
        self.type = type
        self.url = url
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case binding
        case destination
        case type
        case url
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(binding, forKey: .binding)
        try container.encodeIfPresent(destination, forKey: .destination)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(url, forKey: .url)
    }



}

