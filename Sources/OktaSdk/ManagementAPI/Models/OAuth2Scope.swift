//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct OAuth2Scope: Codable, Hashable {

    public enum Consent: String, Codable, CaseIterable {
        case _required = "REQUIRED"
        case implicit = "IMPLICIT"
        case admin = "ADMIN"
    }
    public enum MetadataPublish: String, Codable, CaseIterable {
        case allClients = "ALL_CLIENTS"
        case noClients = "NO_CLIENTS"
    }
    public var consent: Consent?
    public var _default: Bool?
    public var description: String?
    public var displayName: String?
    public var id: String?
    public var metadataPublish: MetadataPublish?
    public var name: String?
    public var system: Bool?

    public init(consent: Consent? = nil, _default: Bool? = nil, description: String? = nil, displayName: String? = nil, id: String? = nil, metadataPublish: MetadataPublish? = nil, name: String? = nil, system: Bool? = nil) {
        self.consent = consent
        self._default = _default
        self.description = description
        self.displayName = displayName
        self.id = id
        self.metadataPublish = metadataPublish
        self.name = name
        self.system = system
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case consent
        case _default = "default"
        case description
        case displayName
        case id
        case metadataPublish
        case name
        case system
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(consent, forKey: .consent)
        try container.encodeIfPresent(_default, forKey: ._default)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(metadataPublish, forKey: .metadataPublish)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(system, forKey: .system)
    }



}

