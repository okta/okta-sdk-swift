//
// OAuth2Claim.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct OAuth2Claim: Codable/*, Hashable*/ {

    public enum ClaimType: String, Codable, CaseIterable {
        case identity = "IDENTITY"
        case resource = "RESOURCE"
    }
    public enum GroupFilterType: String, Codable, CaseIterable {
        case startsWith = "STARTS_WITH"
        case equals = "EQUALS"
        case contains = "CONTAINS"
        case regex = "REGEX"
    }
    public enum Status: String, Codable, CaseIterable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
    }
    public enum ValueType: String, Codable, CaseIterable {
        case expression = "EXPRESSION"
        case groups = "GROUPS"
        case system = "SYSTEM"
    }
    public var links: [String: AnyCodable]?
    public var alwaysIncludeInToken: Bool?
    public var claimType: ClaimType?
    public var conditions: OAuth2ClaimConditions?
    public var groupFilterType: GroupFilterType?
    public var id: String?
    public var name: String?
    public var status: Status?
    public var system: Bool?
    public var value: String?
    public var valueType: ValueType?

    public init(links: [String: AnyCodable]? = nil, alwaysIncludeInToken: Bool? = nil, claimType: ClaimType? = nil, conditions: OAuth2ClaimConditions? = nil, groupFilterType: GroupFilterType? = nil, id: String? = nil, name: String? = nil, status: Status? = nil, system: Bool? = nil, value: String? = nil, valueType: ValueType? = nil) {
        self.links = links
        self.alwaysIncludeInToken = alwaysIncludeInToken
        self.claimType = claimType
        self.conditions = conditions
        self.groupFilterType = groupFilterType
        self.id = id
        self.name = name
        self.status = status
        self.system = system
        self.value = value
        self.valueType = valueType
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case links = "_links"
        case alwaysIncludeInToken
        case claimType
        case conditions
        case groupFilterType = "group_filter_type"
        case id
        case name
        case status
        case system
        case value
        case valueType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(alwaysIncludeInToken, forKey: .alwaysIncludeInToken)
        try container.encodeIfPresent(claimType, forKey: .claimType)
        try container.encodeIfPresent(conditions, forKey: .conditions)
        try container.encodeIfPresent(groupFilterType, forKey: .groupFilterType)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(system, forKey: .system)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(valueType, forKey: .valueType)
    }



}

