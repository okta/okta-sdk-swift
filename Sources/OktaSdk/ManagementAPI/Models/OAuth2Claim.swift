//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct OAuth2Claim: Codable, Hashable {

    public var alwaysIncludeInToken: Bool?
    public var claimType: OAuth2ClaimType?
    public var conditions: OAuth2ClaimConditions?
    public var groupFilterType: OAuth2ClaimGroupFilterType?
    public var id: String?
    public var name: String?
    public var status: LifecycleStatus?
    public var system: Bool?
    public var value: String?
    public var valueType: OAuth2ClaimValueType?
    public var links: [String: AnyCodable]?

    public init(alwaysIncludeInToken: Bool? = nil, claimType: OAuth2ClaimType? = nil, conditions: OAuth2ClaimConditions? = nil, groupFilterType: OAuth2ClaimGroupFilterType? = nil, id: String? = nil, name: String? = nil, status: LifecycleStatus? = nil, system: Bool? = nil, value: String? = nil, valueType: OAuth2ClaimValueType? = nil, links: [String: AnyCodable]? = nil) {
        self.alwaysIncludeInToken = alwaysIncludeInToken
        self.claimType = claimType
        self.conditions = conditions
        self.groupFilterType = groupFilterType
        self.id = id
        self.name = name
        self.status = status
        self.system = system
        self.value = value
        self.valueType = valueType
        self.links = links
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case alwaysIncludeInToken
        case claimType
        case conditions
        case groupFilterType = "group_filter_type"
        case id
        case name
        case status
        case system
        case value
        case valueType
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(alwaysIncludeInToken, forKey: .alwaysIncludeInToken)
        try container.encodeIfPresent(claimType, forKey: .claimType)
        try container.encodeIfPresent(conditions, forKey: .conditions)
        try container.encodeIfPresent(groupFilterType, forKey: .groupFilterType)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(system, forKey: .system)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(valueType, forKey: .valueType)
        try container.encodeIfPresent(links, forKey: .links)
    }



}

