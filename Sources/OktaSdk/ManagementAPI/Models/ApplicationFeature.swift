//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ApplicationFeature: Codable, Hashable {

    public var capabilities: CapabilitiesObject?
    public var description: String?
    public var name: String?
    public var status: EnabledStatus?
    public var links: [String: AnyCodable]?

    public init(capabilities: CapabilitiesObject? = nil, description: String? = nil, name: String? = nil, status: EnabledStatus? = nil, links: [String: AnyCodable]? = nil) {
        self.capabilities = capabilities
        self.description = description
        self.name = name
        self.status = status
        self.links = links
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case capabilities
        case description
        case name
        case status
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(capabilities, forKey: .capabilities)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(links, forKey: .links)
    }



}

