//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct UserPolicyRuleCondition: Codable, Hashable {

    public var exclude: [String]?
    public var inactivity: InactivityPolicyRuleCondition?
    public var include: [String]?
    public var lifecycleExpiration: LifecycleExpirationPolicyRuleCondition?
    public var passwordExpiration: PasswordExpirationPolicyRuleCondition?
    public var userLifecycleAttribute: UserLifecycleAttributePolicyRuleCondition?

    public init(exclude: [String]? = nil, inactivity: InactivityPolicyRuleCondition? = nil, include: [String]? = nil, lifecycleExpiration: LifecycleExpirationPolicyRuleCondition? = nil, passwordExpiration: PasswordExpirationPolicyRuleCondition? = nil, userLifecycleAttribute: UserLifecycleAttributePolicyRuleCondition? = nil) {
        self.exclude = exclude
        self.inactivity = inactivity
        self.include = include
        self.lifecycleExpiration = lifecycleExpiration
        self.passwordExpiration = passwordExpiration
        self.userLifecycleAttribute = userLifecycleAttribute
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case exclude
        case inactivity
        case include
        case lifecycleExpiration
        case passwordExpiration
        case userLifecycleAttribute
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(exclude, forKey: .exclude)
        try container.encodeIfPresent(inactivity, forKey: .inactivity)
        try container.encodeIfPresent(include, forKey: .include)
        try container.encodeIfPresent(lifecycleExpiration, forKey: .lifecycleExpiration)
        try container.encodeIfPresent(passwordExpiration, forKey: .passwordExpiration)
        try container.encodeIfPresent(userLifecycleAttribute, forKey: .userLifecycleAttribute)
    }



}

