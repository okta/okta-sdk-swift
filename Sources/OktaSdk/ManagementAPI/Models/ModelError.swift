//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ModelError: Codable, Hashable {

    public var errorCauses: [ErrorErrorCausesInner]?
    /** An Okta code for this type of error */
    public var errorCode: String?
    /** A unique identifier for this error. This can be used by Okta Support to help with troubleshooting. */
    public var errorId: String?
    /** An Okta code for this type of error */
    public var errorLink: String?
    /** A short description of what caused this error. Sometimes this contains dynamically-generated information about your specific error. */
    public var errorSummary: String?

    public init(errorCauses: [ErrorErrorCausesInner]? = nil, errorCode: String? = nil, errorId: String? = nil, errorLink: String? = nil, errorSummary: String? = nil) {
        self.errorCauses = errorCauses
        self.errorCode = errorCode
        self.errorId = errorId
        self.errorLink = errorLink
        self.errorSummary = errorSummary
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case errorCauses
        case errorCode
        case errorId
        case errorLink
        case errorSummary
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(errorCauses, forKey: .errorCauses)
        try container.encodeIfPresent(errorCode, forKey: .errorCode)
        try container.encodeIfPresent(errorId, forKey: .errorId)
        try container.encodeIfPresent(errorLink, forKey: .errorLink)
        try container.encodeIfPresent(errorSummary, forKey: .errorSummary)
    }



}

