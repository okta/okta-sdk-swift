//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct PlatformConditionEvaluatorPlatformOperatingSystem: Codable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case android = "ANDROID"
        case ios = "IOS"
        case windows = "WINDOWS"
        case osx = "OSX"
        case other = "OTHER"
        case any = "ANY"
    }
    public var expression: String?
    public var type: ModelType?
    public var version: PlatformConditionEvaluatorPlatformOperatingSystemVersion?

    public init(expression: String? = nil, type: ModelType? = nil, version: PlatformConditionEvaluatorPlatformOperatingSystemVersion? = nil) {
        self.expression = expression
        self.type = type
        self.version = version
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expression
        case type
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(expression, forKey: .expression)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(version, forKey: .version)
    }



}

