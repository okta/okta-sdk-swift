//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct LogClient: Codable, Hashable {

    public var device: String?
    public var geographicalContext: LogGeographicalContext?
    public var id: String?
    public var ipAddress: String?
    public var userAgent: LogUserAgent?
    public var zone: String?

    public init(device: String? = nil, geographicalContext: LogGeographicalContext? = nil, id: String? = nil, ipAddress: String? = nil, userAgent: LogUserAgent? = nil, zone: String? = nil) {
        self.device = device
        self.geographicalContext = geographicalContext
        self.id = id
        self.ipAddress = ipAddress
        self.userAgent = userAgent
        self.zone = zone
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case device
        case geographicalContext
        case id
        case ipAddress
        case userAgent
        case zone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(device, forKey: .device)
        try container.encodeIfPresent(geographicalContext, forKey: .geographicalContext)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
        try container.encodeIfPresent(zone, forKey: .zone)
    }



}

