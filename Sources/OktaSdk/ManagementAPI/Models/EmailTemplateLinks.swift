//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Links to resources related to this email template. */
public struct EmailTemplateLinks: Codable, Hashable {

    public var _self: HrefObject?
    public var settings: HrefObject?
    public var defaultContent: HrefObject?
    public var customizations: HrefObject?
    public var test: HrefObject?

    public init(_self: HrefObject? = nil, settings: HrefObject? = nil, defaultContent: HrefObject? = nil, customizations: HrefObject? = nil, test: HrefObject? = nil) {
        self._self = _self
        self.settings = settings
        self.defaultContent = defaultContent
        self.customizations = customizations
        self.test = test
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case settings
        case defaultContent
        case customizations
        case test
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(settings, forKey: .settings)
        try container.encodeIfPresent(defaultContent, forKey: .defaultContent)
        try container.encodeIfPresent(customizations, forKey: .customizations)
        try container.encodeIfPresent(test, forKey: .test)
    }



}

