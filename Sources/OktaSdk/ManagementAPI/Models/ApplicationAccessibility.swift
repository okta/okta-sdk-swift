//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ApplicationAccessibility: Codable, Hashable {

    public var errorRedirectUrl: String?
    public var loginRedirectUrl: String?
    public var selfService: Bool?

    public init(errorRedirectUrl: String? = nil, loginRedirectUrl: String? = nil, selfService: Bool? = nil) {
        self.errorRedirectUrl = errorRedirectUrl
        self.loginRedirectUrl = loginRedirectUrl
        self.selfService = selfService
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case errorRedirectUrl
        case loginRedirectUrl
        case selfService
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(errorRedirectUrl, forKey: .errorRedirectUrl)
        try container.encodeIfPresent(loginRedirectUrl, forKey: .loginRedirectUrl)
        try container.encodeIfPresent(selfService, forKey: .selfService)
    }



}

