//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct AuthenticatorSettings: Codable, Hashable {

    public var allowedFor: AllowedForEnum?
    public var appInstanceId: String?
    public var channelBinding: ChannelBinding?
    public var compliance: Compliance?
    public var tokenLifetimeInMinutes: Int?
    public var userVerification: UserVerificationEnum?

    public init(allowedFor: AllowedForEnum? = nil, appInstanceId: String? = nil, channelBinding: ChannelBinding? = nil, compliance: Compliance? = nil, tokenLifetimeInMinutes: Int? = nil, userVerification: UserVerificationEnum? = nil) {
        self.allowedFor = allowedFor
        self.appInstanceId = appInstanceId
        self.channelBinding = channelBinding
        self.compliance = compliance
        self.tokenLifetimeInMinutes = tokenLifetimeInMinutes
        self.userVerification = userVerification
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case allowedFor
        case appInstanceId
        case channelBinding
        case compliance
        case tokenLifetimeInMinutes
        case userVerification
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(allowedFor, forKey: .allowedFor)
        try container.encodeIfPresent(appInstanceId, forKey: .appInstanceId)
        try container.encodeIfPresent(channelBinding, forKey: .channelBinding)
        try container.encodeIfPresent(compliance, forKey: .compliance)
        try container.encodeIfPresent(tokenLifetimeInMinutes, forKey: .tokenLifetimeInMinutes)
        try container.encodeIfPresent(userVerification, forKey: .userVerification)
    }



}

