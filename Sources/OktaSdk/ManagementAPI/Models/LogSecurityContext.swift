//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct LogSecurityContext: Codable, Hashable {

    public var asNumber: Int?
    public var asOrg: String?
    public var domain: String?
    public var isProxy: Bool?
    public var isp: String?

    public init(asNumber: Int? = nil, asOrg: String? = nil, domain: String? = nil, isProxy: Bool? = nil, isp: String? = nil) {
        self.asNumber = asNumber
        self.asOrg = asOrg
        self.domain = domain
        self.isProxy = isProxy
        self.isp = isp
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case asNumber
        case asOrg
        case domain
        case isProxy
        case isp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(asNumber, forKey: .asNumber)
        try container.encodeIfPresent(asOrg, forKey: .asOrg)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(isProxy, forKey: .isProxy)
        try container.encodeIfPresent(isp, forKey: .isp)
    }



}

