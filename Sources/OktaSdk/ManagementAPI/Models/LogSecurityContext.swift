//
// LogSecurityContext.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct LogSecurityContext: Codable/*, Hashable*/ {

    public var asNumber: Int?
    public var asOrg: String?
    public var domain: String?
    public var isProxy: Bool?
    public var isp: String?

    public init(asNumber: Int? = nil, asOrg: String? = nil, domain: String? = nil, isProxy: Bool? = nil, isp: String? = nil) {
        self.asNumber = asNumber
        self.asOrg = asOrg
        self.domain = domain
        self.isProxy = isProxy
        self.isp = isp
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case asNumber
        case asOrg
        case domain
        case isProxy
        case isp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(asNumber, forKey: .asNumber)
        try container.encodeIfPresent(asOrg, forKey: .asOrg)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(isProxy, forKey: .isProxy)
        try container.encodeIfPresent(isp, forKey: .isp)
    }



}

