//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct OAuth2Client: Codable, Hashable {

    public var links: [String: AnyCodable]?
    public var clientId: String?
    public var clientName: String?
    public var clientUri: String?
    public var logoUri: String?

    public init(links: [String: AnyCodable]? = nil, clientId: String? = nil, clientName: String? = nil, clientUri: String? = nil, logoUri: String? = nil) {
        self.links = links
        self.clientId = clientId
        self.clientName = clientName
        self.clientUri = clientUri
        self.logoUri = logoUri
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case links = "_links"
        case clientId = "client_id"
        case clientName = "client_name"
        case clientUri = "client_uri"
        case logoUri = "logo_uri"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientName, forKey: .clientName)
        try container.encodeIfPresent(clientUri, forKey: .clientUri)
        try container.encodeIfPresent(logoUri, forKey: .logoUri)
    }



}

