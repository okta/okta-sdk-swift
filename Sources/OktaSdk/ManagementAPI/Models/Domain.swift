//
// Domain.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct Domain: Codable, Hashable {

    public var certificateSourceType: DomainCertificateSourceType?
    public var dnsRecords: [DNSRecord]?
    public var domain: String?
    public var id: String?
    public var publicCertificate: DomainCertificateMetadata?
    public var validationStatus: DomainValidationStatus?

    public init(certificateSourceType: DomainCertificateSourceType? = nil, dnsRecords: [DNSRecord]? = nil, domain: String? = nil, id: String? = nil, publicCertificate: DomainCertificateMetadata? = nil, validationStatus: DomainValidationStatus? = nil) {
        self.certificateSourceType = certificateSourceType
        self.dnsRecords = dnsRecords
        self.domain = domain
        self.id = id
        self.publicCertificate = publicCertificate
        self.validationStatus = validationStatus
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case certificateSourceType
        case dnsRecords
        case domain
        case id
        case publicCertificate
        case validationStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(certificateSourceType, forKey: .certificateSourceType)
        try container.encodeIfPresent(dnsRecords, forKey: .dnsRecords)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(publicCertificate, forKey: .publicCertificate)
        try container.encodeIfPresent(validationStatus, forKey: .validationStatus)
    }



}

