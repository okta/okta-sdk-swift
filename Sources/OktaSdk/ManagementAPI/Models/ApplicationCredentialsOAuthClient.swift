//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ApplicationCredentialsOAuthClient: Codable, Hashable {

    public var autoKeyRotation: Bool?
    public var clientId: String?
    public var clientSecret: String?
    public var tokenEndpointAuthMethod: OAuthEndpointAuthenticationMethod?

    public init(autoKeyRotation: Bool? = nil, clientId: String? = nil, clientSecret: String? = nil, tokenEndpointAuthMethod: OAuthEndpointAuthenticationMethod? = nil) {
        self.autoKeyRotation = autoKeyRotation
        self.clientId = clientId
        self.clientSecret = clientSecret
        self.tokenEndpointAuthMethod = tokenEndpointAuthMethod
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case autoKeyRotation
        case clientId = "client_id"
        case clientSecret = "client_secret"
        case tokenEndpointAuthMethod = "token_endpoint_auth_method"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(autoKeyRotation, forKey: .autoKeyRotation)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encodeIfPresent(tokenEndpointAuthMethod, forKey: .tokenEndpointAuthMethod)
    }



}

