//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct IdentityProviderCredentialsTrust: Codable, Hashable {

    public enum Revocation: String, Codable, CaseIterable {
        case crl = "CRL"
        case deltaCrl = "DELTA_CRL"
        case ocsp = "OCSP"
    }
    public var audience: String?
    public var issuer: String?
    public var kid: String?
    public var revocation: Revocation?
    public var revocationCacheLifetime: Int?

    public init(audience: String? = nil, issuer: String? = nil, kid: String? = nil, revocation: Revocation? = nil, revocationCacheLifetime: Int? = nil) {
        self.audience = audience
        self.issuer = issuer
        self.kid = kid
        self.revocation = revocation
        self.revocationCacheLifetime = revocationCacheLifetime
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case audience
        case issuer
        case kid
        case revocation
        case revocationCacheLifetime
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(audience, forKey: .audience)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(kid, forKey: .kid)
        try container.encodeIfPresent(revocation, forKey: .revocation)
        try container.encodeIfPresent(revocationCacheLifetime, forKey: .revocationCacheLifetime)
    }



}

