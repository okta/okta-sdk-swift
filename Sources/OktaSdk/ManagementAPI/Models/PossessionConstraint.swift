//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct PossessionConstraint: Codable, Hashable {

    public var methods: [String]?
    public var reauthenticateIn: String?
    public var types: [String]?
    public var deviceBound: String?
    public var hardwareProtection: String?
    public var phishingResistant: String?
    public var userPresence: String?

    public init(methods: [String]? = nil, reauthenticateIn: String? = nil, types: [String]? = nil, deviceBound: String? = nil, hardwareProtection: String? = nil, phishingResistant: String? = nil, userPresence: String? = nil) {
        self.methods = methods
        self.reauthenticateIn = reauthenticateIn
        self.types = types
        self.deviceBound = deviceBound
        self.hardwareProtection = hardwareProtection
        self.phishingResistant = phishingResistant
        self.userPresence = userPresence
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case methods
        case reauthenticateIn
        case types
        case deviceBound
        case hardwareProtection
        case phishingResistant
        case userPresence
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(methods, forKey: .methods)
        try container.encodeIfPresent(reauthenticateIn, forKey: .reauthenticateIn)
        try container.encodeIfPresent(types, forKey: .types)
        try container.encodeIfPresent(deviceBound, forKey: .deviceBound)
        try container.encodeIfPresent(hardwareProtection, forKey: .hardwareProtection)
        try container.encodeIfPresent(phishingResistant, forKey: .phishingResistant)
        try container.encodeIfPresent(userPresence, forKey: .userPresence)
    }



}

