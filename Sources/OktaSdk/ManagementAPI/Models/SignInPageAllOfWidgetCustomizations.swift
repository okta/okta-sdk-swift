//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SignInPageAllOfWidgetCustomizations: Codable, Hashable {

    public var signInLabel: String?
    public var usernameLabel: String?
    public var usernameInfoTip: String?
    public var passwordLabel: String?
    public var passwordInfoTip: String?
    public var showPasswordVisibilityToggle: Bool?
    public var showUserIdentifier: Bool?
    public var forgotPasswordLabel: String?
    public var forgotPasswordUrl: String?
    public var unlockAccountLabel: String?
    public var unlockAccountUrl: String?
    public var helpLabel: String?
    public var helpUrl: String?
    public var customLink1Label: String?
    public var customLink1Url: String?
    public var customLink2Label: String?
    public var customLink2Url: String?
    public var authenticatorPageCustomLinkLabel: String?
    public var authenticatorPageCustomLinkUrl: String?
    public var classicRecoveryFlowEmailOrUsernameLabel: String?

    public init(signInLabel: String? = nil, usernameLabel: String? = nil, usernameInfoTip: String? = nil, passwordLabel: String? = nil, passwordInfoTip: String? = nil, showPasswordVisibilityToggle: Bool? = nil, showUserIdentifier: Bool? = nil, forgotPasswordLabel: String? = nil, forgotPasswordUrl: String? = nil, unlockAccountLabel: String? = nil, unlockAccountUrl: String? = nil, helpLabel: String? = nil, helpUrl: String? = nil, customLink1Label: String? = nil, customLink1Url: String? = nil, customLink2Label: String? = nil, customLink2Url: String? = nil, authenticatorPageCustomLinkLabel: String? = nil, authenticatorPageCustomLinkUrl: String? = nil, classicRecoveryFlowEmailOrUsernameLabel: String? = nil) {
        self.signInLabel = signInLabel
        self.usernameLabel = usernameLabel
        self.usernameInfoTip = usernameInfoTip
        self.passwordLabel = passwordLabel
        self.passwordInfoTip = passwordInfoTip
        self.showPasswordVisibilityToggle = showPasswordVisibilityToggle
        self.showUserIdentifier = showUserIdentifier
        self.forgotPasswordLabel = forgotPasswordLabel
        self.forgotPasswordUrl = forgotPasswordUrl
        self.unlockAccountLabel = unlockAccountLabel
        self.unlockAccountUrl = unlockAccountUrl
        self.helpLabel = helpLabel
        self.helpUrl = helpUrl
        self.customLink1Label = customLink1Label
        self.customLink1Url = customLink1Url
        self.customLink2Label = customLink2Label
        self.customLink2Url = customLink2Url
        self.authenticatorPageCustomLinkLabel = authenticatorPageCustomLinkLabel
        self.authenticatorPageCustomLinkUrl = authenticatorPageCustomLinkUrl
        self.classicRecoveryFlowEmailOrUsernameLabel = classicRecoveryFlowEmailOrUsernameLabel
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case signInLabel
        case usernameLabel
        case usernameInfoTip
        case passwordLabel
        case passwordInfoTip
        case showPasswordVisibilityToggle
        case showUserIdentifier
        case forgotPasswordLabel
        case forgotPasswordUrl
        case unlockAccountLabel
        case unlockAccountUrl
        case helpLabel
        case helpUrl
        case customLink1Label
        case customLink1Url
        case customLink2Label
        case customLink2Url
        case authenticatorPageCustomLinkLabel
        case authenticatorPageCustomLinkUrl
        case classicRecoveryFlowEmailOrUsernameLabel
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(signInLabel, forKey: .signInLabel)
        try container.encodeIfPresent(usernameLabel, forKey: .usernameLabel)
        try container.encodeIfPresent(usernameInfoTip, forKey: .usernameInfoTip)
        try container.encodeIfPresent(passwordLabel, forKey: .passwordLabel)
        try container.encodeIfPresent(passwordInfoTip, forKey: .passwordInfoTip)
        try container.encodeIfPresent(showPasswordVisibilityToggle, forKey: .showPasswordVisibilityToggle)
        try container.encodeIfPresent(showUserIdentifier, forKey: .showUserIdentifier)
        try container.encodeIfPresent(forgotPasswordLabel, forKey: .forgotPasswordLabel)
        try container.encodeIfPresent(forgotPasswordUrl, forKey: .forgotPasswordUrl)
        try container.encodeIfPresent(unlockAccountLabel, forKey: .unlockAccountLabel)
        try container.encodeIfPresent(unlockAccountUrl, forKey: .unlockAccountUrl)
        try container.encodeIfPresent(helpLabel, forKey: .helpLabel)
        try container.encodeIfPresent(helpUrl, forKey: .helpUrl)
        try container.encodeIfPresent(customLink1Label, forKey: .customLink1Label)
        try container.encodeIfPresent(customLink1Url, forKey: .customLink1Url)
        try container.encodeIfPresent(customLink2Label, forKey: .customLink2Label)
        try container.encodeIfPresent(customLink2Url, forKey: .customLink2Url)
        try container.encodeIfPresent(authenticatorPageCustomLinkLabel, forKey: .authenticatorPageCustomLinkLabel)
        try container.encodeIfPresent(authenticatorPageCustomLinkUrl, forKey: .authenticatorPageCustomLinkUrl)
        try container.encodeIfPresent(classicRecoveryFlowEmailOrUsernameLabel, forKey: .classicRecoveryFlowEmailOrUsernameLabel)
    }



}

