//
// LogEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct LogEvent: Codable, Hashable {

    public var actor: LogActor?
    public var authenticationContext: LogAuthenticationContext?
    public var client: LogClient?
    public var debugContext: LogDebugContext?
    public var displayMessage: String?
    public var eventType: String?
    public var legacyEventType: String?
    public var outcome: LogOutcome?
    public var published: Date?
    public var request: LogRequest?
    public var securityContext: LogSecurityContext?
    public var severity: LogSeverity?
    public var target: [LogTarget]?
    public var transaction: LogTransaction?
    public var uuid: String?
    public var version: String?

    public init(actor: LogActor? = nil, authenticationContext: LogAuthenticationContext? = nil, client: LogClient? = nil, debugContext: LogDebugContext? = nil, displayMessage: String? = nil, eventType: String? = nil, legacyEventType: String? = nil, outcome: LogOutcome? = nil, published: Date? = nil, request: LogRequest? = nil, securityContext: LogSecurityContext? = nil, severity: LogSeverity? = nil, target: [LogTarget]? = nil, transaction: LogTransaction? = nil, uuid: String? = nil, version: String? = nil) {
        self.actor = actor
        self.authenticationContext = authenticationContext
        self.client = client
        self.debugContext = debugContext
        self.displayMessage = displayMessage
        self.eventType = eventType
        self.legacyEventType = legacyEventType
        self.outcome = outcome
        self.published = published
        self.request = request
        self.securityContext = securityContext
        self.severity = severity
        self.target = target
        self.transaction = transaction
        self.uuid = uuid
        self.version = version
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actor
        case authenticationContext
        case client
        case debugContext
        case displayMessage
        case eventType
        case legacyEventType
        case outcome
        case published
        case request
        case securityContext
        case severity
        case target
        case transaction
        case uuid
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(actor, forKey: .actor)
        try container.encodeIfPresent(authenticationContext, forKey: .authenticationContext)
        try container.encodeIfPresent(client, forKey: .client)
        try container.encodeIfPresent(debugContext, forKey: .debugContext)
        try container.encodeIfPresent(displayMessage, forKey: .displayMessage)
        try container.encodeIfPresent(eventType, forKey: .eventType)
        try container.encodeIfPresent(legacyEventType, forKey: .legacyEventType)
        try container.encodeIfPresent(outcome, forKey: .outcome)
        try container.encodeIfPresent(published, forKey: .published)
        try container.encodeIfPresent(request, forKey: .request)
        try container.encodeIfPresent(securityContext, forKey: .securityContext)
        try container.encodeIfPresent(severity, forKey: .severity)
        try container.encodeIfPresent(target, forKey: .target)
        try container.encodeIfPresent(transaction, forKey: .transaction)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(version, forKey: .version)
    }



}

