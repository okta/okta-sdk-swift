//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct EventHook: Codable, Hashable {

    public var channel: EventHookChannel?
    public var created: Date?
    public var createdBy: String?
    public var events: EventSubscriptions?
    public var id: String?
    public var lastUpdated: Date?
    public var name: String?
    public var status: LifecycleStatus?
    public var verificationStatus: EventHookVerificationStatus?
    public var links: [String: AnyCodable]?

    public init(channel: EventHookChannel? = nil, created: Date? = nil, createdBy: String? = nil, events: EventSubscriptions? = nil, id: String? = nil, lastUpdated: Date? = nil, name: String? = nil, status: LifecycleStatus? = nil, verificationStatus: EventHookVerificationStatus? = nil, links: [String: AnyCodable]? = nil) {
        self.channel = channel
        self.created = created
        self.createdBy = createdBy
        self.events = events
        self.id = id
        self.lastUpdated = lastUpdated
        self.name = name
        self.status = status
        self.verificationStatus = verificationStatus
        self.links = links
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channel
        case created
        case createdBy
        case events
        case id
        case lastUpdated
        case name
        case status
        case verificationStatus
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(channel, forKey: .channel)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(events, forKey: .events)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(verificationStatus, forKey: .verificationStatus)
        try container.encodeIfPresent(links, forKey: .links)
    }



}

