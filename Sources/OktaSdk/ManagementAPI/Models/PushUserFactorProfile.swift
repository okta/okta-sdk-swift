//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct PushUserFactorProfile: Codable, Hashable {

    public var credentialId: String?
    public var deviceToken: String?
    public var deviceType: String?
    public var name: String?
    public var platform: String?
    public var version: String?

    public init(credentialId: String? = nil, deviceToken: String? = nil, deviceType: String? = nil, name: String? = nil, platform: String? = nil, version: String? = nil) {
        self.credentialId = credentialId
        self.deviceToken = deviceToken
        self.deviceType = deviceType
        self.name = name
        self.platform = platform
        self.version = version
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case credentialId
        case deviceToken
        case deviceType
        case name
        case platform
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(credentialId, forKey: .credentialId)
        try container.encodeIfPresent(deviceToken, forKey: .deviceToken)
        try container.encodeIfPresent(deviceType, forKey: .deviceType)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(version, forKey: .version)
    }



}

