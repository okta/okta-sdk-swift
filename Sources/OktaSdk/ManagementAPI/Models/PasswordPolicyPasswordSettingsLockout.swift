//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct PasswordPolicyPasswordSettingsLockout: Codable, Hashable {

    public var autoUnlockMinutes: Int?
    public var maxAttempts: Int?
    public var showLockoutFailures: Bool?
    public var userLockoutNotificationChannels: [String]?

    public init(autoUnlockMinutes: Int? = nil, maxAttempts: Int? = nil, showLockoutFailures: Bool? = nil, userLockoutNotificationChannels: [String]? = nil) {
        self.autoUnlockMinutes = autoUnlockMinutes
        self.maxAttempts = maxAttempts
        self.showLockoutFailures = showLockoutFailures
        self.userLockoutNotificationChannels = userLockoutNotificationChannels
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case autoUnlockMinutes
        case maxAttempts
        case showLockoutFailures
        case userLockoutNotificationChannels
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(autoUnlockMinutes, forKey: .autoUnlockMinutes)
        try container.encodeIfPresent(maxAttempts, forKey: .maxAttempts)
        try container.encodeIfPresent(showLockoutFailures, forKey: .showLockoutFailures)
        try container.encodeIfPresent(userLockoutNotificationChannels, forKey: .userLockoutNotificationChannels)
    }



}

