//
// Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
// The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
//
// You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and limitations under the License.
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ProfileEnrollmentPolicyRuleAction: Codable, Hashable {

    public var access: String?
    public var activationRequirements: ProfileEnrollmentPolicyRuleActivationRequirement?
    public var preRegistrationInlineHooks: [PreRegistrationInlineHook]?
    public var profileAttributes: [ProfileEnrollmentPolicyRuleProfileAttribute]?
    public var targetGroupIds: [String]?
    public var unknownUserAction: String?

    public init(access: String? = nil, activationRequirements: ProfileEnrollmentPolicyRuleActivationRequirement? = nil, preRegistrationInlineHooks: [PreRegistrationInlineHook]? = nil, profileAttributes: [ProfileEnrollmentPolicyRuleProfileAttribute]? = nil, targetGroupIds: [String]? = nil, unknownUserAction: String? = nil) {
        self.access = access
        self.activationRequirements = activationRequirements
        self.preRegistrationInlineHooks = preRegistrationInlineHooks
        self.profileAttributes = profileAttributes
        self.targetGroupIds = targetGroupIds
        self.unknownUserAction = unknownUserAction
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case access
        case activationRequirements
        case preRegistrationInlineHooks
        case profileAttributes
        case targetGroupIds
        case unknownUserAction
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(access, forKey: .access)
        try container.encodeIfPresent(activationRequirements, forKey: .activationRequirements)
        try container.encodeIfPresent(preRegistrationInlineHooks, forKey: .preRegistrationInlineHooks)
        try container.encodeIfPresent(profileAttributes, forKey: .profileAttributes)
        try container.encodeIfPresent(targetGroupIds, forKey: .targetGroupIds)
        try container.encodeIfPresent(unknownUserAction, forKey: .unknownUserAction)
    }



}

