//
// ApplicationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ApplicationAPI {
    /**
     Activate Application
     
     - parameter appId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateApplication(appId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        activateApplicationWithRequestBuilder(appId: appId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Activate Application
     - POST /api/v1/apps/{appId}/lifecycle/activate
     - Activates an inactive application.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func activateApplicationWithRequestBuilder(appId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/apps/{appId}/lifecycle/activate"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter csrId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV1AppsAppIdCredentialsCsrsCsrIdLifecyclePublishPost(appId: String, csrId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JsonWebKey?, _ error: Error?) -> Void)) {
        apiV1AppsAppIdCredentialsCsrsCsrIdLifecyclePublishPostWithRequestBuilder(appId: appId, csrId: csrId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter csrId: (path)  
     - returns: RequestBuilder<JsonWebKey> 
     */
    open class func apiV1AppsAppIdCredentialsCsrsCsrIdLifecyclePublishPostWithRequestBuilder(appId: String, csrId: String) -> RequestBuilder<JsonWebKey> {
        var path = "/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let csrIdPreEscape = "\(APIHelper.mapValueToPathItem(csrId))"
        let csrIdPostEscape = csrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{csrId}", with: csrIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<JsonWebKey>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Assign User to Application for SSO & Provisioning
     
     - parameter appId: (path)  
     - parameter appUser: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assignUserToApplication(appId: String, appUser: AppUser, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppUser?, _ error: Error?) -> Void)) {
        assignUserToApplicationWithRequestBuilder(appId: appId, appUser: appUser).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Assign User to Application for SSO & Provisioning
     - POST /api/v1/apps/{appId}/users
     - Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter appUser: (body)  
     - returns: RequestBuilder<AppUser> 
     */
    open class func assignUserToApplicationWithRequestBuilder(appId: String, appUser: AppUser) -> RequestBuilder<AppUser> {
        var path = "/api/v1/apps/{appId}/users"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appUser)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AppUser>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Clone Application Key Credential
     
     - parameter appId: (path)  
     - parameter keyId: (path)  
     - parameter targetAid: (query) Unique key of the target Application 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cloneApplicationKey(appId: String, keyId: String, targetAid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JsonWebKey?, _ error: Error?) -> Void)) {
        cloneApplicationKeyWithRequestBuilder(appId: appId, keyId: keyId, targetAid: targetAid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Clone Application Key Credential
     - POST /api/v1/apps/{appId}/credentials/keys/{keyId}/clone
     - Clones a X.509 certificate for an application key credential from a source application to target application.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter keyId: (path)  
     - parameter targetAid: (query) Unique key of the target Application 
     - returns: RequestBuilder<JsonWebKey> 
     */
    open class func cloneApplicationKeyWithRequestBuilder(appId: String, keyId: String, targetAid: String) -> RequestBuilder<JsonWebKey> {
        var path = "/api/v1/apps/{appId}/credentials/keys/{keyId}/clone"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let keyIdPreEscape = "\(APIHelper.mapValueToPathItem(keyId))"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyId}", with: keyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "targetAid": targetAid.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<JsonWebKey>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add Application
     
     - parameter application: (body)  
     - parameter activate: (query) Executes activation lifecycle operation when creating the app (optional, default to true)
     - parameter oktaAccessGatewayAgent: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createApplication(application: Application, activate: Bool? = nil, oktaAccessGatewayAgent: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Application?, _ error: Error?) -> Void)) {
        createApplicationWithRequestBuilder(application: application, activate: activate, oktaAccessGatewayAgent: oktaAccessGatewayAgent).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add Application
     - POST /api/v1/apps
     - Adds a new application to your Okta organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter application: (body)  
     - parameter activate: (query) Executes activation lifecycle operation when creating the app (optional, default to true)
     - parameter oktaAccessGatewayAgent: (header)  (optional)
     - returns: RequestBuilder<Application> 
     */
    open class func createApplicationWithRequestBuilder(application: Application, activate: Bool? = nil, oktaAccessGatewayAgent: String? = nil) -> RequestBuilder<Application> {
        let path = "/api/v1/apps"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: application)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "activate": activate?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            "OktaAccessGateway-Agent": oktaAccessGatewayAgent?.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Application>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Assign Group to Application
     
     - parameter appId: (path)  
     - parameter groupId: (path)  
     - parameter applicationGroupAssignment: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createApplicationGroupAssignment(appId: String, groupId: String, applicationGroupAssignment: ApplicationGroupAssignment? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApplicationGroupAssignment?, _ error: Error?) -> Void)) {
        createApplicationGroupAssignmentWithRequestBuilder(appId: appId, groupId: groupId, applicationGroupAssignment: applicationGroupAssignment).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Assign Group to Application
     - PUT /api/v1/apps/{appId}/groups/{groupId}
     - Assigns a group to an application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter groupId: (path)  
     - parameter applicationGroupAssignment: (body)  (optional)
     - returns: RequestBuilder<ApplicationGroupAssignment> 
     */
    open class func createApplicationGroupAssignmentWithRequestBuilder(appId: String, groupId: String, applicationGroupAssignment: ApplicationGroupAssignment? = nil) -> RequestBuilder<ApplicationGroupAssignment> {
        var path = "/api/v1/apps/{appId}/groups/{groupId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationGroupAssignment)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApplicationGroupAssignment>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Deactivate Application
     
     - parameter appId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateApplication(appId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deactivateApplicationWithRequestBuilder(appId: appId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deactivate Application
     - POST /api/v1/apps/{appId}/lifecycle/deactivate
     - Deactivates an active application.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deactivateApplicationWithRequestBuilder(appId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/apps/{appId}/lifecycle/deactivate"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete Application
     
     - parameter appId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteApplication(appId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteApplicationWithRequestBuilder(appId: appId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Application
     - DELETE /api/v1/apps/{appId}
     - Removes an inactive application.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteApplicationWithRequestBuilder(appId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/apps/{appId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove Group from Application
     
     - parameter appId: (path)  
     - parameter groupId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteApplicationGroupAssignment(appId: String, groupId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteApplicationGroupAssignmentWithRequestBuilder(appId: appId, groupId: groupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove Group from Application
     - DELETE /api/v1/apps/{appId}/groups/{groupId}
     - Removes a group assignment from an application.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter groupId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteApplicationGroupAssignmentWithRequestBuilder(appId: String, groupId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/apps/{appId}/groups/{groupId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove User from Application
     
     - parameter appId: (path)  
     - parameter userId: (path)  
     - parameter sendEmail: (query)  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteApplicationUser(appId: String, userId: String, sendEmail: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteApplicationUserWithRequestBuilder(appId: appId, userId: userId, sendEmail: sendEmail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove User from Application
     - DELETE /api/v1/apps/{appId}/users/{userId}
     - Removes an assignment for a user from an application.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter userId: (path)  
     - parameter sendEmail: (query)  (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteApplicationUserWithRequestBuilder(appId: String, userId: String, sendEmail: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/api/v1/apps/{appId}/users/{userId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendEmail": sendEmail?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter validityYears: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateApplicationKey(appId: String, validityYears: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JsonWebKey?, _ error: Error?) -> Void)) {
        generateApplicationKeyWithRequestBuilder(appId: appId, validityYears: validityYears).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/apps/{appId}/credentials/keys/generate
     - Generates a new X.509 certificate for an application key credential
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter validityYears: (query)  (optional)
     - returns: RequestBuilder<JsonWebKey> 
     */
    open class func generateApplicationKeyWithRequestBuilder(appId: String, validityYears: Int? = nil) -> RequestBuilder<JsonWebKey> {
        var path = "/api/v1/apps/{appId}/credentials/keys/generate"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "validityYears": validityYears?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<JsonWebKey>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Generate Certificate Signing Request for Application
     
     - parameter appId: (path)  
     - parameter metadata: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateCsrForApplication(appId: String, metadata: CsrMetadata, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Csr?, _ error: Error?) -> Void)) {
        generateCsrForApplicationWithRequestBuilder(appId: appId, metadata: metadata).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate Certificate Signing Request for Application
     - POST /api/v1/apps/{appId}/credentials/csrs
     - Generates a new key pair and returns the Certificate Signing Request for it.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter metadata: (body)  
     - returns: RequestBuilder<Csr> 
     */
    open class func generateCsrForApplicationWithRequestBuilder(appId: String, metadata: CsrMetadata) -> RequestBuilder<Csr> {
        var path = "/api/v1/apps/{appId}/credentials/csrs"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: metadata)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Csr>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Application
     
     - parameter appId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplication(appId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Application?, _ error: Error?) -> Void)) {
        getApplicationWithRequestBuilder(appId: appId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Application
     - GET /api/v1/apps/{appId}
     - Fetches an application from your Okta organization by `id`.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<Application> 
     */
    open class func getApplicationWithRequestBuilder(appId: String, expand: String? = nil) -> RequestBuilder<Application> {
        var path = "/api/v1/apps/{appId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Application>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Assigned Group for Application
     
     - parameter appId: (path)  
     - parameter groupId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplicationGroupAssignment(appId: String, groupId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApplicationGroupAssignment?, _ error: Error?) -> Void)) {
        getApplicationGroupAssignmentWithRequestBuilder(appId: appId, groupId: groupId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Assigned Group for Application
     - GET /api/v1/apps/{appId}/groups/{groupId}
     - Fetches an application group assignment
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter groupId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<ApplicationGroupAssignment> 
     */
    open class func getApplicationGroupAssignmentWithRequestBuilder(appId: String, groupId: String, expand: String? = nil) -> RequestBuilder<ApplicationGroupAssignment> {
        var path = "/api/v1/apps/{appId}/groups/{groupId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApplicationGroupAssignment>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Key Credential for Application
     
     - parameter appId: (path)  
     - parameter keyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplicationKey(appId: String, keyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: JsonWebKey?, _ error: Error?) -> Void)) {
        getApplicationKeyWithRequestBuilder(appId: appId, keyId: keyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Key Credential for Application
     - GET /api/v1/apps/{appId}/credentials/keys/{keyId}
     - Gets a specific application key credential by kid
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter keyId: (path)  
     - returns: RequestBuilder<JsonWebKey> 
     */
    open class func getApplicationKeyWithRequestBuilder(appId: String, keyId: String) -> RequestBuilder<JsonWebKey> {
        var path = "/api/v1/apps/{appId}/credentials/keys/{keyId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let keyIdPreEscape = "\(APIHelper.mapValueToPathItem(keyId))"
        let keyIdPostEscape = keyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyId}", with: keyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<JsonWebKey>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Assigned User for Application
     
     - parameter appId: (path)  
     - parameter userId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplicationUser(appId: String, userId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppUser?, _ error: Error?) -> Void)) {
        getApplicationUserWithRequestBuilder(appId: appId, userId: userId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Assigned User for Application
     - GET /api/v1/apps/{appId}/users/{userId}
     - Fetches a specific user assignment for application by `id`.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter userId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<AppUser> 
     */
    open class func getApplicationUserWithRequestBuilder(appId: String, userId: String, expand: String? = nil) -> RequestBuilder<AppUser> {
        var path = "/api/v1/apps/{appId}/users/{userId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AppUser>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter csrId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCsrForApplication(appId: String, csrId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Csr?, _ error: Error?) -> Void)) {
        getCsrForApplicationWithRequestBuilder(appId: appId, csrId: csrId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/apps/{appId}/credentials/csrs/{csrId}
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter csrId: (path)  
     - returns: RequestBuilder<Csr> 
     */
    open class func getCsrForApplicationWithRequestBuilder(appId: String, csrId: String) -> RequestBuilder<Csr> {
        var path = "/api/v1/apps/{appId}/credentials/csrs/{csrId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let csrIdPreEscape = "\(APIHelper.mapValueToPathItem(csrId))"
        let csrIdPostEscape = csrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{csrId}", with: csrIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Csr>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter tokenId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOAuth2TokenForApplication(appId: String, tokenId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Token?, _ error: Error?) -> Void)) {
        getOAuth2TokenForApplicationWithRequestBuilder(appId: appId, tokenId: tokenId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/apps/{appId}/tokens/{tokenId}
     - Gets a token for the specified application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter tokenId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<OAuth2Token> 
     */
    open class func getOAuth2TokenForApplicationWithRequestBuilder(appId: String, tokenId: String, expand: String? = nil) -> RequestBuilder<OAuth2Token> {
        var path = "/api/v1/apps/{appId}/tokens/{tokenId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2Token>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter grantId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getScopeConsentGrant(appId: String, grantId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2ScopeConsentGrant?, _ error: Error?) -> Void)) {
        getScopeConsentGrantWithRequestBuilder(appId: appId, grantId: grantId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/apps/{appId}/grants/{grantId}
     - Fetches a single scope consent grant for the application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter grantId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<OAuth2ScopeConsentGrant> 
     */
    open class func getScopeConsentGrantWithRequestBuilder(appId: String, grantId: String, expand: String? = nil) -> RequestBuilder<OAuth2ScopeConsentGrant> {
        var path = "/api/v1/apps/{appId}/grants/{grantId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let grantIdPreEscape = "\(APIHelper.mapValueToPathItem(grantId))"
        let grantIdPostEscape = grantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{grantId}", with: grantIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2ScopeConsentGrant>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter oAuth2ScopeConsentGrant: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func grantConsentToScope(appId: String, oAuth2ScopeConsentGrant: OAuth2ScopeConsentGrant, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2ScopeConsentGrant?, _ error: Error?) -> Void)) {
        grantConsentToScopeWithRequestBuilder(appId: appId, oAuth2ScopeConsentGrant: oAuth2ScopeConsentGrant).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/apps/{appId}/grants
     - Grants consent for the application to request an OAuth 2.0 Okta scope
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter oAuth2ScopeConsentGrant: (body)  
     - returns: RequestBuilder<OAuth2ScopeConsentGrant> 
     */
    open class func grantConsentToScopeWithRequestBuilder(appId: String, oAuth2ScopeConsentGrant: OAuth2ScopeConsentGrant) -> RequestBuilder<OAuth2ScopeConsentGrant> {
        var path = "/api/v1/apps/{appId}/grants"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2ScopeConsentGrant)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2ScopeConsentGrant>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Groups Assigned to Application
     
     - parameter appId: (path)  
     - parameter q: (query)  (optional)
     - parameter after: (query) Specifies the pagination cursor for the next page of assignments (optional)
     - parameter limit: (query) Specifies the number of results for a page (optional, default to -1)
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listApplicationGroupAssignments(appId: String, q: String? = nil, after: String? = nil, limit: Int? = nil, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ApplicationGroupAssignment]?, _ error: Error?) -> Void)) {
        listApplicationGroupAssignmentsWithRequestBuilder(appId: appId, q: q, after: after, limit: limit, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Groups Assigned to Application
     - GET /api/v1/apps/{appId}/groups
     - Enumerates group assignments for an application.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter q: (query)  (optional)
     - parameter after: (query) Specifies the pagination cursor for the next page of assignments (optional)
     - parameter limit: (query) Specifies the number of results for a page (optional, default to -1)
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<[ApplicationGroupAssignment]> 
     */
    open class func listApplicationGroupAssignmentsWithRequestBuilder(appId: String, q: String? = nil, after: String? = nil, limit: Int? = nil, expand: String? = nil) -> RequestBuilder<[ApplicationGroupAssignment]> {
        var path = "/api/v1/apps/{appId}/groups"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ApplicationGroupAssignment]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Key Credentials for Application
     
     - parameter appId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listApplicationKeys(appId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [JsonWebKey]?, _ error: Error?) -> Void)) {
        listApplicationKeysWithRequestBuilder(appId: appId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Key Credentials for Application
     - GET /api/v1/apps/{appId}/credentials/keys
     - Enumerates key credentials for an application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - returns: RequestBuilder<[JsonWebKey]> 
     */
    open class func listApplicationKeysWithRequestBuilder(appId: String) -> RequestBuilder<[JsonWebKey]> {
        var path = "/api/v1/apps/{appId}/credentials/keys"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[JsonWebKey]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Users Assigned to Application
     
     - parameter appId: (path)  
     - parameter q: (query)  (optional)
     - parameter queryScope: (query)  (optional)
     - parameter after: (query) specifies the pagination cursor for the next page of assignments (optional)
     - parameter limit: (query) specifies the number of results for a page (optional, default to -1)
     - parameter filter: (query)  (optional)
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listApplicationUsers(appId: String, q: String? = nil, queryScope: String? = nil, after: String? = nil, limit: Int? = nil, filter: String? = nil, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AppUser]?, _ error: Error?) -> Void)) {
        listApplicationUsersWithRequestBuilder(appId: appId, q: q, queryScope: queryScope, after: after, limit: limit, filter: filter, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Users Assigned to Application
     - GET /api/v1/apps/{appId}/users
     - Enumerates all assigned [application users](#application-user-model) for an application.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter q: (query)  (optional)
     - parameter queryScope: (query)  (optional)
     - parameter after: (query) specifies the pagination cursor for the next page of assignments (optional)
     - parameter limit: (query) specifies the number of results for a page (optional, default to -1)
     - parameter filter: (query)  (optional)
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<[AppUser]> 
     */
    open class func listApplicationUsersWithRequestBuilder(appId: String, q: String? = nil, queryScope: String? = nil, after: String? = nil, limit: Int? = nil, filter: String? = nil, expand: String? = nil) -> RequestBuilder<[AppUser]> {
        var path = "/api/v1/apps/{appId}/users"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q?.encodeToJSON(),
            "query_scope": queryScope?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[AppUser]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Applications
     
     - parameter q: (query)  (optional)
     - parameter after: (query) Specifies the pagination cursor for the next page of apps (optional)
     - parameter limit: (query) Specifies the number of results for a page (optional, default to -1)
     - parameter filter: (query) Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)
     - parameter expand: (query) Traverses users link relationship and optionally embeds Application User resource (optional)
     - parameter includeNonDeleted: (query)  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listApplications(q: String? = nil, after: String? = nil, limit: Int? = nil, filter: String? = nil, expand: String? = nil, includeNonDeleted: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Application]?, _ error: Error?) -> Void)) {
        listApplicationsWithRequestBuilder(q: q, after: after, limit: limit, filter: filter, expand: expand, includeNonDeleted: includeNonDeleted).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Applications
     - GET /api/v1/apps
     - Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter q: (query)  (optional)
     - parameter after: (query) Specifies the pagination cursor for the next page of apps (optional)
     - parameter limit: (query) Specifies the number of results for a page (optional, default to -1)
     - parameter filter: (query) Filters apps by status, user.id, group.id or credentials.signing.kid expression (optional)
     - parameter expand: (query) Traverses users link relationship and optionally embeds Application User resource (optional)
     - parameter includeNonDeleted: (query)  (optional, default to false)
     - returns: RequestBuilder<[Application]> 
     */
    open class func listApplicationsWithRequestBuilder(q: String? = nil, after: String? = nil, limit: Int? = nil, filter: String? = nil, expand: String? = nil, includeNonDeleted: Bool? = nil) -> RequestBuilder<[Application]> {
        let path = "/api/v1/apps"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "expand": expand?.encodeToJSON(),
            "includeNonDeleted": includeNonDeleted?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Application]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Certificate Signing Requests for Application
     
     - parameter appId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listCsrsForApplication(appId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Csr]?, _ error: Error?) -> Void)) {
        listCsrsForApplicationWithRequestBuilder(appId: appId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Certificate Signing Requests for Application
     - GET /api/v1/apps/{appId}/credentials/csrs
     - Enumerates Certificate Signing Requests for an application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - returns: RequestBuilder<[Csr]> 
     */
    open class func listCsrsForApplicationWithRequestBuilder(appId: String) -> RequestBuilder<[Csr]> {
        var path = "/api/v1/apps/{appId}/credentials/csrs"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Csr]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listOAuth2TokensForApplication(appId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [OAuth2Token]?, _ error: Error?) -> Void)) {
        listOAuth2TokensForApplicationWithRequestBuilder(appId: appId, expand: expand, after: after, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/apps/{appId}/tokens
     - Lists all tokens for the application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: RequestBuilder<[OAuth2Token]> 
     */
    open class func listOAuth2TokensForApplicationWithRequestBuilder(appId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[OAuth2Token]> {
        var path = "/api/v1/apps/{appId}/tokens"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OAuth2Token]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listScopeConsentGrants(appId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [OAuth2ScopeConsentGrant]?, _ error: Error?) -> Void)) {
        listScopeConsentGrantsWithRequestBuilder(appId: appId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/apps/{appId}/grants
     - Lists all scope consent grants for the application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<[OAuth2ScopeConsentGrant]> 
     */
    open class func listScopeConsentGrantsWithRequestBuilder(appId: String, expand: String? = nil) -> RequestBuilder<[OAuth2ScopeConsentGrant]> {
        var path = "/api/v1/apps/{appId}/grants"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OAuth2ScopeConsentGrant]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter csrId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeCsrFromApplication(appId: String, csrId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        revokeCsrFromApplicationWithRequestBuilder(appId: appId, csrId: csrId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/apps/{appId}/credentials/csrs/{csrId}
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter csrId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func revokeCsrFromApplicationWithRequestBuilder(appId: String, csrId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/apps/{appId}/credentials/csrs/{csrId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let csrIdPreEscape = "\(APIHelper.mapValueToPathItem(csrId))"
        let csrIdPostEscape = csrIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{csrId}", with: csrIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter tokenId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeOAuth2TokenForApplication(appId: String, tokenId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        revokeOAuth2TokenForApplicationWithRequestBuilder(appId: appId, tokenId: tokenId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/apps/{appId}/tokens/{tokenId}
     - Revokes the specified token for the specified application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter tokenId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func revokeOAuth2TokenForApplicationWithRequestBuilder(appId: String, tokenId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/apps/{appId}/tokens/{tokenId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeOAuth2TokensForApplication(appId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        revokeOAuth2TokensForApplicationWithRequestBuilder(appId: appId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/apps/{appId}/tokens
     - Revokes all tokens for the specified application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func revokeOAuth2TokensForApplicationWithRequestBuilder(appId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/apps/{appId}/tokens"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter appId: (path)  
     - parameter grantId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeScopeConsentGrant(appId: String, grantId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        revokeScopeConsentGrantWithRequestBuilder(appId: appId, grantId: grantId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/apps/{appId}/grants/{grantId}
     - Revokes permission for the application to request the given scope
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter grantId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func revokeScopeConsentGrantWithRequestBuilder(appId: String, grantId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/apps/{appId}/grants/{grantId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let grantIdPreEscape = "\(APIHelper.mapValueToPathItem(grantId))"
        let grantIdPostEscape = grantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{grantId}", with: grantIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update Application
     
     - parameter appId: (path)  
     - parameter application: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateApplication(appId: String, application: Application, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Application?, _ error: Error?) -> Void)) {
        updateApplicationWithRequestBuilder(appId: appId, application: application).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Application
     - PUT /api/v1/apps/{appId}
     - Updates an application in your organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter application: (body)  
     - returns: RequestBuilder<Application> 
     */
    open class func updateApplicationWithRequestBuilder(appId: String, application: Application) -> RequestBuilder<Application> {
        var path = "/api/v1/apps/{appId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: application)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Application>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update Application Profile for Assigned User
     
     - parameter appId: (path)  
     - parameter userId: (path)  
     - parameter appUser: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateApplicationUser(appId: String, userId: String, appUser: AppUser, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppUser?, _ error: Error?) -> Void)) {
        updateApplicationUserWithRequestBuilder(appId: appId, userId: userId, appUser: appUser).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Application Profile for Assigned User
     - POST /api/v1/apps/{appId}/users/{userId}
     - Updates a user's profile for an application
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appId: (path)  
     - parameter userId: (path)  
     - parameter appUser: (body)  
     - returns: RequestBuilder<AppUser> 
     */
    open class func updateApplicationUserWithRequestBuilder(appId: String, userId: String, appUser: AppUser) -> RequestBuilder<AppUser> {
        var path = "/api/v1/apps/{appId}/users/{userId}"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appId}", with: appIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appUser)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AppUser>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
