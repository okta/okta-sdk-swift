//
// LinkedObjectAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class LinkedObjectAPI {
    /**

     - parameter linkedObject: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addLinkedObjectDefinition(linkedObject: LinkedObject, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LinkedObject?, _ error: Error?) -> Void)) {
        addLinkedObjectDefinitionWithRequestBuilder(linkedObject: linkedObject).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/meta/schemas/user/linkedObjects
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter linkedObject: (body)  
     - returns: RequestBuilder<LinkedObject> 
     */
    open class func addLinkedObjectDefinitionWithRequestBuilder(linkedObject: LinkedObject) -> RequestBuilder<LinkedObject> {
        let path = "/api/v1/meta/schemas/user/linkedObjects"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: linkedObject)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LinkedObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter linkedObjectName: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLinkedObjectDefinition(linkedObjectName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteLinkedObjectDefinitionWithRequestBuilder(linkedObjectName: linkedObjectName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter linkedObjectName: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteLinkedObjectDefinitionWithRequestBuilder(linkedObjectName: String) -> RequestBuilder<Void> {
        var path = "/api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}"
        let linkedObjectNamePreEscape = "\(APIHelper.mapValueToPathItem(linkedObjectName))"
        let linkedObjectNamePostEscape = linkedObjectNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{linkedObjectName}", with: linkedObjectNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter linkedObjectName: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLinkedObjectDefinition(linkedObjectName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LinkedObject?, _ error: Error?) -> Void)) {
        getLinkedObjectDefinitionWithRequestBuilder(linkedObjectName: linkedObjectName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter linkedObjectName: (path)  
     - returns: RequestBuilder<LinkedObject> 
     */
    open class func getLinkedObjectDefinitionWithRequestBuilder(linkedObjectName: String) -> RequestBuilder<LinkedObject> {
        var path = "/api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}"
        let linkedObjectNamePreEscape = "\(APIHelper.mapValueToPathItem(linkedObjectName))"
        let linkedObjectNamePostEscape = linkedObjectNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{linkedObjectName}", with: linkedObjectNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LinkedObject>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listLinkedObjectDefinitions(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [LinkedObject]?, _ error: Error?) -> Void)) {
        listLinkedObjectDefinitionsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/meta/schemas/user/linkedObjects
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - returns: RequestBuilder<[LinkedObject]> 
     */
    open class func listLinkedObjectDefinitionsWithRequestBuilder() -> RequestBuilder<[LinkedObject]> {
        let path = "/api/v1/meta/schemas/user/linkedObjects"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[LinkedObject]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
