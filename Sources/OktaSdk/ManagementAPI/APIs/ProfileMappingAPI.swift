//
// ProfileMappingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ProfileMappingAPI {
    /**
     Get Profile Mapping
     
     - parameter mappingId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfileMapping(mappingId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProfileMapping?, _ error: Error?) -> Void)) {
        getProfileMappingWithRequestBuilder(mappingId: mappingId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Profile Mapping
     - GET /api/v1/mappings/{mappingId}
     - Fetches a single Profile Mapping referenced by its ID.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter mappingId: (path)  
     - returns: RequestBuilder<ProfileMapping> 
     */
    open class func getProfileMappingWithRequestBuilder(mappingId: String) -> RequestBuilder<ProfileMapping> {
        var path = "/api/v1/mappings/{mappingId}"
        let mappingIdPreEscape = "\(APIHelper.mapValueToPathItem(mappingId))"
        let mappingIdPostEscape = mappingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mappingId}", with: mappingIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileMapping>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter sourceId: (query)  (optional)
     - parameter targetId: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProfileMappings(after: String? = nil, limit: Int? = nil, sourceId: String? = nil, targetId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ProfileMapping]?, _ error: Error?) -> Void)) {
        listProfileMappingsWithRequestBuilder(after: after, limit: limit, sourceId: sourceId, targetId: targetId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/mappings
     - Enumerates Profile Mappings in your organization with pagination.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter sourceId: (query)  (optional)
     - parameter targetId: (query)  (optional)
     - returns: RequestBuilder<[ProfileMapping]> 
     */
    open class func listProfileMappingsWithRequestBuilder(after: String? = nil, limit: Int? = nil, sourceId: String? = nil, targetId: String? = nil) -> RequestBuilder<[ProfileMapping]> {
        let path = "/api/v1/mappings"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sourceId": sourceId?.encodeToJSON(),
            "targetId": targetId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ProfileMapping]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update Profile Mapping
     
     - parameter mappingId: (path)  
     - parameter profileMapping: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProfileMapping(mappingId: String, profileMapping: ProfileMapping, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProfileMapping?, _ error: Error?) -> Void)) {
        updateProfileMappingWithRequestBuilder(mappingId: mappingId, profileMapping: profileMapping).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Profile Mapping
     - POST /api/v1/mappings/{mappingId}
     - Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter mappingId: (path)  
     - parameter profileMapping: (body)  
     - returns: RequestBuilder<ProfileMapping> 
     */
    open class func updateProfileMappingWithRequestBuilder(mappingId: String, profileMapping: ProfileMapping) -> RequestBuilder<ProfileMapping> {
        var path = "/api/v1/mappings/{mappingId}"
        let mappingIdPreEscape = "\(APIHelper.mapValueToPathItem(mappingId))"
        let mappingIdPostEscape = mappingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mappingId}", with: mappingIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: profileMapping)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileMapping>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
