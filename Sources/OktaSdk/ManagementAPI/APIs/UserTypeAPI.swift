//
// UserTypeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class UserTypeAPI {
    /**

     - parameter userType: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUserType(userType: UserType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserType?, _ error: Error?) -> Void)) {
        createUserTypeWithRequestBuilder(userType: userType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/meta/types/user
     - Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userType: (body)  
     - returns: RequestBuilder<UserType> 
     */
    open class func createUserTypeWithRequestBuilder(userType: UserType) -> RequestBuilder<UserType> {
        let path = "/api/v1/meta/types/user"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userType)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserType>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter typeId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUserType(typeId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteUserTypeWithRequestBuilder(typeId: typeId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/meta/types/user/{typeId}
     - Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter typeId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserTypeWithRequestBuilder(typeId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/meta/types/user/{typeId}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter typeId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserType(typeId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserType?, _ error: Error?) -> Void)) {
        getUserTypeWithRequestBuilder(typeId: typeId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/meta/types/user/{typeId}
     - Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter typeId: (path)  
     - returns: RequestBuilder<UserType> 
     */
    open class func getUserTypeWithRequestBuilder(typeId: String) -> RequestBuilder<UserType> {
        var path = "/api/v1/meta/types/user/{typeId}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserType>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listUserTypes(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UserType]?, _ error: Error?) -> Void)) {
        listUserTypesWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/meta/types/user
     - Fetches all User Types in your org
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - returns: RequestBuilder<[UserType]> 
     */
    open class func listUserTypesWithRequestBuilder() -> RequestBuilder<[UserType]> {
        let path = "/api/v1/meta/types/user"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[UserType]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter typeId: (path)  
     - parameter userType: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceUserType(typeId: String, userType: UserType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserType?, _ error: Error?) -> Void)) {
        replaceUserTypeWithRequestBuilder(typeId: typeId, userType: userType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/meta/types/user/{typeId}
     - Replace an existing User Type
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter typeId: (path)  
     - parameter userType: (body)  
     - returns: RequestBuilder<UserType> 
     */
    open class func replaceUserTypeWithRequestBuilder(typeId: String, userType: UserType) -> RequestBuilder<UserType> {
        var path = "/api/v1/meta/types/user/{typeId}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userType)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserType>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter typeId: (path)  
     - parameter userType: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserType(typeId: String, userType: UserType, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserType?, _ error: Error?) -> Void)) {
        updateUserTypeWithRequestBuilder(typeId: typeId, userType: userType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/meta/types/user/{typeId}
     - Updates an existing User Type
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter typeId: (path)  
     - parameter userType: (body)  
     - returns: RequestBuilder<UserType> 
     */
    open class func updateUserTypeWithRequestBuilder(typeId: String, userType: UserType) -> RequestBuilder<UserType> {
        var path = "/api/v1/meta/types/user/{typeId}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userType)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserType>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
