//
// GroupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class GroupAPI {
    /**
     Activate a group Rule
     
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateGroupRule(ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        activateGroupRuleWithRequestBuilder(ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Activate a group Rule
     - POST /api/v1/groups/rules/{ruleId}/lifecycle/activate
     - Activates a specific group rule by id from your organization
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter ruleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func activateGroupRuleWithRequestBuilder(ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/rules/{ruleId}/lifecycle/activate"
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add App Instance Target to App Administrator Role given to a Group
     
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addApplicationInstanceTargetToAppAdminRoleGivenToGroup(groupId: String, roleId: String, appName: String, applicationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        addApplicationInstanceTargetToAppAdminRoleGivenToGroupWithRequestBuilder(groupId: groupId, roleId: roleId, appName: appName, applicationId: applicationId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add App Instance Target to App Administrator Role given to a Group
     - PUT /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}
     - Add App Instance Target to App Administrator Role given to a Group
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func addApplicationInstanceTargetToAppAdminRoleGivenToGroupWithRequestBuilder(groupId: String, roleId: String, appName: String, applicationId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appName}", with: appNamePostEscape, options: .literal, range: nil)
        let applicationIdPreEscape = "\(APIHelper.mapValueToPathItem(applicationId))"
        let applicationIdPostEscape = applicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{applicationId}", with: applicationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addApplicationTargetToAdminRoleGivenToGroup(groupId: String, roleId: String, appName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        addApplicationTargetToAdminRoleGivenToGroupWithRequestBuilder(groupId: groupId, roleId: roleId, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func addApplicationTargetToAdminRoleGivenToGroupWithRequestBuilder(groupId: String, roleId: String, appName: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appName}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter targetGroupId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addGroupTargetToGroupAdministratorRoleForGroup(groupId: String, roleId: String, targetGroupId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        addGroupTargetToGroupAdministratorRoleForGroupWithRequestBuilder(groupId: groupId, roleId: roleId, targetGroupId: targetGroupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter targetGroupId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func addGroupTargetToGroupAdministratorRoleForGroupWithRequestBuilder(groupId: String, roleId: String, targetGroupId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let targetGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(targetGroupId))"
        let targetGroupIdPostEscape = targetGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{targetGroupId}", with: targetGroupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add User to Group
     
     - parameter groupId: (path)  
     - parameter userId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addUserToGroup(groupId: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        addUserToGroupWithRequestBuilder(groupId: groupId, userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add User to Group
     - PUT /api/v1/groups/{groupId}/users/{userId}
     - Adds a user to a group with 'OKTA_GROUP' type.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func addUserToGroupWithRequestBuilder(groupId: String, userId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}/users/{userId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter assignRoleRequest: (body)  
     - parameter disableNotifications: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assignRoleToGroup(groupId: String, assignRoleRequest: AssignRoleRequest, disableNotifications: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Role?, _ error: Error?) -> Void)) {
        assignRoleToGroupWithRequestBuilder(groupId: groupId, assignRoleRequest: assignRoleRequest, disableNotifications: disableNotifications).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/groups/{groupId}/roles
     - Assigns a Role to a Group
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter assignRoleRequest: (body)  
     - parameter disableNotifications: (query)  (optional)
     - returns: RequestBuilder<Role> 
     */
    open class func assignRoleToGroupWithRequestBuilder(groupId: String, assignRoleRequest: AssignRoleRequest, disableNotifications: String? = nil) -> RequestBuilder<Role> {
        var path = "/api/v1/groups/{groupId}/roles"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assignRoleRequest)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "disableNotifications": disableNotifications?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Role>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add Group
     
     - parameter group: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroup(group: Group, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Group?, _ error: Error?) -> Void)) {
        createGroupWithRequestBuilder(group: group).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add Group
     - POST /api/v1/groups
     - Adds a new group with `OKTA_GROUP` type to your organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter group: (body)  
     - returns: RequestBuilder<Group> 
     */
    open class func createGroupWithRequestBuilder(group: Group) -> RequestBuilder<Group> {
        let path = "/api/v1/groups"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: group)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Group>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create Group Rule
     
     - parameter groupRule: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroupRule(groupRule: GroupRule, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GroupRule?, _ error: Error?) -> Void)) {
        createGroupRuleWithRequestBuilder(groupRule: groupRule).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Group Rule
     - POST /api/v1/groups/rules
     - Creates a group rule to dynamically add users to the specified group if they match the condition
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupRule: (body)  
     - returns: RequestBuilder<GroupRule> 
     */
    open class func createGroupRuleWithRequestBuilder(groupRule: GroupRule) -> RequestBuilder<GroupRule> {
        let path = "/api/v1/groups/rules"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupRule)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GroupRule>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Deactivate a group Rule
     
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateGroupRule(ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deactivateGroupRuleWithRequestBuilder(ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deactivate a group Rule
     - POST /api/v1/groups/rules/{ruleId}/lifecycle/deactivate
     - Deactivates a specific group rule by id from your organization
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter ruleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deactivateGroupRuleWithRequestBuilder(ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/rules/{ruleId}/lifecycle/deactivate"
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove Group
     
     - parameter groupId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGroup(groupId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteGroupWithRequestBuilder(groupId: groupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove Group
     - DELETE /api/v1/groups/{groupId}
     - Removes a group with `OKTA_GROUP` type from your organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteGroupWithRequestBuilder(groupId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete a group Rule
     
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGroupRule(ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteGroupRuleWithRequestBuilder(ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a group Rule
     - DELETE /api/v1/groups/rules/{ruleId}
     - Removes a specific group rule by id from your organization
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter ruleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteGroupRuleWithRequestBuilder(ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/rules/{ruleId}"
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Group Rules
     
     - parameter groupId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroup(groupId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Group?, _ error: Error?) -> Void)) {
        getGroupWithRequestBuilder(groupId: groupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Group Rules
     - GET /api/v1/groups/{groupId}
     - Lists all group rules for your organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - returns: RequestBuilder<Group> 
     */
    open class func getGroupWithRequestBuilder(groupId: String) -> RequestBuilder<Group> {
        var path = "/api/v1/groups/{groupId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Group>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Group Rule
     
     - parameter ruleId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupRule(ruleId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GroupRule?, _ error: Error?) -> Void)) {
        getGroupRuleWithRequestBuilder(ruleId: ruleId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Group Rule
     - GET /api/v1/groups/rules/{ruleId}
     - Fetches a specific group rule by id from your organization
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter ruleId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<GroupRule> 
     */
    open class func getGroupRuleWithRequestBuilder(ruleId: String, expand: String? = nil) -> RequestBuilder<GroupRule> {
        var path = "/api/v1/groups/rules/{ruleId}"
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GroupRule>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRole(groupId: String, roleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Role?, _ error: Error?) -> Void)) {
        getRoleWithRequestBuilder(groupId: groupId, roleId: roleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/groups/{groupId}/roles/{roleId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - returns: RequestBuilder<Role> 
     */
    open class func getRoleWithRequestBuilder(groupId: String, roleId: String) -> RequestBuilder<Role> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Role>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listApplicationTargetsForApplicationAdministratorRoleForGroup(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [CatalogApplication]?, _ error: Error?) -> Void)) {
        listApplicationTargetsForApplicationAdministratorRoleForGroupWithRequestBuilder(groupId: groupId, roleId: roleId, after: after, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps
     - Lists all App targets for an `APP_ADMIN` Role assigned to a Group. This methods return list may include full Applications or Instances. The response for an instance will have an `ID` value, while Application will not have an ID.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: RequestBuilder<[CatalogApplication]> 
     */
    open class func listApplicationTargetsForApplicationAdministratorRoleForGroupWithRequestBuilder(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[CatalogApplication]> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[CatalogApplication]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Assigned Applications
     
     - parameter groupId: (path)  
     - parameter after: (query) Specifies the pagination cursor for the next page of apps (optional)
     - parameter limit: (query) Specifies the number of app results for a page (optional, default to 20)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAssignedApplicationsForGroup(groupId: String, after: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Application]?, _ error: Error?) -> Void)) {
        listAssignedApplicationsForGroupWithRequestBuilder(groupId: groupId, after: after, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Assigned Applications
     - GET /api/v1/groups/{groupId}/apps
     - Enumerates all applications that are assigned to a group.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter after: (query) Specifies the pagination cursor for the next page of apps (optional)
     - parameter limit: (query) Specifies the number of app results for a page (optional, default to 20)
     - returns: RequestBuilder<[Application]> 
     */
    open class func listAssignedApplicationsForGroupWithRequestBuilder(groupId: String, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[Application]> {
        var path = "/api/v1/groups/{groupId}/apps"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Application]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGroupAssignedRoles(groupId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Role]?, _ error: Error?) -> Void)) {
        listGroupAssignedRolesWithRequestBuilder(groupId: groupId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/groups/{groupId}/roles
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<[Role]> 
     */
    open class func listGroupAssignedRolesWithRequestBuilder(groupId: String, expand: String? = nil) -> RequestBuilder<[Role]> {
        var path = "/api/v1/groups/{groupId}/roles"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Role]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Group Rules
     
     - parameter limit: (query) Specifies the number of rule results in a page (optional, default to 50)
     - parameter after: (query) Specifies the pagination cursor for the next page of rules (optional)
     - parameter search: (query) Specifies the keyword to search fules for (optional)
     - parameter expand: (query) If specified as &#x60;groupIdToGroupNameMap&#x60;, then show group names (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGroupRules(limit: Int? = nil, after: String? = nil, search: String? = nil, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [GroupRule]?, _ error: Error?) -> Void)) {
        listGroupRulesWithRequestBuilder(limit: limit, after: after, search: search, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Group Rules
     - GET /api/v1/groups/rules
     - Lists all group rules for your organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter limit: (query) Specifies the number of rule results in a page (optional, default to 50)
     - parameter after: (query) Specifies the pagination cursor for the next page of rules (optional)
     - parameter search: (query) Specifies the keyword to search fules for (optional)
     - parameter expand: (query) If specified as &#x60;groupIdToGroupNameMap&#x60;, then show group names (optional)
     - returns: RequestBuilder<[GroupRule]> 
     */
    open class func listGroupRulesWithRequestBuilder(limit: Int? = nil, after: String? = nil, search: String? = nil, expand: String? = nil) -> RequestBuilder<[GroupRule]> {
        let path = "/api/v1/groups/rules"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[GroupRule]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGroupTargetsForGroupRole(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Group]?, _ error: Error?) -> Void)) {
        listGroupTargetsForGroupRoleWithRequestBuilder(groupId: groupId, roleId: roleId, after: after, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/groups/{groupId}/roles/{roleId}/targets/groups
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: RequestBuilder<[Group]> 
     */
    open class func listGroupTargetsForGroupRoleWithRequestBuilder(groupId: String, roleId: String, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[Group]> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}/targets/groups"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Group]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Group Members
     
     - parameter groupId: (path)  
     - parameter after: (query) Specifies the pagination cursor for the next page of users (optional)
     - parameter limit: (query) Specifies the number of user results in a page (optional, default to 1000)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGroupUsers(groupId: String, after: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [User]?, _ error: Error?) -> Void)) {
        listGroupUsersWithRequestBuilder(groupId: groupId, after: after, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Group Members
     - GET /api/v1/groups/{groupId}/users
     - Enumerates all users that are a member of a group.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter after: (query) Specifies the pagination cursor for the next page of users (optional)
     - parameter limit: (query) Specifies the number of user results in a page (optional, default to 1000)
     - returns: RequestBuilder<[User]> 
     */
    open class func listGroupUsersWithRequestBuilder(groupId: String, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[User]> {
        var path = "/api/v1/groups/{groupId}/users"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[User]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Groups
     
     - parameter q: (query) Searches the name property of groups for matching value (optional)
     - parameter filter: (query) Filter expression for groups (optional)
     - parameter after: (query) Specifies the pagination cursor for the next page of groups (optional)
     - parameter limit: (query) Specifies the number of group results in a page (optional, default to 10000)
     - parameter expand: (query) If specified, it causes additional metadata to be included in the response. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGroups(q: String? = nil, filter: String? = nil, after: String? = nil, limit: Int? = nil, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Group]?, _ error: Error?) -> Void)) {
        listGroupsWithRequestBuilder(q: q, filter: filter, after: after, limit: limit, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Groups
     - GET /api/v1/groups
     - Enumerates groups in your organization with pagination. A subset of groups can be returned that match a supported filter expression or query.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter q: (query) Searches the name property of groups for matching value (optional)
     - parameter filter: (query) Filter expression for groups (optional)
     - parameter after: (query) Specifies the pagination cursor for the next page of groups (optional)
     - parameter limit: (query) Specifies the number of group results in a page (optional, default to 10000)
     - parameter expand: (query) If specified, it causes additional metadata to be included in the response. (optional)
     - returns: RequestBuilder<[Group]> 
     */
    open class func listGroupsWithRequestBuilder(q: String? = nil, filter: String? = nil, after: String? = nil, limit: Int? = nil, expand: String? = nil) -> RequestBuilder<[Group]> {
        let path = "/api/v1/groups"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[Group]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove App Instance Target to App Administrator Role given to a Group
     
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeApplicationTargetFromAdministratorRoleGivenToGroup(groupId: String, roleId: String, appName: String, applicationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        removeApplicationTargetFromAdministratorRoleGivenToGroupWithRequestBuilder(groupId: groupId, roleId: roleId, appName: appName, applicationId: applicationId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove App Instance Target to App Administrator Role given to a Group
     - DELETE /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}
     - Remove App Instance Target to App Administrator Role given to a Group
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func removeApplicationTargetFromAdministratorRoleGivenToGroupWithRequestBuilder(groupId: String, roleId: String, appName: String, applicationId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appName}", with: appNamePostEscape, options: .literal, range: nil)
        let applicationIdPreEscape = "\(APIHelper.mapValueToPathItem(applicationId))"
        let applicationIdPostEscape = applicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{applicationId}", with: applicationIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeApplicationTargetFromApplicationAdministratorRoleGivenToGroup(groupId: String, roleId: String, appName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        removeApplicationTargetFromApplicationAdministratorRoleGivenToGroupWithRequestBuilder(groupId: groupId, roleId: roleId, appName: appName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func removeApplicationTargetFromApplicationAdministratorRoleGivenToGroupWithRequestBuilder(groupId: String, roleId: String, appName: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appName}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter targetGroupId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeGroupTargetFromGroupAdministratorRoleGivenToGroup(groupId: String, roleId: String, targetGroupId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        removeGroupTargetFromGroupAdministratorRoleGivenToGroupWithRequestBuilder(groupId: groupId, roleId: roleId, targetGroupId: targetGroupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter targetGroupId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func removeGroupTargetFromGroupAdministratorRoleGivenToGroupWithRequestBuilder(groupId: String, roleId: String, targetGroupId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let targetGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(targetGroupId))"
        let targetGroupIdPostEscape = targetGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{targetGroupId}", with: targetGroupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeRoleFromGroup(groupId: String, roleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        removeRoleFromGroupWithRequestBuilder(groupId: groupId, roleId: roleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/groups/{groupId}/roles/{roleId}
     - Unassigns a Role from a Group
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter roleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func removeRoleFromGroupWithRequestBuilder(groupId: String, roleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}/roles/{roleId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove User from Group
     
     - parameter groupId: (path)  
     - parameter userId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeUserFromGroup(groupId: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        removeUserFromGroupWithRequestBuilder(groupId: groupId, userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove User from Group
     - DELETE /api/v1/groups/{groupId}/users/{userId}
     - Removes a user from a group with 'OKTA_GROUP' type.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func removeUserFromGroupWithRequestBuilder(groupId: String, userId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/groups/{groupId}/users/{userId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update Group
     
     - parameter groupId: (path)  
     - parameter group: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateGroup(groupId: String, group: Group, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Group?, _ error: Error?) -> Void)) {
        updateGroupWithRequestBuilder(groupId: groupId, group: group).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Group
     - PUT /api/v1/groups/{groupId}
     - Updates the profile for a group with `OKTA_GROUP` type from your organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter groupId: (path)  
     - parameter group: (body)  
     - returns: RequestBuilder<Group> 
     */
    open class func updateGroupWithRequestBuilder(groupId: String, group: Group) -> RequestBuilder<Group> {
        var path = "/api/v1/groups/{groupId}"
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: group)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Group>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter ruleId: (path)  
     - parameter groupRule: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateGroupRule(ruleId: String, groupRule: GroupRule, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GroupRule?, _ error: Error?) -> Void)) {
        updateGroupRuleWithRequestBuilder(ruleId: ruleId, groupRule: groupRule).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/groups/rules/{ruleId}
     - Updates a group rule. Only `INACTIVE` rules can be updated.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter ruleId: (path)  
     - parameter groupRule: (body)  
     - returns: RequestBuilder<GroupRule> 
     */
    open class func updateGroupRuleWithRequestBuilder(ruleId: String, groupRule: GroupRule) -> RequestBuilder<GroupRule> {
        var path = "/api/v1/groups/rules/{ruleId}"
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupRule)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GroupRule>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
