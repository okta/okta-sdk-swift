//
// UserFactorAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public enum Provider: String, Codable, CaseIterable {
    case any = "ANY"
    case okta = "OKTA"
    case specificIdp = "SPECIFIC_IDP"
}

public protocol UserFactorType {
}

open class UserFactorAPI {
    /**
     Activate Factor
     
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateFactor(userId: String, factorId: String, body: ActivateFactorRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserFactor?, _ error: Error?) -> Void)) {
        activateFactorWithRequestBuilder(userId: userId, factorId: factorId, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Activate Factor
     - POST /api/v1/users/{userId}/factors/{factorId}/lifecycle/activate
     - The `sms` and `token:software:totp` factor types require activation to complete the enrollment process.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<UserFactor> 
     */
    open class func activateFactorWithRequestBuilder(userId: String, factorId: String, body: ActivateFactorRequest? = nil) -> RequestBuilder<UserFactor> {
        var path = "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserFactor>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFactor(userId: String, factorId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteFactorWithRequestBuilder(userId: userId, factorId: factorId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/factors/{factorId}
     - Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteFactorWithRequestBuilder(userId: String, factorId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/factors/{factorId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Enroll Factor
     
     - parameter userId: (path)  
     - parameter body: (body) Factor 
     - parameter updatePhone: (query)  (optional, default to false)
     - parameter templateId: (query) id of SMS template (only for SMS factor) (optional)
     - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
     - parameter activate: (query)  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enrollFactor<Factor>(userId: String, body: Factor, updatePhone: Bool? = nil, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, activate: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserFactor?, _ error: Error?) -> Void)) where Factor: Codable {
        enrollFactorWithRequestBuilder(userId: userId, body: body, updatePhone: updatePhone, templateId: templateId, tokenLifetimeSeconds: tokenLifetimeSeconds, activate: activate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Enroll Factor
     - POST /api/v1/users/{userId}/factors
     - Enrolls a user with a supported factor.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter body: (body) Factor 
     - parameter updatePhone: (query)  (optional, default to false)
     - parameter templateId: (query) id of SMS template (only for SMS factor) (optional)
     - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
     - parameter activate: (query)  (optional, default to false)
     - returns: RequestBuilder<UserFactor> 
     */
    open class func enrollFactorWithRequestBuilder<Factor>(userId: String, body: Factor, updatePhone: Bool? = nil, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, activate: Bool? = nil) -> RequestBuilder<UserFactor> where Factor: Codable {
        var path = "/api/v1/users/{userId}/factors"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "updatePhone": updatePhone?.encodeToJSON(),
            "templateId": templateId?.encodeToJSON(),
            "tokenLifetimeSeconds": tokenLifetimeSeconds?.encodeToJSON(),
            "activate": activate?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserFactor>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFactor(userId: String, factorId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserFactor?, _ error: Error?) -> Void)) {
        getFactorWithRequestBuilder(userId: userId, factorId: factorId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/factors/{factorId}
     - Fetches a factor for the specified user
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - returns: RequestBuilder<UserFactor> 
     */
    open class func getFactorWithRequestBuilder(userId: String, factorId: String) -> RequestBuilder<UserFactor> {
        var path = "/api/v1/users/{userId}/factors/{factorId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserFactor>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter transactionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFactorTransactionStatus(userId: String, factorId: String, transactionId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VerifyUserFactorResponse?, _ error: Error?) -> Void)) {
        getFactorTransactionStatusWithRequestBuilder(userId: userId, factorId: factorId, transactionId: transactionId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}
     - Polls factors verification transaction for status.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter transactionId: (path)  
     - returns: RequestBuilder<VerifyUserFactorResponse> 
     */
    open class func getFactorTransactionStatusWithRequestBuilder(userId: String, factorId: String, transactionId: String) -> RequestBuilder<VerifyUserFactorResponse> {
        var path = "/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let transactionIdPreEscape = "\(APIHelper.mapValueToPathItem(transactionId))"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transactionId}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VerifyUserFactorResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listFactors(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UserFactor]?, _ error: Error?) -> Void)) {
        listFactorsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/factors
     - Enumerates all the enrolled factors for the specified user
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<[UserFactor]> 
     */
    open class func listFactorsWithRequestBuilder(userId: String) -> RequestBuilder<[UserFactor]> {
        var path = "/api/v1/users/{userId}/factors"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[UserFactor]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSupportedFactors(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UserFactor]?, _ error: Error?) -> Void)) {
        listSupportedFactorsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/factors/catalog
     - Enumerates all the supported factors that can be enrolled for the specified user
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<[UserFactor]> 
     */
    open class func listSupportedFactorsWithRequestBuilder(userId: String) -> RequestBuilder<[UserFactor]> {
        var path = "/api/v1/users/{userId}/factors/catalog"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[UserFactor]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSupportedSecurityQuestions(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [SecurityQuestion]?, _ error: Error?) -> Void)) {
        listSupportedSecurityQuestionsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/factors/questions
     - Enumerates all available security questions for a user's `question` factor
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<[SecurityQuestion]> 
     */
    open class func listSupportedSecurityQuestionsWithRequestBuilder(userId: String) -> RequestBuilder<[SecurityQuestion]> {
        var path = "/api/v1/users/{userId}/factors/questions"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[SecurityQuestion]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Verify MFA Factor
     
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter templateId: (query)  (optional)
     - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
     - parameter xForwardedFor: (header)  (optional)
     - parameter userAgent: (header)  (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifyFactor(userId: String, factorId: String, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, xForwardedFor: String? = nil, userAgent: String? = nil, acceptLanguage: String? = nil, body: VerifyFactorRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VerifyUserFactorResponse?, _ error: Error?) -> Void)) {
        verifyFactorWithRequestBuilder(userId: userId, factorId: factorId, templateId: templateId, tokenLifetimeSeconds: tokenLifetimeSeconds, xForwardedFor: xForwardedFor, userAgent: userAgent, acceptLanguage: acceptLanguage, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Verify MFA Factor
     - POST /api/v1/users/{userId}/factors/{factorId}/verify
     - Verifies an OTP for a `token` or `token:hardware` factor
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter templateId: (query)  (optional)
     - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
     - parameter xForwardedFor: (header)  (optional)
     - parameter userAgent: (header)  (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<VerifyUserFactorResponse> 
     */
    open class func verifyFactorWithRequestBuilder(userId: String, factorId: String, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, xForwardedFor: String? = nil, userAgent: String? = nil, acceptLanguage: String? = nil, body: VerifyFactorRequest? = nil) -> RequestBuilder<VerifyUserFactorResponse> {
        var path = "/api/v1/users/{userId}/factors/{factorId}/verify"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "templateId": templateId?.encodeToJSON(),
            "tokenLifetimeSeconds": tokenLifetimeSeconds?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            "X-Forwarded-For": xForwardedFor?.encodeToJSON(),
            "User-Agent": userAgent?.encodeToJSON(),
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VerifyUserFactorResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
