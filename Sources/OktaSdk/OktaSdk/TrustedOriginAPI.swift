//
// TrustedOriginAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public struct TrustedOriginAPI {
    internal let configuration: OktaClient.Configuration
    internal let queue: DispatchQueue

    internal init(configuration: OktaClient.Configuration, queue: DispatchQueue) {
        self.configuration = configuration
        self.queue = queue
    }

    /**

     - parameter trustedOriginId: (path)  
     - returns: AnyPublisher<TrustedOrigin, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func activateOrigin(trustedOriginId: String) -> AnyPublisher<TrustedOrigin, Error> {
        return Future<TrustedOrigin, Error>.init { promise in
            activateOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter trustedOriginId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func activateOrigin(trustedOriginId: String, completion: @escaping ((_ result: Swift.Result<TrustedOrigin, Error>) -> Void)) {
        activateOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    public func activateOriginWithRequestBuilder(trustedOriginId: String) -> RequestBuilder<TrustedOrigin> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOrigin: (body)  
     - returns: AnyPublisher<TrustedOrigin, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createOrigin(trustedOrigin: TrustedOrigin) -> AnyPublisher<TrustedOrigin, Error> {
        return Future<TrustedOrigin, Error>.init { promise in
            createOriginWithRequestBuilder(trustedOrigin: trustedOrigin).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter trustedOrigin: (body)  
     - parameter completion: completion handler to receive the result
     */
    func createOrigin(trustedOrigin: TrustedOrigin, completion: @escaping ((_ result: Swift.Result<TrustedOrigin, Error>) -> Void)) {
        createOriginWithRequestBuilder(trustedOrigin: trustedOrigin).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /api/v1/trustedOrigins
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOrigin: (body)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    public func createOriginWithRequestBuilder(trustedOrigin: TrustedOrigin) -> RequestBuilder<TrustedOrigin> {
        let path = "/api/v1/trustedOrigins"
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trustedOrigin)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOriginId: (path)  
     - returns: AnyPublisher<TrustedOrigin, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deactivateOrigin(trustedOriginId: String) -> AnyPublisher<TrustedOrigin, Error> {
        return Future<TrustedOrigin, Error>.init { promise in
            deactivateOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter trustedOriginId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deactivateOrigin(trustedOriginId: String, completion: @escaping ((_ result: Swift.Result<TrustedOrigin, Error>) -> Void)) {
        deactivateOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    public func deactivateOriginWithRequestBuilder(trustedOriginId: String) -> RequestBuilder<TrustedOrigin> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOriginId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deleteOrigin(trustedOriginId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            deleteOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter trustedOriginId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deleteOrigin(trustedOriginId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        deleteOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/trustedOrigins/{trustedOriginId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func deleteOriginWithRequestBuilder(trustedOriginId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOriginId: (path)  
     - returns: AnyPublisher<TrustedOrigin, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getOrigin(trustedOriginId: String) -> AnyPublisher<TrustedOrigin, Error> {
        return Future<TrustedOrigin, Error>.init { promise in
            getOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter trustedOriginId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getOrigin(trustedOriginId: String, completion: @escaping ((_ result: Swift.Result<TrustedOrigin, Error>) -> Void)) {
        getOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/trustedOrigins/{trustedOriginId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    public func getOriginWithRequestBuilder(trustedOriginId: String) -> RequestBuilder<TrustedOrigin> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter q: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - returns: AnyPublisher<[TrustedOrigin], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listOrigins(q: String? = nil, filter: String? = nil, after: String? = nil, limit: Int? = nil) -> AnyPublisher<[TrustedOrigin], Error> {
        return Future<[TrustedOrigin], Error>.init { promise in
            listOriginsWithRequestBuilder(q: q, filter: filter, after: after, limit: limit).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter q: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter completion: completion handler to receive the result
     */
    func listOrigins(q: String? = nil, filter: String? = nil, after: String? = nil, limit: Int? = nil, completion: @escaping ((_ result: Swift.Result<[TrustedOrigin], Error>) -> Void)) {
        listOriginsWithRequestBuilder(q: q, filter: filter, after: after, limit: limit).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/trustedOrigins
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter q: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - returns: RequestBuilder<[TrustedOrigin]> 
     */
    public func listOriginsWithRequestBuilder(q: String? = nil, filter: String? = nil, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[TrustedOrigin]> {
        let path = "/api/v1/trustedOrigins"
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[TrustedOrigin]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOriginId: (path)  
     - parameter trustedOrigin: (body)  
     - returns: AnyPublisher<TrustedOrigin, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateOrigin(trustedOriginId: String, trustedOrigin: TrustedOrigin) -> AnyPublisher<TrustedOrigin, Error> {
        return Future<TrustedOrigin, Error>.init { promise in
            updateOriginWithRequestBuilder(trustedOriginId: trustedOriginId, trustedOrigin: trustedOrigin).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter trustedOriginId: (path)  
     - parameter trustedOrigin: (body)  
     - parameter completion: completion handler to receive the result
     */
    func updateOrigin(trustedOriginId: String, trustedOrigin: TrustedOrigin, completion: @escaping ((_ result: Swift.Result<TrustedOrigin, Error>) -> Void)) {
        updateOriginWithRequestBuilder(trustedOriginId: trustedOriginId, trustedOrigin: trustedOrigin).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - PUT /api/v1/trustedOrigins/{trustedOriginId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - parameter trustedOrigin: (body)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    public func updateOriginWithRequestBuilder(trustedOriginId: String, trustedOrigin: TrustedOrigin) -> RequestBuilder<TrustedOrigin> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trustedOrigin)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
