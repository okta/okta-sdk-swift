//
// UserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public struct UserAPI {
    internal let configuration: OktaClient.Configuration
    internal let queue: DispatchQueue

    internal init(configuration: OktaClient.Configuration, queue: DispatchQueue) {
        self.configuration = configuration
        self.queue = queue
    }

    /**
     Activate User
     
     - parameter userId: (path)  
     - parameter sendEmail: (query) Sends an activation email to the user if true 
     - returns: AnyPublisher<UserActivationToken, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func activateUser(userId: String, sendEmail: Bool) -> AnyPublisher<UserActivationToken, Error> {
        return Future<UserActivationToken, Error>.init { promise in
            activateUserWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Activate User
     
     - parameter userId: (path)  
     - parameter sendEmail: (query) Sends an activation email to the user if true 
     - parameter completion: completion handler to receive the result
     */
    func activateUser(userId: String, sendEmail: Bool, completion: @escaping ((_ result: Swift.Result<UserActivationToken, Error>) -> Void)) {
        activateUserWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Activate User
     - POST /api/v1/users/{userId}/lifecycle/activate
     - Activates a user.  This operation can only be performed on users with a `STAGED` status.  Activation of a user is an asynchronous operation. The user will have the `transitioningToStatus` property with a value of `ACTIVE` during activation to indicate that the user hasn't completed the asynchronous operation.  The user will have a status of `ACTIVE` when the activation process is complete.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter sendEmail: (query) Sends an activation email to the user if true 
     - returns: RequestBuilder<UserActivationToken> 
     */
    public func activateUserWithRequestBuilder(userId: String, sendEmail: Bool) -> RequestBuilder<UserActivationToken> {
        var path = "/api/v1/users/{userId}/lifecycle/activate"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendEmail": sendEmail.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserActivationToken>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func addAllAppsAsTargetToRole(userId: String, roleId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            addAllAppsAsTargetToRoleWithRequestBuilder(userId: userId, roleId: roleId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func addAllAppsAsTargetToRole(userId: String, roleId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        addAllAppsAsTargetToRoleWithRequestBuilder(userId: userId, roleId: roleId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - PUT /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func addAllAppsAsTargetToRoleWithRequestBuilder(userId: String, roleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func addApplicationTargetToAdminRoleForUser(userId: String, roleId: String, appName: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            addApplicationTargetToAdminRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, appName: appName).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter completion: completion handler to receive the result
     */
    func addApplicationTargetToAdminRoleForUser(userId: String, roleId: String, appName: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        addApplicationTargetToAdminRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, appName: appName).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - PUT /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func addApplicationTargetToAdminRoleForUserWithRequestBuilder(userId: String, roleId: String, appName: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appName}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add App Instance Target to App Administrator Role given to a User
     
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func addApplicationTargetToAppAdminRoleForUser(userId: String, roleId: String, appName: String, applicationId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            addApplicationTargetToAppAdminRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, appName: appName, applicationId: applicationId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Add App Instance Target to App Administrator Role given to a User
     
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func addApplicationTargetToAppAdminRoleForUser(userId: String, roleId: String, appName: String, applicationId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        addApplicationTargetToAppAdminRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, appName: appName, applicationId: applicationId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Add App Instance Target to App Administrator Role given to a User
     - PUT /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}
     - Add App Instance Target to App Administrator Role given to a User
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func addApplicationTargetToAppAdminRoleForUserWithRequestBuilder(userId: String, roleId: String, appName: String, applicationId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appName}", with: appNamePostEscape, options: .literal, range: nil)
        let applicationIdPreEscape = "\(APIHelper.mapValueToPathItem(applicationId))"
        let applicationIdPostEscape = applicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{applicationId}", with: applicationIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter groupId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func addGroupTargetToRole(userId: String, roleId: String, groupId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            addGroupTargetToRoleWithRequestBuilder(userId: userId, roleId: roleId, groupId: groupId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter groupId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func addGroupTargetToRole(userId: String, roleId: String, groupId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        addGroupTargetToRoleWithRequestBuilder(userId: userId, roleId: roleId, groupId: groupId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - PUT /api/v1/users/{userId}/roles/{roleId}/targets/groups/{groupId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter groupId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func addGroupTargetToRoleWithRequestBuilder(userId: String, roleId: String, groupId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/roles/{roleId}/targets/groups/{groupId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter assignRoleRequest: (body)  
     - parameter disableNotifications: (query)  (optional)
     - returns: AnyPublisher<Role, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func assignRoleToUser(userId: String, assignRoleRequest: AssignRoleRequest, disableNotifications: String? = nil) -> AnyPublisher<Role, Error> {
        return Future<Role, Error>.init { promise in
            assignRoleToUserWithRequestBuilder(userId: userId, assignRoleRequest: assignRoleRequest, disableNotifications: disableNotifications).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter assignRoleRequest: (body)  
     - parameter disableNotifications: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func assignRoleToUser(userId: String, assignRoleRequest: AssignRoleRequest, disableNotifications: String? = nil, completion: @escaping ((_ result: Swift.Result<Role, Error>) -> Void)) {
        assignRoleToUserWithRequestBuilder(userId: userId, assignRoleRequest: assignRoleRequest, disableNotifications: disableNotifications).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /api/v1/users/{userId}/roles
     - Assigns a role to a user.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter assignRoleRequest: (body)  
     - parameter disableNotifications: (query)  (optional)
     - returns: RequestBuilder<Role> 
     */
    public func assignRoleToUserWithRequestBuilder(userId: String, assignRoleRequest: AssignRoleRequest, disableNotifications: String? = nil) -> RequestBuilder<Role> {
        var path = "/api/v1/users/{userId}/roles"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assignRoleRequest)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "disableNotifications": disableNotifications?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Role>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Change Password
     
     - parameter userId: (path)  
     - parameter changePasswordRequest: (body)  
     - parameter strict: (query)  (optional)
     - returns: AnyPublisher<UserCredentials, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func changePassword(userId: String, changePasswordRequest: ChangePasswordRequest, strict: Bool? = nil) -> AnyPublisher<UserCredentials, Error> {
        return Future<UserCredentials, Error>.init { promise in
            changePasswordWithRequestBuilder(userId: userId, changePasswordRequest: changePasswordRequest, strict: strict).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Change Password
     
     - parameter userId: (path)  
     - parameter changePasswordRequest: (body)  
     - parameter strict: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func changePassword(userId: String, changePasswordRequest: ChangePasswordRequest, strict: Bool? = nil, completion: @escaping ((_ result: Swift.Result<UserCredentials, Error>) -> Void)) {
        changePasswordWithRequestBuilder(userId: userId, changePasswordRequest: changePasswordRequest, strict: strict).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Change Password
     - POST /api/v1/users/{userId}/credentials/change_password
     - Changes a user's password by validating the user's current password. This operation can only be performed on users in `STAGED`, `ACTIVE`, `PASSWORD_EXPIRED`, or `RECOVERY` status that have a valid password credential
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter changePasswordRequest: (body)  
     - parameter strict: (query)  (optional)
     - returns: RequestBuilder<UserCredentials> 
     */
    public func changePasswordWithRequestBuilder(userId: String, changePasswordRequest: ChangePasswordRequest, strict: Bool? = nil) -> RequestBuilder<UserCredentials> {
        var path = "/api/v1/users/{userId}/credentials/change_password"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changePasswordRequest)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "strict": strict?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserCredentials>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Change Recovery Question
     
     - parameter userId: (path)  
     - parameter userCredentials: (body)  
     - returns: AnyPublisher<UserCredentials, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func changeRecoveryQuestion(userId: String, userCredentials: UserCredentials) -> AnyPublisher<UserCredentials, Error> {
        return Future<UserCredentials, Error>.init { promise in
            changeRecoveryQuestionWithRequestBuilder(userId: userId, userCredentials: userCredentials).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Change Recovery Question
     
     - parameter userId: (path)  
     - parameter userCredentials: (body)  
     - parameter completion: completion handler to receive the result
     */
    func changeRecoveryQuestion(userId: String, userCredentials: UserCredentials, completion: @escaping ((_ result: Swift.Result<UserCredentials, Error>) -> Void)) {
        changeRecoveryQuestionWithRequestBuilder(userId: userId, userCredentials: userCredentials).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Change Recovery Question
     - POST /api/v1/users/{userId}/credentials/change_recovery_question
     - Changes a user's recovery question & answer credential by validating the user's current password.  This operation can only be performed on users in **STAGED**, **ACTIVE** or **RECOVERY** `status` that have a valid password credential
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter userCredentials: (body)  
     - returns: RequestBuilder<UserCredentials> 
     */
    public func changeRecoveryQuestionWithRequestBuilder(userId: String, userCredentials: UserCredentials) -> RequestBuilder<UserCredentials> {
        var path = "/api/v1/users/{userId}/credentials/change_recovery_question"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userCredentials)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserCredentials>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter oauthTokens: (query) Revoke issued OpenID Connect and OAuth refresh and access tokens (optional, default to false)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func clearUserSessions(userId: String, oauthTokens: Bool? = nil) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            clearUserSessionsWithRequestBuilder(userId: userId, oauthTokens: oauthTokens).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter oauthTokens: (query) Revoke issued OpenID Connect and OAuth refresh and access tokens (optional, default to false)
     - parameter completion: completion handler to receive the result
     */
    func clearUserSessions(userId: String, oauthTokens: Bool? = nil, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        clearUserSessionsWithRequestBuilder(userId: userId, oauthTokens: oauthTokens).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/sessions
     - Removes all active identity provider sessions. This forces the user to authenticate on the next operation. Optionally revokes OpenID Connect and OAuth refresh and access tokens issued to the user.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter oauthTokens: (query) Revoke issued OpenID Connect and OAuth refresh and access tokens (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    public func clearUserSessionsWithRequestBuilder(userId: String, oauthTokens: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/sessions"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "oauthTokens": oauthTokens?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create User
     
     - parameter body: (body)  
     - parameter activate: (query) Executes activation lifecycle operation when creating the user (optional, default to true)
     - parameter provider: (query) Indicates whether to create a user with a specified authentication provider (optional, default to false)
     - parameter nextLogin: (query) With activate&#x3D;true, set nextLogin to \&quot;changePassword\&quot; to have the password be EXPIRED, so user must change it the next time they log in. (optional)
     - returns: AnyPublisher<User, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createUser(body: CreateUserRequest, activate: Bool? = nil, provider: Bool? = nil, nextLogin: String? = nil) -> AnyPublisher<User, Error> {
        return Future<User, Error>.init { promise in
            createUserWithRequestBuilder(body: body, activate: activate, provider: provider, nextLogin: nextLogin).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Create User
     
     - parameter body: (body)  
     - parameter activate: (query) Executes activation lifecycle operation when creating the user (optional, default to true)
     - parameter provider: (query) Indicates whether to create a user with a specified authentication provider (optional, default to false)
     - parameter nextLogin: (query) With activate&#x3D;true, set nextLogin to \&quot;changePassword\&quot; to have the password be EXPIRED, so user must change it the next time they log in. (optional)
     - parameter completion: completion handler to receive the result
     */
    func createUser(body: CreateUserRequest, activate: Bool? = nil, provider: Bool? = nil, nextLogin: String? = nil, completion: @escaping ((_ result: Swift.Result<User, Error>) -> Void)) {
        createUserWithRequestBuilder(body: body, activate: activate, provider: provider, nextLogin: nextLogin).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create User
     - POST /api/v1/users
     - Creates a new user in your Okta organization with or without credentials.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter body: (body)  
     - parameter activate: (query) Executes activation lifecycle operation when creating the user (optional, default to true)
     - parameter provider: (query) Indicates whether to create a user with a specified authentication provider (optional, default to false)
     - parameter nextLogin: (query) With activate&#x3D;true, set nextLogin to \&quot;changePassword\&quot; to have the password be EXPIRED, so user must change it the next time they log in. (optional)
     - returns: RequestBuilder<User> 
     */
    public func createUserWithRequestBuilder(body: CreateUserRequest, activate: Bool? = nil, provider: Bool? = nil, nextLogin: String? = nil) -> RequestBuilder<User> {
        let path = "/api/v1/users"
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "activate": activate?.encodeToJSON(),
            "provider": provider?.encodeToJSON(),
            "nextLogin": nextLogin?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<User>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete User
     
     - parameter userId: (path)  
     - parameter sendEmail: (query)  (optional, default to false)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deactivateOrDeleteUser(userId: String, sendEmail: Bool? = nil) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            deactivateOrDeleteUserWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Delete User
     
     - parameter userId: (path)  
     - parameter sendEmail: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the result
     */
    func deactivateOrDeleteUser(userId: String, sendEmail: Bool? = nil, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        deactivateOrDeleteUserWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Delete User
     - DELETE /api/v1/users/{userId}
     - Deletes a user permanently.  This operation can only be performed on users that have a `DEPROVISIONED` status.  **This action cannot be recovered!**
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter sendEmail: (query)  (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    public func deactivateOrDeleteUserWithRequestBuilder(userId: String, sendEmail: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendEmail": sendEmail?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Deactivate User
     
     - parameter userId: (path)  
     - parameter sendEmail: (query)  (optional, default to false)
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deactivateUser(userId: String, sendEmail: Bool? = nil) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            deactivateUserWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Deactivate User
     
     - parameter userId: (path)  
     - parameter sendEmail: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the result
     */
    func deactivateUser(userId: String, sendEmail: Bool? = nil, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        deactivateUserWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Deactivate User
     - POST /api/v1/users/{userId}/lifecycle/deactivate
     - Deactivates a user.  This operation can only be performed on users that do not have a `DEPROVISIONED` status.  Deactivation of a user is an asynchronous operation.  The user will have the `transitioningToStatus` property with a value of `DEPROVISIONED` during deactivation to indicate that the user hasn't completed the asynchronous operation.  The user will have a status of `DEPROVISIONED` when the deactivation process is complete.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter sendEmail: (query)  (optional, default to false)
     - returns: RequestBuilder<Void> 
     */
    public func deactivateUserWithRequestBuilder(userId: String, sendEmail: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/lifecycle/deactivate"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendEmail": sendEmail?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Expire Password
     
     - parameter userId: (path)  
     - parameter tempPassword: (query) When set to &#39;true&#39; the user&#39;s password is reset to a temporary password that is returned. When omitted or set to &#39;false&#39; the user will be required to change their password at their next login. (optional, default to false)
     - returns: AnyPublisher<User, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func expirePassword(userId: String, tempPassword: Bool? = nil) -> AnyPublisher<User, Error> {
        return Future<User, Error>.init { promise in
            expirePasswordWithRequestBuilder(userId: userId, tempPassword: tempPassword).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Expire Password
     
     - parameter userId: (path)  
     - parameter tempPassword: (query) When set to &#39;true&#39; the user&#39;s password is reset to a temporary password that is returned. When omitted or set to &#39;false&#39; the user will be required to change their password at their next login. (optional, default to false)
     - parameter completion: completion handler to receive the result
     */
    func expirePassword(userId: String, tempPassword: Bool? = nil, completion: @escaping ((_ result: Swift.Result<User, Error>) -> Void)) {
        expirePasswordWithRequestBuilder(userId: userId, tempPassword: tempPassword).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Expire Password
     - POST /api/v1/users/{userId}/lifecycle/expire_password
     - This operation transitions the user to the status of `PASSWORD_EXPIRED` so that the user is required to change their password at their next login.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter tempPassword: (query) When set to &#39;true&#39; the user&#39;s password is reset to a temporary password that is returned. When omitted or set to &#39;false&#39; the user will be required to change their password at their next login. (optional, default to false)
     - returns: RequestBuilder<User> 
     */
    public func expirePasswordWithRequestBuilder(userId: String, tempPassword: Bool? = nil) -> RequestBuilder<User> {
        var path = "/api/v1/users/{userId}/lifecycle/expire_password"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tempPassword": tempPassword?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<User>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Forgot Password
     
     - parameter userId: (path)  
     - parameter sendEmail: (query) Determines whether an email is sent to the user. This only applies when &#39;user&#39; is not provided in the request body. (optional, default to true)
     - parameter userCredentials: (body) Factor (optional)
     - returns: AnyPublisher<ForgotPasswordResponse, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func forgotPassword(userId: String, sendEmail: Bool? = nil, userCredentials: UserCredentials? = nil) -> AnyPublisher<ForgotPasswordResponse, Error> {
        return Future<ForgotPasswordResponse, Error>.init { promise in
            forgotPasswordWithRequestBuilder(userId: userId, sendEmail: sendEmail, userCredentials: userCredentials).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Forgot Password
     
     - parameter userId: (path)  
     - parameter sendEmail: (query) Determines whether an email is sent to the user. This only applies when &#39;user&#39; is not provided in the request body. (optional, default to true)
     - parameter userCredentials: (body) Factor (optional)
     - parameter completion: completion handler to receive the result
     */
    func forgotPassword(userId: String, sendEmail: Bool? = nil, userCredentials: UserCredentials? = nil, completion: @escaping ((_ result: Swift.Result<ForgotPasswordResponse, Error>) -> Void)) {
        forgotPasswordWithRequestBuilder(userId: userId, sendEmail: sendEmail, userCredentials: userCredentials).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Forgot Password
     - POST /api/v1/users/{userId}/credentials/forgot_password
     - Initiate forgot password flow, see desciptions for parameters.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter sendEmail: (query) Determines whether an email is sent to the user. This only applies when &#39;user&#39; is not provided in the request body. (optional, default to true)
     - parameter userCredentials: (body) Factor (optional)
     - returns: RequestBuilder<ForgotPasswordResponse> 
     */
    public func forgotPasswordWithRequestBuilder(userId: String, sendEmail: Bool? = nil, userCredentials: UserCredentials? = nil) -> RequestBuilder<ForgotPasswordResponse> {
        var path = "/api/v1/users/{userId}/credentials/forgot_password"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userCredentials)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendEmail": sendEmail?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<ForgotPasswordResponse>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter relationshipName: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - returns: AnyPublisher<[AnyCodable], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getLinkedObjectsForUser(userId: String, relationshipName: String, after: String? = nil, limit: Int? = nil) -> AnyPublisher<[AnyCodable], Error> {
        return Future<[AnyCodable], Error>.init { promise in
            getLinkedObjectsForUserWithRequestBuilder(userId: userId, relationshipName: relationshipName, after: after, limit: limit).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter relationshipName: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter completion: completion handler to receive the result
     */
    func getLinkedObjectsForUser(userId: String, relationshipName: String, after: String? = nil, limit: Int? = nil, completion: @escaping ((_ result: Swift.Result<[AnyCodable], Error>) -> Void)) {
        getLinkedObjectsForUserWithRequestBuilder(userId: userId, relationshipName: relationshipName, after: after, limit: limit).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/linkedObjects/{relationshipName}
     - Get linked objects for a user, relationshipName can be a primary or associated relationship name
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter relationshipName: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - returns: RequestBuilder<[AnyCodable]> 
     */
    public func getLinkedObjectsForUserWithRequestBuilder(userId: String, relationshipName: String, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[AnyCodable]> {
        var path = "/api/v1/users/{userId}/linkedObjects/{relationshipName}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let relationshipNamePreEscape = "\(APIHelper.mapValueToPathItem(relationshipName))"
        let relationshipNamePostEscape = relationshipNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relationshipName}", with: relationshipNamePostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[AnyCodable]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - parameter expand: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter after: (query)  (optional)
     - returns: AnyPublisher<OAuth2RefreshToken, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getRefreshTokenForUserAndClient(userId: String, clientId: String, tokenId: String, expand: String? = nil, limit: Int? = nil, after: String? = nil) -> AnyPublisher<OAuth2RefreshToken, Error> {
        return Future<OAuth2RefreshToken, Error>.init { promise in
            getRefreshTokenForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId, tokenId: tokenId, expand: expand, limit: limit, after: after).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - parameter expand: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter after: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func getRefreshTokenForUserAndClient(userId: String, clientId: String, tokenId: String, expand: String? = nil, limit: Int? = nil, after: String? = nil, completion: @escaping ((_ result: Swift.Result<OAuth2RefreshToken, Error>) -> Void)) {
        getRefreshTokenForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId, tokenId: tokenId, expand: expand, limit: limit, after: after).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}
     - Gets a refresh token issued for the specified User and Client.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - parameter expand: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter after: (query)  (optional)
     - returns: RequestBuilder<OAuth2RefreshToken> 
     */
    public func getRefreshTokenForUserAndClientWithRequestBuilder(userId: String, clientId: String, tokenId: String, expand: String? = nil, limit: Int? = nil, after: String? = nil) -> RequestBuilder<OAuth2RefreshToken> {
        var path = "/api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "after": after?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<OAuth2RefreshToken>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get User
     
     - parameter userId: (path)  
     - returns: AnyPublisher<User, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getUser(userId: String) -> AnyPublisher<User, Error> {
        return Future<User, Error>.init { promise in
            getUserWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Get User
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getUser(userId: String, completion: @escaping ((_ result: Swift.Result<User, Error>) -> Void)) {
        getUserWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get User
     - GET /api/v1/users/{userId}
     - Fetches a user from your Okta organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<User> 
     */
    public func getUserWithRequestBuilder(userId: String) -> RequestBuilder<User> {
        var path = "/api/v1/users/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<User>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter grantId: (path)  
     - parameter expand: (query)  (optional)
     - returns: AnyPublisher<OAuth2ScopeConsentGrant, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getUserGrant(userId: String, grantId: String, expand: String? = nil) -> AnyPublisher<OAuth2ScopeConsentGrant, Error> {
        return Future<OAuth2ScopeConsentGrant, Error>.init { promise in
            getUserGrantWithRequestBuilder(userId: userId, grantId: grantId, expand: expand).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter grantId: (path)  
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func getUserGrant(userId: String, grantId: String, expand: String? = nil, completion: @escaping ((_ result: Swift.Result<OAuth2ScopeConsentGrant, Error>) -> Void)) {
        getUserGrantWithRequestBuilder(userId: userId, grantId: grantId, expand: expand).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/grants/{grantId}
     - Gets a grant for the specified user
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter grantId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<OAuth2ScopeConsentGrant> 
     */
    public func getUserGrantWithRequestBuilder(userId: String, grantId: String, expand: String? = nil) -> RequestBuilder<OAuth2ScopeConsentGrant> {
        var path = "/api/v1/users/{userId}/grants/{grantId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let grantIdPreEscape = "\(APIHelper.mapValueToPathItem(grantId))"
        let grantIdPostEscape = grantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{grantId}", with: grantIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<OAuth2ScopeConsentGrant>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Assigned App Links
     
     - parameter userId: (path)  
     - returns: AnyPublisher<[AppLink], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listAppLinks(userId: String) -> AnyPublisher<[AppLink], Error> {
        return Future<[AppLink], Error>.init { promise in
            listAppLinksWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Get Assigned App Links
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listAppLinks(userId: String, completion: @escaping ((_ result: Swift.Result<[AppLink], Error>) -> Void)) {
        listAppLinksWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Assigned App Links
     - GET /api/v1/users/{userId}/appLinks
     - Fetches appLinks for all direct or indirect (via group membership) assigned applications.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<[AppLink]> 
     */
    public func listAppLinksWithRequestBuilder(userId: String) -> RequestBuilder<[AppLink]> {
        var path = "/api/v1/users/{userId}/appLinks"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[AppLink]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: AnyPublisher<[CatalogApplication], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listApplicationTargetsForApplicationAdministratorRoleForUser(userId: String, roleId: String, after: String? = nil, limit: Int? = nil) -> AnyPublisher<[CatalogApplication], Error> {
        return Future<[CatalogApplication], Error>.init { promise in
            listApplicationTargetsForApplicationAdministratorRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, after: after, limit: limit).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter completion: completion handler to receive the result
     */
    func listApplicationTargetsForApplicationAdministratorRoleForUser(userId: String, roleId: String, after: String? = nil, limit: Int? = nil, completion: @escaping ((_ result: Swift.Result<[CatalogApplication], Error>) -> Void)) {
        listApplicationTargetsForApplicationAdministratorRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, after: after, limit: limit).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps
     - Lists all App targets for an `APP_ADMIN` Role assigned to a User. This methods return list may include full Applications or Instances. The response for an instance will have an `ID` value, while Application will not have an ID.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: RequestBuilder<[CatalogApplication]> 
     */
    public func listApplicationTargetsForApplicationAdministratorRoleForUserWithRequestBuilder(userId: String, roleId: String, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[CatalogApplication]> {
        var path = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[CatalogApplication]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter expand: (query)  (optional)
     - returns: AnyPublisher<[Role], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listAssignedRolesForUser(userId: String, expand: String? = nil) -> AnyPublisher<[Role], Error> {
        return Future<[Role], Error>.init { promise in
            listAssignedRolesForUserWithRequestBuilder(userId: userId, expand: expand).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func listAssignedRolesForUser(userId: String, expand: String? = nil, completion: @escaping ((_ result: Swift.Result<[Role], Error>) -> Void)) {
        listAssignedRolesForUserWithRequestBuilder(userId: userId, expand: expand).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/roles
     - Lists all roles assigned to a user.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<[Role]> 
     */
    public func listAssignedRolesForUserWithRequestBuilder(userId: String, expand: String? = nil) -> RequestBuilder<[Role]> {
        var path = "/api/v1/users/{userId}/roles"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[Role]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: AnyPublisher<[OAuth2ScopeConsentGrant], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listGrantsForUserAndClient(userId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) -> AnyPublisher<[OAuth2ScopeConsentGrant], Error> {
        return Future<[OAuth2ScopeConsentGrant], Error>.init { promise in
            listGrantsForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId, expand: expand, after: after, limit: limit).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter completion: completion handler to receive the result
     */
    func listGrantsForUserAndClient(userId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil, completion: @escaping ((_ result: Swift.Result<[OAuth2ScopeConsentGrant], Error>) -> Void)) {
        listGrantsForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId, expand: expand, after: after, limit: limit).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/clients/{clientId}/grants
     - Lists all grants for a specified user and client
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: RequestBuilder<[OAuth2ScopeConsentGrant]> 
     */
    public func listGrantsForUserAndClientWithRequestBuilder(userId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[OAuth2ScopeConsentGrant]> {
        var path = "/api/v1/users/{userId}/clients/{clientId}/grants"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[OAuth2ScopeConsentGrant]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: AnyPublisher<[Group], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listGroupTargetsForRole(userId: String, roleId: String, after: String? = nil, limit: Int? = nil) -> AnyPublisher<[Group], Error> {
        return Future<[Group], Error>.init { promise in
            listGroupTargetsForRoleWithRequestBuilder(userId: userId, roleId: roleId, after: after, limit: limit).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter completion: completion handler to receive the result
     */
    func listGroupTargetsForRole(userId: String, roleId: String, after: String? = nil, limit: Int? = nil, completion: @escaping ((_ result: Swift.Result<[Group], Error>) -> Void)) {
        listGroupTargetsForRoleWithRequestBuilder(userId: userId, roleId: roleId, after: after, limit: limit).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/roles/{roleId}/targets/groups
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: RequestBuilder<[Group]> 
     */
    public func listGroupTargetsForRoleWithRequestBuilder(userId: String, roleId: String, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[Group]> {
        var path = "/api/v1/users/{userId}/roles/{roleId}/targets/groups"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[Group]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: AnyPublisher<[OAuth2RefreshToken], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listRefreshTokensForUserAndClient(userId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) -> AnyPublisher<[OAuth2RefreshToken], Error> {
        return Future<[OAuth2RefreshToken], Error>.init { promise in
            listRefreshTokensForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId, expand: expand, after: after, limit: limit).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter completion: completion handler to receive the result
     */
    func listRefreshTokensForUserAndClient(userId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil, completion: @escaping ((_ result: Swift.Result<[OAuth2RefreshToken], Error>) -> Void)) {
        listRefreshTokensForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId, expand: expand, after: after, limit: limit).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/clients/{clientId}/tokens
     - Lists all refresh tokens issued for the specified User and Client.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: RequestBuilder<[OAuth2RefreshToken]> 
     */
    public func listRefreshTokensForUserAndClientWithRequestBuilder(userId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[OAuth2RefreshToken]> {
        var path = "/api/v1/users/{userId}/clients/{clientId}/tokens"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[OAuth2RefreshToken]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - returns: AnyPublisher<[OAuth2Client], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listUserClients(userId: String) -> AnyPublisher<[OAuth2Client], Error> {
        return Future<[OAuth2Client], Error>.init { promise in
            listUserClientsWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listUserClients(userId: String, completion: @escaping ((_ result: Swift.Result<[OAuth2Client], Error>) -> Void)) {
        listUserClientsWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/clients
     - Lists all client resources for which the specified user has grants or tokens.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<[OAuth2Client]> 
     */
    public func listUserClientsWithRequestBuilder(userId: String) -> RequestBuilder<[OAuth2Client]> {
        var path = "/api/v1/users/{userId}/clients"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[OAuth2Client]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter scopeId: (query)  (optional)
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: AnyPublisher<[OAuth2ScopeConsentGrant], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listUserGrants(userId: String, scopeId: String? = nil, expand: String? = nil, after: String? = nil, limit: Int? = nil) -> AnyPublisher<[OAuth2ScopeConsentGrant], Error> {
        return Future<[OAuth2ScopeConsentGrant], Error>.init { promise in
            listUserGrantsWithRequestBuilder(userId: userId, scopeId: scopeId, expand: expand, after: after, limit: limit).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter scopeId: (query)  (optional)
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - parameter completion: completion handler to receive the result
     */
    func listUserGrants(userId: String, scopeId: String? = nil, expand: String? = nil, after: String? = nil, limit: Int? = nil, completion: @escaping ((_ result: Swift.Result<[OAuth2ScopeConsentGrant], Error>) -> Void)) {
        listUserGrantsWithRequestBuilder(userId: userId, scopeId: scopeId, expand: expand, after: after, limit: limit).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/users/{userId}/grants
     - Lists all grants for the specified user
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter scopeId: (query)  (optional)
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20)
     - returns: RequestBuilder<[OAuth2ScopeConsentGrant]> 
     */
    public func listUserGrantsWithRequestBuilder(userId: String, scopeId: String? = nil, expand: String? = nil, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[OAuth2ScopeConsentGrant]> {
        var path = "/api/v1/users/{userId}/grants"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "scopeId": scopeId?.encodeToJSON(),
            "expand": expand?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[OAuth2ScopeConsentGrant]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Member Groups
     
     - parameter userId: (path)  
     - returns: AnyPublisher<[Group], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listUserGroups(userId: String) -> AnyPublisher<[Group], Error> {
        return Future<[Group], Error>.init { promise in
            listUserGroupsWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Get Member Groups
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listUserGroups(userId: String, completion: @escaping ((_ result: Swift.Result<[Group], Error>) -> Void)) {
        listUserGroupsWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Member Groups
     - GET /api/v1/users/{userId}/groups
     - Fetches the groups of which the user is a member.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<[Group]> 
     */
    public func listUserGroupsWithRequestBuilder(userId: String) -> RequestBuilder<[Group]> {
        var path = "/api/v1/users/{userId}/groups"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[Group]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Listing IdPs associated with a user
     
     - parameter userId: (path)  
     - returns: AnyPublisher<[IdentityProvider], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listUserIdentityProviders(userId: String) -> AnyPublisher<[IdentityProvider], Error> {
        return Future<[IdentityProvider], Error>.init { promise in
            listUserIdentityProvidersWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Listing IdPs associated with a user
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listUserIdentityProviders(userId: String, completion: @escaping ((_ result: Swift.Result<[IdentityProvider], Error>) -> Void)) {
        listUserIdentityProvidersWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Listing IdPs associated with a user
     - GET /api/v1/users/{userId}/idps
     - Lists the IdPs associated with the user.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<[IdentityProvider]> 
     */
    public func listUserIdentityProvidersWithRequestBuilder(userId: String) -> RequestBuilder<[IdentityProvider]> {
        var path = "/api/v1/users/{userId}/idps"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[IdentityProvider]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Users
     
     - parameter q: (query) Finds a user that matches firstName, lastName, and email properties (optional)
     - parameter after: (query) Specifies the pagination cursor for the next page of users (optional)
     - parameter limit: (query) Specifies the number of results returned (optional, default to 10)
     - parameter filter: (query) Filters users with a supported expression for a subset of properties (optional)
     - parameter search: (query) Searches for users with a supported filtering  expression for most properties (optional)
     - parameter sortBy: (query)  (optional)
     - parameter sortOrder: (query)  (optional)
     - returns: AnyPublisher<[User], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listUsers(q: String? = nil, after: String? = nil, limit: Int? = nil, filter: String? = nil, search: String? = nil, sortBy: String? = nil, sortOrder: String? = nil) -> AnyPublisher<[User], Error> {
        return Future<[User], Error>.init { promise in
            listUsersWithRequestBuilder(q: q, after: after, limit: limit, filter: filter, search: search, sortBy: sortBy, sortOrder: sortOrder).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     List Users
     
     - parameter q: (query) Finds a user that matches firstName, lastName, and email properties (optional)
     - parameter after: (query) Specifies the pagination cursor for the next page of users (optional)
     - parameter limit: (query) Specifies the number of results returned (optional, default to 10)
     - parameter filter: (query) Filters users with a supported expression for a subset of properties (optional)
     - parameter search: (query) Searches for users with a supported filtering  expression for most properties (optional)
     - parameter sortBy: (query)  (optional)
     - parameter sortOrder: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func listUsers(q: String? = nil, after: String? = nil, limit: Int? = nil, filter: String? = nil, search: String? = nil, sortBy: String? = nil, sortOrder: String? = nil, completion: @escaping ((_ result: Swift.Result<[User], Error>) -> Void)) {
        listUsersWithRequestBuilder(q: q, after: after, limit: limit, filter: filter, search: search, sortBy: sortBy, sortOrder: sortOrder).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List Users
     - GET /api/v1/users
     - Lists users in your organization with pagination in most cases.  A subset of users can be returned that match a supported filter expression or search criteria.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter q: (query) Finds a user that matches firstName, lastName, and email properties (optional)
     - parameter after: (query) Specifies the pagination cursor for the next page of users (optional)
     - parameter limit: (query) Specifies the number of results returned (optional, default to 10)
     - parameter filter: (query) Filters users with a supported expression for a subset of properties (optional)
     - parameter search: (query) Searches for users with a supported filtering  expression for most properties (optional)
     - parameter sortBy: (query)  (optional)
     - parameter sortOrder: (query)  (optional)
     - returns: RequestBuilder<[User]> 
     */
    public func listUsersWithRequestBuilder(q: String? = nil, after: String? = nil, limit: Int? = nil, filter: String? = nil, search: String? = nil, sortBy: String? = nil, sortOrder: String? = nil) -> RequestBuilder<[User]> {
        let path = "/api/v1/users"
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "sortBy": sortBy?.encodeToJSON(),
            "sortOrder": sortOrder?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[User]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter user: (body)  
     - parameter strict: (query)  (optional)
     - returns: AnyPublisher<User, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func partialUpdateUser(userId: String, user: User, strict: Bool? = nil) -> AnyPublisher<User, Error> {
        return Future<User, Error>.init { promise in
            partialUpdateUserWithRequestBuilder(userId: userId, user: user, strict: strict).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter user: (body)  
     - parameter strict: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func partialUpdateUser(userId: String, user: User, strict: Bool? = nil, completion: @escaping ((_ result: Swift.Result<User, Error>) -> Void)) {
        partialUpdateUserWithRequestBuilder(userId: userId, user: user, strict: strict).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /api/v1/users/{userId}
     - Fetch a user by `id`, `login`, or `login shortname` if the short name is unambiguous.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter user: (body)  
     - parameter strict: (query)  (optional)
     - returns: RequestBuilder<User> 
     */
    public func partialUpdateUserWithRequestBuilder(userId: String, user: User, strict: Bool? = nil) -> RequestBuilder<User> {
        var path = "/api/v1/users/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "strict": strict?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<User>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Reactivate User
     
     - parameter userId: (path)  
     - parameter sendEmail: (query) Sends an activation email to the user if true (optional, default to false)
     - returns: AnyPublisher<UserActivationToken, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func reactivateUser(userId: String, sendEmail: Bool? = nil) -> AnyPublisher<UserActivationToken, Error> {
        return Future<UserActivationToken, Error>.init { promise in
            reactivateUserWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Reactivate User
     
     - parameter userId: (path)  
     - parameter sendEmail: (query) Sends an activation email to the user if true (optional, default to false)
     - parameter completion: completion handler to receive the result
     */
    func reactivateUser(userId: String, sendEmail: Bool? = nil, completion: @escaping ((_ result: Swift.Result<UserActivationToken, Error>) -> Void)) {
        reactivateUserWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Reactivate User
     - POST /api/v1/users/{userId}/lifecycle/reactivate
     - Reactivates a user.  This operation can only be performed on users with a `PROVISIONED` status.  This operation restarts the activation workflow if for some reason the user activation was not completed when using the activationToken from [Activate User](#activate-user).
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter sendEmail: (query) Sends an activation email to the user if true (optional, default to false)
     - returns: RequestBuilder<UserActivationToken> 
     */
    public func reactivateUserWithRequestBuilder(userId: String, sendEmail: Bool? = nil) -> RequestBuilder<UserActivationToken> {
        var path = "/api/v1/users/{userId}/lifecycle/reactivate"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendEmail": sendEmail?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserActivationToken>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove App Instance Target to App Administrator Role given to a User
     
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func removeApplicationTargetFromAdministratorRoleForUser(userId: String, roleId: String, appName: String, applicationId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            removeApplicationTargetFromAdministratorRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, appName: appName, applicationId: applicationId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Remove App Instance Target to App Administrator Role given to a User
     
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func removeApplicationTargetFromAdministratorRoleForUser(userId: String, roleId: String, appName: String, applicationId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        removeApplicationTargetFromAdministratorRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, appName: appName, applicationId: applicationId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Remove App Instance Target to App Administrator Role given to a User
     - DELETE /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}
     - Remove App Instance Target to App Administrator Role given to a User
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter applicationId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func removeApplicationTargetFromAdministratorRoleForUserWithRequestBuilder(userId: String, roleId: String, appName: String, applicationId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appName}", with: appNamePostEscape, options: .literal, range: nil)
        let applicationIdPreEscape = "\(APIHelper.mapValueToPathItem(applicationId))"
        let applicationIdPostEscape = applicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{applicationId}", with: applicationIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func removeApplicationTargetFromApplicationAdministratorRoleForUser(userId: String, roleId: String, appName: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            removeApplicationTargetFromApplicationAdministratorRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, appName: appName).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - parameter completion: completion handler to receive the result
     */
    func removeApplicationTargetFromApplicationAdministratorRoleForUser(userId: String, roleId: String, appName: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        removeApplicationTargetFromApplicationAdministratorRoleForUserWithRequestBuilder(userId: userId, roleId: roleId, appName: appName).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter appName: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func removeApplicationTargetFromApplicationAdministratorRoleForUserWithRequestBuilder(userId: String, roleId: String, appName: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let appNamePreEscape = "\(APIHelper.mapValueToPathItem(appName))"
        let appNamePostEscape = appNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appName}", with: appNamePostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter groupId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func removeGroupTargetFromRole(userId: String, roleId: String, groupId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            removeGroupTargetFromRoleWithRequestBuilder(userId: userId, roleId: roleId, groupId: groupId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter groupId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func removeGroupTargetFromRole(userId: String, roleId: String, groupId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        removeGroupTargetFromRoleWithRequestBuilder(userId: userId, roleId: roleId, groupId: groupId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/roles/{roleId}/targets/groups/{groupId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter groupId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func removeGroupTargetFromRoleWithRequestBuilder(userId: String, roleId: String, groupId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/roles/{roleId}/targets/groups/{groupId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(APIHelper.mapValueToPathItem(groupId))"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter relationshipName: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func removeLinkedObjectForUser(userId: String, relationshipName: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            removeLinkedObjectForUserWithRequestBuilder(userId: userId, relationshipName: relationshipName).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter relationshipName: (path)  
     - parameter completion: completion handler to receive the result
     */
    func removeLinkedObjectForUser(userId: String, relationshipName: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        removeLinkedObjectForUserWithRequestBuilder(userId: userId, relationshipName: relationshipName).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/linkedObjects/{relationshipName}
     - Delete linked objects for a user, relationshipName can be ONLY a primary relationship name
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter relationshipName: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func removeLinkedObjectForUserWithRequestBuilder(userId: String, relationshipName: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/linkedObjects/{relationshipName}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let relationshipNamePreEscape = "\(APIHelper.mapValueToPathItem(relationshipName))"
        let relationshipNamePostEscape = relationshipNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{relationshipName}", with: relationshipNamePostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func removeRoleFromUser(userId: String, roleId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            removeRoleFromUserWithRequestBuilder(userId: userId, roleId: roleId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter roleId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func removeRoleFromUser(userId: String, roleId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        removeRoleFromUserWithRequestBuilder(userId: userId, roleId: roleId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/roles/{roleId}
     - Unassigns a role from a user.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter roleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func removeRoleFromUserWithRequestBuilder(userId: String, roleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/roles/{roleId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let roleIdPreEscape = "\(APIHelper.mapValueToPathItem(roleId))"
        let roleIdPostEscape = roleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{roleId}", with: roleIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Reset Factors
     
     - parameter userId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func resetFactors(userId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            resetFactorsWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Reset Factors
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func resetFactors(userId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        resetFactorsWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Reset Factors
     - POST /api/v1/users/{userId}/lifecycle/reset_factors
     - This operation resets all factors for the specified user. All MFA factor enrollments returned to the unenrolled state. The user's status remains ACTIVE. This link is present only if the user is currently enrolled in one or more MFA factors.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func resetFactorsWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/lifecycle/reset_factors"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Reset Password
     
     - parameter userId: (path)  
     - parameter sendEmail: (query)  
     - returns: AnyPublisher<ResetPasswordToken, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func resetPassword(userId: String, sendEmail: Bool) -> AnyPublisher<ResetPasswordToken, Error> {
        return Future<ResetPasswordToken, Error>.init { promise in
            resetPasswordWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Reset Password
     
     - parameter userId: (path)  
     - parameter sendEmail: (query)  
     - parameter completion: completion handler to receive the result
     */
    func resetPassword(userId: String, sendEmail: Bool, completion: @escaping ((_ result: Swift.Result<ResetPasswordToken, Error>) -> Void)) {
        resetPasswordWithRequestBuilder(userId: userId, sendEmail: sendEmail).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Reset Password
     - POST /api/v1/users/{userId}/lifecycle/reset_password
     - Generates a one-time token (OTT) that can be used to reset a user's password.  The OTT link can be automatically emailed to the user or returned to the API caller and distributed using a custom flow.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter sendEmail: (query)  
     - returns: RequestBuilder<ResetPasswordToken> 
     */
    public func resetPasswordWithRequestBuilder(userId: String, sendEmail: Bool) -> RequestBuilder<ResetPasswordToken> {
        var path = "/api/v1/users/{userId}/lifecycle/reset_password"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sendEmail": sendEmail.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<ResetPasswordToken>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func revokeGrantsForUserAndClient(userId: String, clientId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            revokeGrantsForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func revokeGrantsForUserAndClient(userId: String, clientId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        revokeGrantsForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/clients/{clientId}/grants
     - Revokes all grants for the specified user and client
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter clientId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func revokeGrantsForUserAndClientWithRequestBuilder(userId: String, clientId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/clients/{clientId}/grants"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func revokeTokenForUserAndClient(userId: String, clientId: String, tokenId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            revokeTokenForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId, tokenId: tokenId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func revokeTokenForUserAndClient(userId: String, clientId: String, tokenId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        revokeTokenForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId, tokenId: tokenId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}
     - Revokes the specified refresh token.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func revokeTokenForUserAndClientWithRequestBuilder(userId: String, clientId: String, tokenId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func revokeTokensForUserAndClient(userId: String, clientId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            revokeTokensForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter clientId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func revokeTokensForUserAndClient(userId: String, clientId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        revokeTokensForUserAndClientWithRequestBuilder(userId: userId, clientId: clientId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/clients/{clientId}/tokens
     - Revokes all refresh tokens issued for the specified User and Client.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter clientId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func revokeTokensForUserAndClientWithRequestBuilder(userId: String, clientId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/clients/{clientId}/tokens"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter grantId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func revokeUserGrant(userId: String, grantId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            revokeUserGrantWithRequestBuilder(userId: userId, grantId: grantId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter grantId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func revokeUserGrant(userId: String, grantId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        revokeUserGrantWithRequestBuilder(userId: userId, grantId: grantId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/grants/{grantId}
     - Revokes one grant for a specified user
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter grantId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func revokeUserGrantWithRequestBuilder(userId: String, grantId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/grants/{grantId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let grantIdPreEscape = "\(APIHelper.mapValueToPathItem(grantId))"
        let grantIdPostEscape = grantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{grantId}", with: grantIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func revokeUserGrants(userId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            revokeUserGrantsWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func revokeUserGrants(userId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        revokeUserGrantsWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/users/{userId}/grants
     - Revokes all grants for a specified user
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func revokeUserGrantsWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/grants"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Set Linked Object for User
     
     - parameter associatedUserId: (path)  
     - parameter primaryRelationshipName: (path)  
     - parameter primaryUserId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func setLinkedObjectForUser(associatedUserId: String, primaryRelationshipName: String, primaryUserId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            setLinkedObjectForUserWithRequestBuilder(associatedUserId: associatedUserId, primaryRelationshipName: primaryRelationshipName, primaryUserId: primaryUserId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Set Linked Object for User
     
     - parameter associatedUserId: (path)  
     - parameter primaryRelationshipName: (path)  
     - parameter primaryUserId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func setLinkedObjectForUser(associatedUserId: String, primaryRelationshipName: String, primaryUserId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        setLinkedObjectForUserWithRequestBuilder(associatedUserId: associatedUserId, primaryRelationshipName: primaryRelationshipName, primaryUserId: primaryUserId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Set Linked Object for User
     - PUT /api/v1/users/{associatedUserId}/linkedObjects/{primaryRelationshipName}/{primaryUserId}
     - Sets a linked object for a user.
     - parameter associatedUserId: (path)  
     - parameter primaryRelationshipName: (path)  
     - parameter primaryUserId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func setLinkedObjectForUserWithRequestBuilder(associatedUserId: String, primaryRelationshipName: String, primaryUserId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{associatedUserId}/linkedObjects/{primaryRelationshipName}/{primaryUserId}"
        let associatedUserIdPreEscape = "\(APIHelper.mapValueToPathItem(associatedUserId))"
        let associatedUserIdPostEscape = associatedUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{associatedUserId}", with: associatedUserIdPostEscape, options: .literal, range: nil)
        let primaryRelationshipNamePreEscape = "\(APIHelper.mapValueToPathItem(primaryRelationshipName))"
        let primaryRelationshipNamePostEscape = primaryRelationshipNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{primaryRelationshipName}", with: primaryRelationshipNamePostEscape, options: .literal, range: nil)
        let primaryUserIdPreEscape = "\(APIHelper.mapValueToPathItem(primaryUserId))"
        let primaryUserIdPostEscape = primaryUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{primaryUserId}", with: primaryUserIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Suspend User
     
     - parameter userId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func suspendUser(userId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            suspendUserWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Suspend User
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func suspendUser(userId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        suspendUserWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Suspend User
     - POST /api/v1/users/{userId}/lifecycle/suspend
     - Suspends a user.  This operation can only be performed on users with an `ACTIVE` status.  The user will have a status of `SUSPENDED` when the process is complete.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func suspendUserWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/lifecycle/suspend"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Unlock User
     
     - parameter userId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func unlockUser(userId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            unlockUserWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Unlock User
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func unlockUser(userId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        unlockUserWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Unlock User
     - POST /api/v1/users/{userId}/lifecycle/unlock
     - Unlocks a user with a `LOCKED_OUT` status and returns them to `ACTIVE` status.  Users will be able to login with their current password.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func unlockUserWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/lifecycle/unlock"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Unsuspend User
     
     - parameter userId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func unsuspendUser(userId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            unsuspendUserWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Unsuspend User
     
     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func unsuspendUser(userId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        unsuspendUserWithRequestBuilder(userId: userId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Unsuspend User
     - POST /api/v1/users/{userId}/lifecycle/unsuspend
     - Unsuspends a user and returns them to the `ACTIVE` state.  This operation can only be performed on users that have a `SUSPENDED` status.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func unsuspendUserWithRequestBuilder(userId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/users/{userId}/lifecycle/unsuspend"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update User
     
     - parameter userId: (path)  
     - parameter user: (body)  
     - parameter strict: (query)  (optional)
     - returns: AnyPublisher<User, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateUser(userId: String, user: User, strict: Bool? = nil) -> AnyPublisher<User, Error> {
        return Future<User, Error>.init { promise in
            updateUserWithRequestBuilder(userId: userId, user: user, strict: strict).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Update User
     
     - parameter userId: (path)  
     - parameter user: (body)  
     - parameter strict: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func updateUser(userId: String, user: User, strict: Bool? = nil, completion: @escaping ((_ result: Swift.Result<User, Error>) -> Void)) {
        updateUserWithRequestBuilder(userId: userId, user: user, strict: strict).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update User
     - PUT /api/v1/users/{userId}
     - Update a user's profile and/or credentials using strict-update semantics.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userId: (path)  
     - parameter user: (body)  
     - parameter strict: (query)  (optional)
     - returns: RequestBuilder<User> 
     */
    public func updateUserWithRequestBuilder(userId: String, user: User, strict: Bool? = nil) -> RequestBuilder<User> {
        var path = "/api/v1/users/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "strict": strict?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<User>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
