//
// CAPTCHAAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public struct CAPTCHAAPI {
    internal let configuration: OktaClient.Configuration
    internal let queue: DispatchQueue

    internal init(configuration: OktaClient.Configuration, queue: DispatchQueue) {
        self.configuration = configuration
        self.queue = queue
    }

    /**
     Create new CAPTCHA instance
     
     - parameter cAPTCHAInstance: (body)  (optional)
     - returns: AnyPublisher<CAPTCHAInstance, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createCaptchaInstance(cAPTCHAInstance: CAPTCHAInstance? = nil) -> AnyPublisher<CAPTCHAInstance, Error> {
        return Future<CAPTCHAInstance, Error>.init { promise in
            createCaptchaInstanceWithRequestBuilder(cAPTCHAInstance: cAPTCHAInstance).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Create new CAPTCHA instance
     
     - parameter cAPTCHAInstance: (body)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func createCaptchaInstance(cAPTCHAInstance: CAPTCHAInstance? = nil, completion: @escaping ((_ result: Swift.Result<CAPTCHAInstance, Error>) -> Void)) {
        createCaptchaInstanceWithRequestBuilder(cAPTCHAInstance: cAPTCHAInstance).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create new CAPTCHA instance
     - POST /api/v1/captchas
     - Adds a new CAPTCHA instance to your organization. In current release, we only allow one CAPTCHA instance per org
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter cAPTCHAInstance: (body)  (optional)
     - returns: RequestBuilder<CAPTCHAInstance> 
     */
    public func createCaptchaInstanceWithRequestBuilder(cAPTCHAInstance: CAPTCHAInstance? = nil) -> RequestBuilder<CAPTCHAInstance> {
        let path = "/api/v1/captchas"
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cAPTCHAInstance)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<CAPTCHAInstance>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete CAPTCHA Instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deleteCaptchaInstance(captchaId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            deleteCaptchaInstanceWithRequestBuilder(captchaId: captchaId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Delete CAPTCHA Instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter completion: completion handler to receive the result
     */
    func deleteCaptchaInstance(captchaId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        deleteCaptchaInstanceWithRequestBuilder(captchaId: captchaId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Delete CAPTCHA Instance
     - DELETE /api/v1/captchas/{captchaId}
     - Delete a CAPTCHA instance by `id`.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter captchaId: (path) id of the CAPTCHA 
     - returns: RequestBuilder<Void> 
     */
    public func deleteCaptchaInstanceWithRequestBuilder(captchaId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/captchas/{captchaId}"
        let captchaIdPreEscape = "\(APIHelper.mapValueToPathItem(captchaId))"
        let captchaIdPostEscape = captchaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captchaId}", with: captchaIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get CAPTCHA Instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - returns: AnyPublisher<CAPTCHAInstance, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getCaptchaInstance(captchaId: String) -> AnyPublisher<CAPTCHAInstance, Error> {
        return Future<CAPTCHAInstance, Error>.init { promise in
            getCaptchaInstanceWithRequestBuilder(captchaId: captchaId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Get CAPTCHA Instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter completion: completion handler to receive the result
     */
    func getCaptchaInstance(captchaId: String, completion: @escaping ((_ result: Swift.Result<CAPTCHAInstance, Error>) -> Void)) {
        getCaptchaInstanceWithRequestBuilder(captchaId: captchaId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get CAPTCHA Instance
     - GET /api/v1/captchas/{captchaId}
     - Fetches a CAPTCHA instance by `id`.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter captchaId: (path) id of the CAPTCHA 
     - returns: RequestBuilder<CAPTCHAInstance> 
     */
    public func getCaptchaInstanceWithRequestBuilder(captchaId: String) -> RequestBuilder<CAPTCHAInstance> {
        var path = "/api/v1/captchas/{captchaId}"
        let captchaIdPreEscape = "\(APIHelper.mapValueToPathItem(captchaId))"
        let captchaIdPostEscape = captchaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captchaId}", with: captchaIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<CAPTCHAInstance>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List CAPTCHA instances
     
     - returns: AnyPublisher<[CAPTCHAInstance], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listCaptchaInstances() -> AnyPublisher<[CAPTCHAInstance], Error> {
        return Future<[CAPTCHAInstance], Error>.init { promise in
            listCaptchaInstancesWithRequestBuilder().execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     List CAPTCHA instances
     
     - parameter completion: completion handler to receive the result
     */
    func listCaptchaInstances(completion: @escaping ((_ result: Swift.Result<[CAPTCHAInstance], Error>) -> Void)) {
        listCaptchaInstancesWithRequestBuilder().execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List CAPTCHA instances
     - GET /api/v1/captchas
     - Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - returns: RequestBuilder<[CAPTCHAInstance]> 
     */
    public func listCaptchaInstancesWithRequestBuilder() -> RequestBuilder<[CAPTCHAInstance]> {
        let path = "/api/v1/captchas"
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[CAPTCHAInstance]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Partial Update CAPTCHA instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - returns: AnyPublisher<CAPTCHAInstance, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func partialUpdateCaptchaInstance(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil) -> AnyPublisher<CAPTCHAInstance, Error> {
        return Future<CAPTCHAInstance, Error>.init { promise in
            partialUpdateCaptchaInstanceWithRequestBuilder(captchaId: captchaId, cAPTCHAInstance: cAPTCHAInstance).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Partial Update CAPTCHA instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func partialUpdateCaptchaInstance(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil, completion: @escaping ((_ result: Swift.Result<CAPTCHAInstance, Error>) -> Void)) {
        partialUpdateCaptchaInstanceWithRequestBuilder(captchaId: captchaId, cAPTCHAInstance: cAPTCHAInstance).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Partial Update CAPTCHA instance
     - POST /api/v1/captchas/{captchaId}
     - Partially update a CAPTCHA instance by `id`.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - returns: RequestBuilder<CAPTCHAInstance> 
     */
    public func partialUpdateCaptchaInstanceWithRequestBuilder(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil) -> RequestBuilder<CAPTCHAInstance> {
        var path = "/api/v1/captchas/{captchaId}"
        let captchaIdPreEscape = "\(APIHelper.mapValueToPathItem(captchaId))"
        let captchaIdPostEscape = captchaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captchaId}", with: captchaIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cAPTCHAInstance)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<CAPTCHAInstance>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update CAPTCHA instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - returns: AnyPublisher<CAPTCHAInstance, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateCaptchaInstance(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil) -> AnyPublisher<CAPTCHAInstance, Error> {
        return Future<CAPTCHAInstance, Error>.init { promise in
            updateCaptchaInstanceWithRequestBuilder(captchaId: captchaId, cAPTCHAInstance: cAPTCHAInstance).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Update CAPTCHA instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func updateCaptchaInstance(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil, completion: @escaping ((_ result: Swift.Result<CAPTCHAInstance, Error>) -> Void)) {
        updateCaptchaInstanceWithRequestBuilder(captchaId: captchaId, cAPTCHAInstance: cAPTCHAInstance).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update CAPTCHA instance
     - PUT /api/v1/captchas/{captchaId}
     - Update a CAPTCHA instance by `id`.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - returns: RequestBuilder<CAPTCHAInstance> 
     */
    public func updateCaptchaInstanceWithRequestBuilder(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil) -> RequestBuilder<CAPTCHAInstance> {
        var path = "/api/v1/captchas/{captchaId}"
        let captchaIdPreEscape = "\(APIHelper.mapValueToPathItem(captchaId))"
        let captchaIdPostEscape = captchaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captchaId}", with: captchaIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cAPTCHAInstance)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<CAPTCHAInstance>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
