//
// CAPTCHAAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public class CAPTCHAAPI {
    internal weak var api: OktaSdkAPI?

    internal init(api: OktaSdkAPI) {
        self.api = api
    }

    /**
     Create new CAPTCHA instance
     
     - parameter cAPTCHAInstance: (body)  (optional)
     - returns: AnyPublisher<CAPTCHAInstance, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createCaptchaInstance(cAPTCHAInstance: CAPTCHAInstance? = nil) -> AnyPublisher<CAPTCHAInstance, Error> {
        return Future<CAPTCHAInstance, Error>.init { promise in
            guard let builder = self.createCaptchaInstanceWithRequestBuilder(cAPTCHAInstance: cAPTCHAInstance) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Create new CAPTCHA instance
     
     - parameter cAPTCHAInstance: (body)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func createCaptchaInstance(cAPTCHAInstance: CAPTCHAInstance? = nil, completion: @escaping ((_ result: Swift.Result<CAPTCHAInstance, Error>) -> Void)) {
        guard let builder = createCaptchaInstanceWithRequestBuilder(cAPTCHAInstance: cAPTCHAInstance) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func createCaptchaInstanceWithRequestBuilder(cAPTCHAInstance: CAPTCHAInstance? = nil) -> RequestBuilder<CAPTCHAInstance>? {
        guard let api = api else {
            return nil
        }
        let path = "/api/v1/captchas"
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cAPTCHAInstance)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<CAPTCHAInstance>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete CAPTCHA Instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deleteCaptchaInstance(captchaId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            guard let builder = self.deleteCaptchaInstanceWithRequestBuilder(captchaId: captchaId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Delete CAPTCHA Instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter completion: completion handler to receive the result
     */
    func deleteCaptchaInstance(captchaId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        guard let builder = deleteCaptchaInstanceWithRequestBuilder(captchaId: captchaId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func deleteCaptchaInstanceWithRequestBuilder(captchaId: String) -> RequestBuilder<Void>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/captchas/{captchaId}"
        let captchaIdPreEscape = "\(APIHelper.mapValueToPathItem(captchaId))"
        let captchaIdPostEscape = captchaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captchaId}", with: captchaIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = api.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(api: api, method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get CAPTCHA Instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - returns: AnyPublisher<CAPTCHAInstance, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getCaptchaInstance(captchaId: String) -> AnyPublisher<CAPTCHAInstance, Error> {
        return Future<CAPTCHAInstance, Error>.init { promise in
            guard let builder = self.getCaptchaInstanceWithRequestBuilder(captchaId: captchaId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Get CAPTCHA Instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter completion: completion handler to receive the result
     */
    func getCaptchaInstance(captchaId: String, completion: @escaping ((_ result: Swift.Result<CAPTCHAInstance, Error>) -> Void)) {
        guard let builder = getCaptchaInstanceWithRequestBuilder(captchaId: captchaId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func getCaptchaInstanceWithRequestBuilder(captchaId: String) -> RequestBuilder<CAPTCHAInstance>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/captchas/{captchaId}"
        let captchaIdPreEscape = "\(APIHelper.mapValueToPathItem(captchaId))"
        let captchaIdPostEscape = captchaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captchaId}", with: captchaIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<CAPTCHAInstance>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List CAPTCHA instances
     
     - returns: AnyPublisher<[CAPTCHAInstance], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listCaptchaInstances() -> AnyPublisher<[CAPTCHAInstance], Error> {
        return Future<[CAPTCHAInstance], Error>.init { promise in
            guard let builder = self.listCaptchaInstancesWithRequestBuilder() else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     List CAPTCHA instances
     
     - parameter completion: completion handler to receive the result
     */
    func listCaptchaInstances(completion: @escaping ((_ result: Swift.Result<[CAPTCHAInstance], Error>) -> Void)) {
        guard let builder = listCaptchaInstancesWithRequestBuilder() else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listCaptchaInstancesWithRequestBuilder() -> RequestBuilder<[CAPTCHAInstance]>? {
        guard let api = api else {
            return nil
        }
        let path = "/api/v1/captchas"
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[CAPTCHAInstance]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Partial Update CAPTCHA instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - returns: AnyPublisher<CAPTCHAInstance, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func partialUpdateCaptchaInstance(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil) -> AnyPublisher<CAPTCHAInstance, Error> {
        return Future<CAPTCHAInstance, Error>.init { promise in
            guard let builder = self.partialUpdateCaptchaInstanceWithRequestBuilder(captchaId: captchaId, cAPTCHAInstance: cAPTCHAInstance) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Partial Update CAPTCHA instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func partialUpdateCaptchaInstance(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil, completion: @escaping ((_ result: Swift.Result<CAPTCHAInstance, Error>) -> Void)) {
        guard let builder = partialUpdateCaptchaInstanceWithRequestBuilder(captchaId: captchaId, cAPTCHAInstance: cAPTCHAInstance) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func partialUpdateCaptchaInstanceWithRequestBuilder(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil) -> RequestBuilder<CAPTCHAInstance>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/captchas/{captchaId}"
        let captchaIdPreEscape = "\(APIHelper.mapValueToPathItem(captchaId))"
        let captchaIdPostEscape = captchaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captchaId}", with: captchaIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cAPTCHAInstance)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<CAPTCHAInstance>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update CAPTCHA instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - returns: AnyPublisher<CAPTCHAInstance, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateCaptchaInstance(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil) -> AnyPublisher<CAPTCHAInstance, Error> {
        return Future<CAPTCHAInstance, Error>.init { promise in
            guard let builder = self.updateCaptchaInstanceWithRequestBuilder(captchaId: captchaId, cAPTCHAInstance: cAPTCHAInstance) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Update CAPTCHA instance
     
     - parameter captchaId: (path) id of the CAPTCHA 
     - parameter cAPTCHAInstance: (body)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func updateCaptchaInstance(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil, completion: @escaping ((_ result: Swift.Result<CAPTCHAInstance, Error>) -> Void)) {
        guard let builder = updateCaptchaInstanceWithRequestBuilder(captchaId: captchaId, cAPTCHAInstance: cAPTCHAInstance) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func updateCaptchaInstanceWithRequestBuilder(captchaId: String, cAPTCHAInstance: CAPTCHAInstance? = nil) -> RequestBuilder<CAPTCHAInstance>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/captchas/{captchaId}"
        let captchaIdPreEscape = "\(APIHelper.mapValueToPathItem(captchaId))"
        let captchaIdPostEscape = captchaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{captchaId}", with: captchaIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cAPTCHAInstance)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<CAPTCHAInstance>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
