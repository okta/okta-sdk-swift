//
// UserTypeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public struct UserTypeAPI {
    internal let configuration: OktaClient.Configuration
    internal let queue: DispatchQueue

    internal init(configuration: OktaClient.Configuration, queue: DispatchQueue) {
        self.configuration = configuration
        self.queue = queue
    }

    /**

     - parameter userType: (body)  
     - returns: AnyPublisher<UserType, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createUserType(userType: UserType) -> AnyPublisher<UserType, Error> {
        return Future<UserType, Error>.init { promise in
            createUserTypeWithRequestBuilder(userType: userType).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userType: (body)  
     - parameter completion: completion handler to receive the result
     */
    func createUserType(userType: UserType, completion: @escaping ((_ result: Swift.Result<UserType, Error>) -> Void)) {
        createUserTypeWithRequestBuilder(userType: userType).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /api/v1/meta/types/user
     - Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter userType: (body)  
     - returns: RequestBuilder<UserType> 
     */
    public func createUserTypeWithRequestBuilder(userType: UserType) -> RequestBuilder<UserType> {
        let path = "/api/v1/meta/types/user"
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userType)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserType>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter typeId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deleteUserType(typeId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            deleteUserTypeWithRequestBuilder(typeId: typeId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter typeId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deleteUserType(typeId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        deleteUserTypeWithRequestBuilder(typeId: typeId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - DELETE /api/v1/meta/types/user/{typeId}
     - Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter typeId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func deleteUserTypeWithRequestBuilder(typeId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/meta/types/user/{typeId}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter typeId: (path)  
     - returns: AnyPublisher<UserType, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getUserType(typeId: String) -> AnyPublisher<UserType, Error> {
        return Future<UserType, Error>.init { promise in
            getUserTypeWithRequestBuilder(typeId: typeId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter typeId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getUserType(typeId: String, completion: @escaping ((_ result: Swift.Result<UserType, Error>) -> Void)) {
        getUserTypeWithRequestBuilder(typeId: typeId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/meta/types/user/{typeId}
     - Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter typeId: (path)  
     - returns: RequestBuilder<UserType> 
     */
    public func getUserTypeWithRequestBuilder(typeId: String) -> RequestBuilder<UserType> {
        var path = "/api/v1/meta/types/user/{typeId}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserType>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - returns: AnyPublisher<[UserType], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listUserTypes() -> AnyPublisher<[UserType], Error> {
        return Future<[UserType], Error>.init { promise in
            listUserTypesWithRequestBuilder().execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter completion: completion handler to receive the result
     */
    func listUserTypes(completion: @escaping ((_ result: Swift.Result<[UserType], Error>) -> Void)) {
        listUserTypesWithRequestBuilder().execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/meta/types/user
     - Fetches all User Types in your org
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - returns: RequestBuilder<[UserType]> 
     */
    public func listUserTypesWithRequestBuilder() -> RequestBuilder<[UserType]> {
        let path = "/api/v1/meta/types/user"
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[UserType]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter typeId: (path)  
     - parameter userType: (body)  
     - returns: AnyPublisher<UserType, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func replaceUserType(typeId: String, userType: UserType) -> AnyPublisher<UserType, Error> {
        return Future<UserType, Error>.init { promise in
            replaceUserTypeWithRequestBuilder(typeId: typeId, userType: userType).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter typeId: (path)  
     - parameter userType: (body)  
     - parameter completion: completion handler to receive the result
     */
    func replaceUserType(typeId: String, userType: UserType, completion: @escaping ((_ result: Swift.Result<UserType, Error>) -> Void)) {
        replaceUserTypeWithRequestBuilder(typeId: typeId, userType: userType).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - PUT /api/v1/meta/types/user/{typeId}
     - Replace an existing User Type
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter typeId: (path)  
     - parameter userType: (body)  
     - returns: RequestBuilder<UserType> 
     */
    public func replaceUserTypeWithRequestBuilder(typeId: String, userType: UserType) -> RequestBuilder<UserType> {
        var path = "/api/v1/meta/types/user/{typeId}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userType)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserType>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter typeId: (path)  
     - parameter userType: (body)  
     - returns: AnyPublisher<UserType, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateUserType(typeId: String, userType: UserType) -> AnyPublisher<UserType, Error> {
        return Future<UserType, Error>.init { promise in
            updateUserTypeWithRequestBuilder(typeId: typeId, userType: userType).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter typeId: (path)  
     - parameter userType: (body)  
     - parameter completion: completion handler to receive the result
     */
    func updateUserType(typeId: String, userType: UserType, completion: @escaping ((_ result: Swift.Result<UserType, Error>) -> Void)) {
        updateUserTypeWithRequestBuilder(typeId: typeId, userType: userType).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /api/v1/meta/types/user/{typeId}
     - Updates an existing User Type
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter typeId: (path)  
     - parameter userType: (body)  
     - returns: RequestBuilder<UserType> 
     */
    public func updateUserTypeWithRequestBuilder(typeId: String, userType: UserType) -> RequestBuilder<UserType> {
        var path = "/api/v1/meta/types/user/{typeId}"
        let typeIdPreEscape = "\(APIHelper.mapValueToPathItem(typeId))"
        let typeIdPostEscape = typeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{typeId}", with: typeIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userType)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserType>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
