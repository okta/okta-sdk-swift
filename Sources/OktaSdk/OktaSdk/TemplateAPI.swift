//
// TemplateAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public class TemplateAPI {
    internal weak var api: OktaSdkAPI?

    internal init(api: OktaSdkAPI) {
        self.api = api
    }

    /**
     Add SMS Template
     
     - parameter smsTemplate: (body)  
     - returns: AnyPublisher<SmsTemplate, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createSmsTemplate(smsTemplate: SmsTemplate) -> AnyPublisher<SmsTemplate, Error> {
        return Future<SmsTemplate, Error>.init { promise in
            guard let builder = self.createSmsTemplateWithRequestBuilder(smsTemplate: smsTemplate) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Add SMS Template
     
     - parameter smsTemplate: (body)  
     - parameter completion: completion handler to receive the result
     */
    func createSmsTemplate(smsTemplate: SmsTemplate, completion: @escaping ((_ result: Swift.Result<SmsTemplate, Error>) -> Void)) {
        guard let builder = createSmsTemplateWithRequestBuilder(smsTemplate: smsTemplate) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func createSmsTemplateWithRequestBuilder(smsTemplate: SmsTemplate) -> RequestBuilder<SmsTemplate>? {
        guard let api = api else {
            return nil
        }
        let path = "/api/v1/templates/sms"
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: smsTemplate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<SmsTemplate>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Remove SMS Template
     
     - parameter templateId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deleteSmsTemplate(templateId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            guard let builder = self.deleteSmsTemplateWithRequestBuilder(templateId: templateId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Remove SMS Template
     
     - parameter templateId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deleteSmsTemplate(templateId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        guard let builder = deleteSmsTemplateWithRequestBuilder(templateId: templateId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func deleteSmsTemplateWithRequestBuilder(templateId: String) -> RequestBuilder<Void>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/templates/sms/{templateId}"
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = api.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(api: api, method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get SMS Template
     
     - parameter templateId: (path)  
     - returns: AnyPublisher<SmsTemplate, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getSmsTemplate(templateId: String) -> AnyPublisher<SmsTemplate, Error> {
        return Future<SmsTemplate, Error>.init { promise in
            guard let builder = self.getSmsTemplateWithRequestBuilder(templateId: templateId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Get SMS Template
     
     - parameter templateId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getSmsTemplate(templateId: String, completion: @escaping ((_ result: Swift.Result<SmsTemplate, Error>) -> Void)) {
        guard let builder = getSmsTemplateWithRequestBuilder(templateId: templateId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func getSmsTemplateWithRequestBuilder(templateId: String) -> RequestBuilder<SmsTemplate>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/templates/sms/{templateId}"
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<SmsTemplate>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List SMS Templates
     
     - parameter templateType: (query)  (optional)
     - returns: AnyPublisher<[SmsTemplate], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listSmsTemplates(templateType: String? = nil) -> AnyPublisher<[SmsTemplate], Error> {
        return Future<[SmsTemplate], Error>.init { promise in
            guard let builder = self.listSmsTemplatesWithRequestBuilder(templateType: templateType) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     List SMS Templates
     
     - parameter templateType: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func listSmsTemplates(templateType: String? = nil, completion: @escaping ((_ result: Swift.Result<[SmsTemplate], Error>) -> Void)) {
        guard let builder = listSmsTemplatesWithRequestBuilder(templateType: templateType) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listSmsTemplatesWithRequestBuilder(templateType: String? = nil) -> RequestBuilder<[SmsTemplate]>? {
        guard let api = api else {
            return nil
        }
        let path = "/api/v1/templates/sms"
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "templateType": templateType?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[SmsTemplate]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Partial SMS Template Update
     
     - parameter templateId: (path)  
     - parameter smsTemplate: (body)  
     - returns: AnyPublisher<SmsTemplate, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func partialUpdateSmsTemplate(templateId: String, smsTemplate: SmsTemplate) -> AnyPublisher<SmsTemplate, Error> {
        return Future<SmsTemplate, Error>.init { promise in
            guard let builder = self.partialUpdateSmsTemplateWithRequestBuilder(templateId: templateId, smsTemplate: smsTemplate) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Partial SMS Template Update
     
     - parameter templateId: (path)  
     - parameter smsTemplate: (body)  
     - parameter completion: completion handler to receive the result
     */
    func partialUpdateSmsTemplate(templateId: String, smsTemplate: SmsTemplate, completion: @escaping ((_ result: Swift.Result<SmsTemplate, Error>) -> Void)) {
        guard let builder = partialUpdateSmsTemplateWithRequestBuilder(templateId: templateId, smsTemplate: smsTemplate) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func partialUpdateSmsTemplateWithRequestBuilder(templateId: String, smsTemplate: SmsTemplate) -> RequestBuilder<SmsTemplate>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/templates/sms/{templateId}"
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: smsTemplate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<SmsTemplate>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update SMS Template
     
     - parameter templateId: (path)  
     - parameter smsTemplate: (body)  
     - returns: AnyPublisher<SmsTemplate, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateSmsTemplate(templateId: String, smsTemplate: SmsTemplate) -> AnyPublisher<SmsTemplate, Error> {
        return Future<SmsTemplate, Error>.init { promise in
            guard let builder = self.updateSmsTemplateWithRequestBuilder(templateId: templateId, smsTemplate: smsTemplate) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Update SMS Template
     
     - parameter templateId: (path)  
     - parameter smsTemplate: (body)  
     - parameter completion: completion handler to receive the result
     */
    func updateSmsTemplate(templateId: String, smsTemplate: SmsTemplate, completion: @escaping ((_ result: Swift.Result<SmsTemplate, Error>) -> Void)) {
        guard let builder = updateSmsTemplateWithRequestBuilder(templateId: templateId, smsTemplate: smsTemplate) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func updateSmsTemplateWithRequestBuilder(templateId: String, smsTemplate: SmsTemplate) -> RequestBuilder<SmsTemplate>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/templates/sms/{templateId}"
        let templateIdPreEscape = "\(APIHelper.mapValueToPathItem(templateId))"
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: smsTemplate)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<SmsTemplate>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
