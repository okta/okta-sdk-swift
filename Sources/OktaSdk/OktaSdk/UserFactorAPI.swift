//
// UserFactorAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public class UserFactorAPI {
    internal weak var api: OktaSdkAPI?

    internal init(api: OktaSdkAPI) {
        self.api = api
    }

    /**
     Activate Factor
     
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter body: (body)  (optional)
     - returns: AnyPublisher<UserFactor, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func activateFactor(userId: String, factorId: String, body: ActivateFactorRequest? = nil) -> AnyPublisher<UserFactor, Error> {
        return Future<UserFactor, Error>.init { promise in
            guard let builder = self.activateFactorWithRequestBuilder(userId: userId, factorId: factorId, body: body) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Activate Factor
     
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func activateFactor(userId: String, factorId: String, body: ActivateFactorRequest? = nil, completion: @escaping ((_ result: Swift.Result<UserFactor, Error>) -> Void)) {
        guard let builder = activateFactorWithRequestBuilder(userId: userId, factorId: factorId, body: body) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func activateFactorWithRequestBuilder(userId: String, factorId: String, body: ActivateFactorRequest? = nil) -> RequestBuilder<UserFactor>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserFactor>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter factorId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deleteFactor(userId: String, factorId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            guard let builder = self.deleteFactorWithRequestBuilder(userId: userId, factorId: factorId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deleteFactor(userId: String, factorId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        guard let builder = deleteFactorWithRequestBuilder(userId: userId, factorId: factorId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func deleteFactorWithRequestBuilder(userId: String, factorId: String) -> RequestBuilder<Void>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/users/{userId}/factors/{factorId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = api.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(api: api, method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Enroll Factor
     
     - parameter userId: (path)  
     - parameter body: (body) Factor 
     - parameter updatePhone: (query)  (optional, default to false)
     - parameter templateId: (query) id of SMS template (only for SMS factor) (optional)
     - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
     - parameter activate: (query)  (optional, default to false)
     - returns: AnyPublisher<UserFactor, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func enrollFactor(userId: String, body: UserFactor, updatePhone: Bool? = nil, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, activate: Bool? = nil) -> AnyPublisher<UserFactor, Error> {
        return Future<UserFactor, Error>.init { promise in
            guard let builder = self.enrollFactorWithRequestBuilder(userId: userId, body: body, updatePhone: updatePhone, templateId: templateId, tokenLifetimeSeconds: tokenLifetimeSeconds, activate: activate) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Enroll Factor
     
     - parameter userId: (path)  
     - parameter body: (body) Factor 
     - parameter updatePhone: (query)  (optional, default to false)
     - parameter templateId: (query) id of SMS template (only for SMS factor) (optional)
     - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
     - parameter activate: (query)  (optional, default to false)
     - parameter completion: completion handler to receive the result
     */
    func enrollFactor(userId: String, body: UserFactor, updatePhone: Bool? = nil, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, activate: Bool? = nil, completion: @escaping ((_ result: Swift.Result<UserFactor, Error>) -> Void)) {
        guard let builder = enrollFactorWithRequestBuilder(userId: userId, body: body, updatePhone: updatePhone, templateId: templateId, tokenLifetimeSeconds: tokenLifetimeSeconds, activate: activate) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func enrollFactorWithRequestBuilder(userId: String, body: UserFactor, updatePhone: Bool? = nil, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, activate: Bool? = nil) -> RequestBuilder<UserFactor>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/users/{userId}/factors"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "updatePhone": updatePhone?.encodeToJSON(),
            "templateId": templateId?.encodeToJSON(),
            "tokenLifetimeSeconds": tokenLifetimeSeconds?.encodeToJSON(),
            "activate": activate?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserFactor>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter factorId: (path)  
     - returns: AnyPublisher<UserFactor, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getFactor(userId: String, factorId: String) -> AnyPublisher<UserFactor, Error> {
        return Future<UserFactor, Error>.init { promise in
            guard let builder = self.getFactorWithRequestBuilder(userId: userId, factorId: factorId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getFactor(userId: String, factorId: String, completion: @escaping ((_ result: Swift.Result<UserFactor, Error>) -> Void)) {
        guard let builder = getFactorWithRequestBuilder(userId: userId, factorId: factorId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func getFactorWithRequestBuilder(userId: String, factorId: String) -> RequestBuilder<UserFactor>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/users/{userId}/factors/{factorId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<UserFactor>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter transactionId: (path)  
     - returns: AnyPublisher<VerifyUserFactorResponse, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getFactorTransactionStatus(userId: String, factorId: String, transactionId: String) -> AnyPublisher<VerifyUserFactorResponse, Error> {
        return Future<VerifyUserFactorResponse, Error>.init { promise in
            guard let builder = self.getFactorTransactionStatusWithRequestBuilder(userId: userId, factorId: factorId, transactionId: transactionId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter transactionId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getFactorTransactionStatus(userId: String, factorId: String, transactionId: String, completion: @escaping ((_ result: Swift.Result<VerifyUserFactorResponse, Error>) -> Void)) {
        guard let builder = getFactorTransactionStatusWithRequestBuilder(userId: userId, factorId: factorId, transactionId: transactionId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func getFactorTransactionStatusWithRequestBuilder(userId: String, factorId: String, transactionId: String) -> RequestBuilder<VerifyUserFactorResponse>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let transactionIdPreEscape = "\(APIHelper.mapValueToPathItem(transactionId))"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transactionId}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<VerifyUserFactorResponse>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - returns: AnyPublisher<[UserFactor], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listFactors(userId: String) -> AnyPublisher<[UserFactor], Error> {
        return Future<[UserFactor], Error>.init { promise in
            guard let builder = self.listFactorsWithRequestBuilder(userId: userId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listFactors(userId: String, completion: @escaping ((_ result: Swift.Result<[UserFactor], Error>) -> Void)) {
        guard let builder = listFactorsWithRequestBuilder(userId: userId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listFactorsWithRequestBuilder(userId: String) -> RequestBuilder<[UserFactor]>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/users/{userId}/factors"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[UserFactor]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - returns: AnyPublisher<[UserFactor], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listSupportedFactors(userId: String) -> AnyPublisher<[UserFactor], Error> {
        return Future<[UserFactor], Error>.init { promise in
            guard let builder = self.listSupportedFactorsWithRequestBuilder(userId: userId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listSupportedFactors(userId: String, completion: @escaping ((_ result: Swift.Result<[UserFactor], Error>) -> Void)) {
        guard let builder = listSupportedFactorsWithRequestBuilder(userId: userId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listSupportedFactorsWithRequestBuilder(userId: String) -> RequestBuilder<[UserFactor]>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/users/{userId}/factors/catalog"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[UserFactor]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter userId: (path)  
     - returns: AnyPublisher<[SecurityQuestion], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listSupportedSecurityQuestions(userId: String) -> AnyPublisher<[SecurityQuestion], Error> {
        return Future<[SecurityQuestion], Error>.init { promise in
            guard let builder = self.listSupportedSecurityQuestionsWithRequestBuilder(userId: userId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter userId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listSupportedSecurityQuestions(userId: String, completion: @escaping ((_ result: Swift.Result<[SecurityQuestion], Error>) -> Void)) {
        guard let builder = listSupportedSecurityQuestionsWithRequestBuilder(userId: userId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listSupportedSecurityQuestionsWithRequestBuilder(userId: String) -> RequestBuilder<[SecurityQuestion]>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/users/{userId}/factors/questions"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[SecurityQuestion]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Verify MFA Factor
     
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter templateId: (query)  (optional)
     - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
     - parameter xForwardedFor: (header)  (optional)
     - parameter userAgent: (header)  (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter body: (body)  (optional)
     - returns: AnyPublisher<VerifyUserFactorResponse, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func verifyFactor(userId: String, factorId: String, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, xForwardedFor: String? = nil, userAgent: String? = nil, acceptLanguage: String? = nil, body: VerifyFactorRequest? = nil) -> AnyPublisher<VerifyUserFactorResponse, Error> {
        return Future<VerifyUserFactorResponse, Error>.init { promise in
            guard let builder = self.verifyFactorWithRequestBuilder(userId: userId, factorId: factorId, templateId: templateId, tokenLifetimeSeconds: tokenLifetimeSeconds, xForwardedFor: xForwardedFor, userAgent: userAgent, acceptLanguage: acceptLanguage, body: body) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Verify MFA Factor
     
     - parameter userId: (path)  
     - parameter factorId: (path)  
     - parameter templateId: (query)  (optional)
     - parameter tokenLifetimeSeconds: (query)  (optional, default to 300)
     - parameter xForwardedFor: (header)  (optional)
     - parameter userAgent: (header)  (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func verifyFactor(userId: String, factorId: String, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, xForwardedFor: String? = nil, userAgent: String? = nil, acceptLanguage: String? = nil, body: VerifyFactorRequest? = nil, completion: @escaping ((_ result: Swift.Result<VerifyUserFactorResponse, Error>) -> Void)) {
        guard let builder = verifyFactorWithRequestBuilder(userId: userId, factorId: factorId, templateId: templateId, tokenLifetimeSeconds: tokenLifetimeSeconds, xForwardedFor: xForwardedFor, userAgent: userAgent, acceptLanguage: acceptLanguage, body: body) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func verifyFactorWithRequestBuilder(userId: String, factorId: String, templateId: String? = nil, tokenLifetimeSeconds: Int? = nil, xForwardedFor: String? = nil, userAgent: String? = nil, acceptLanguage: String? = nil, body: VerifyFactorRequest? = nil) -> RequestBuilder<VerifyUserFactorResponse>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/users/{userId}/factors/{factorId}/verify"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let factorIdPreEscape = "\(APIHelper.mapValueToPathItem(factorId))"
        let factorIdPostEscape = factorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{factorId}", with: factorIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "templateId": templateId?.encodeToJSON(),
            "tokenLifetimeSeconds": tokenLifetimeSeconds?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            "X-Forwarded-For": xForwardedFor?.encodeToJSON(),
            "User-Agent": userAgent?.encodeToJSON(),
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<VerifyUserFactorResponse>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
