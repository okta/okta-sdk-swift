//
// ProfileMappingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public struct ProfileMappingAPI {
    internal let configuration: OktaClient.Configuration
    internal let queue: DispatchQueue

    internal init(configuration: OktaClient.Configuration, queue: DispatchQueue) {
        self.configuration = configuration
        self.queue = queue
    }

    /**
     Get Profile Mapping
     
     - parameter mappingId: (path)  
     - returns: AnyPublisher<ProfileMapping, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getProfileMapping(mappingId: String) -> AnyPublisher<ProfileMapping, Error> {
        return Future<ProfileMapping, Error>.init { promise in
            getProfileMappingWithRequestBuilder(mappingId: mappingId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Get Profile Mapping
     
     - parameter mappingId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getProfileMapping(mappingId: String, completion: @escaping ((_ result: Swift.Result<ProfileMapping, Error>) -> Void)) {
        getProfileMappingWithRequestBuilder(mappingId: mappingId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Profile Mapping
     - GET /api/v1/mappings/{mappingId}
     - Fetches a single Profile Mapping referenced by its ID.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter mappingId: (path)  
     - returns: RequestBuilder<ProfileMapping> 
     */
    public func getProfileMappingWithRequestBuilder(mappingId: String) -> RequestBuilder<ProfileMapping> {
        var path = "/api/v1/mappings/{mappingId}"
        let mappingIdPreEscape = "\(APIHelper.mapValueToPathItem(mappingId))"
        let mappingIdPostEscape = mappingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mappingId}", with: mappingIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<ProfileMapping>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter sourceId: (query)  (optional)
     - parameter targetId: (query)  (optional)
     - returns: AnyPublisher<[ProfileMapping], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listProfileMappings(after: String? = nil, limit: Int? = nil, sourceId: String? = nil, targetId: String? = nil) -> AnyPublisher<[ProfileMapping], Error> {
        return Future<[ProfileMapping], Error>.init { promise in
            listProfileMappingsWithRequestBuilder(after: after, limit: limit, sourceId: sourceId, targetId: targetId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter sourceId: (query)  (optional)
     - parameter targetId: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func listProfileMappings(after: String? = nil, limit: Int? = nil, sourceId: String? = nil, targetId: String? = nil, completion: @escaping ((_ result: Swift.Result<[ProfileMapping], Error>) -> Void)) {
        listProfileMappingsWithRequestBuilder(after: after, limit: limit, sourceId: sourceId, targetId: targetId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/mappings
     - Enumerates Profile Mappings in your organization with pagination.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter sourceId: (query)  (optional)
     - parameter targetId: (query)  (optional)
     - returns: RequestBuilder<[ProfileMapping]> 
     */
    public func listProfileMappingsWithRequestBuilder(after: String? = nil, limit: Int? = nil, sourceId: String? = nil, targetId: String? = nil) -> RequestBuilder<[ProfileMapping]> {
        let path = "/api/v1/mappings"
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sourceId": sourceId?.encodeToJSON(),
            "targetId": targetId?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[ProfileMapping]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update Profile Mapping
     
     - parameter mappingId: (path)  
     - parameter profileMapping: (body)  
     - returns: AnyPublisher<ProfileMapping, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateProfileMapping(mappingId: String, profileMapping: ProfileMapping) -> AnyPublisher<ProfileMapping, Error> {
        return Future<ProfileMapping, Error>.init { promise in
            updateProfileMappingWithRequestBuilder(mappingId: mappingId, profileMapping: profileMapping).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Update Profile Mapping
     
     - parameter mappingId: (path)  
     - parameter profileMapping: (body)  
     - parameter completion: completion handler to receive the result
     */
    func updateProfileMapping(mappingId: String, profileMapping: ProfileMapping, completion: @escaping ((_ result: Swift.Result<ProfileMapping, Error>) -> Void)) {
        updateProfileMappingWithRequestBuilder(mappingId: mappingId, profileMapping: profileMapping).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update Profile Mapping
     - POST /api/v1/mappings/{mappingId}
     - Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter mappingId: (path)  
     - parameter profileMapping: (body)  
     - returns: RequestBuilder<ProfileMapping> 
     */
    public func updateProfileMappingWithRequestBuilder(mappingId: String, profileMapping: ProfileMapping) -> RequestBuilder<ProfileMapping> {
        var path = "/api/v1/mappings/{mappingId}"
        let mappingIdPreEscape = "\(APIHelper.mapValueToPathItem(mappingId))"
        let mappingIdPostEscape = mappingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{mappingId}", with: mappingIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: profileMapping)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<ProfileMapping>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
