//
// SessionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public struct SessionAPI {
    internal let configuration: OktaClient.Configuration
    internal let queue: DispatchQueue

    internal init(configuration: OktaClient.Configuration, queue: DispatchQueue) {
        self.configuration = configuration
        self.queue = queue
    }

    /**
     Create Session with Session Token
     
     - parameter createSessionRequest: (body)  
     - returns: AnyPublisher<Session, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createSession(createSessionRequest: CreateSessionRequest) -> AnyPublisher<Session, Error> {
        return Future<Session, Error>.init { promise in
            createSessionWithRequestBuilder(createSessionRequest: createSessionRequest).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Create Session with Session Token
     
     - parameter createSessionRequest: (body)  
     - parameter completion: completion handler to receive the result
     */
    func createSession(createSessionRequest: CreateSessionRequest, completion: @escaping ((_ result: Swift.Result<Session, Error>) -> Void)) {
        createSessionWithRequestBuilder(createSessionRequest: createSessionRequest).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create Session with Session Token
     - POST /api/v1/sessions
     - Creates a new session for a user with a valid session token. Use this API if, for example, you want to set the session cookie yourself instead of allowing Okta to set it, or want to hold the session ID in order to delete a session via the API instead of visiting the logout URL.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter createSessionRequest: (body)  
     - returns: RequestBuilder<Session> 
     */
    public func createSessionWithRequestBuilder(createSessionRequest: CreateSessionRequest) -> RequestBuilder<Session> {
        let path = "/api/v1/sessions"
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createSessionRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Session>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     End Session
     
     - parameter sessionId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func endSession(sessionId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            endSessionWithRequestBuilder(sessionId: sessionId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     End Session
     
     - parameter sessionId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func endSession(sessionId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        endSessionWithRequestBuilder(sessionId: sessionId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     End Session
     - DELETE /api/v1/sessions/{sessionId}
     - End a session.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter sessionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func endSessionWithRequestBuilder(sessionId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/sessions/{sessionId}"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Session
     
     - parameter sessionId: (path)  
     - returns: AnyPublisher<Session, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getSession(sessionId: String) -> AnyPublisher<Session, Error> {
        return Future<Session, Error>.init { promise in
            getSessionWithRequestBuilder(sessionId: sessionId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Get Session
     
     - parameter sessionId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getSession(sessionId: String, completion: @escaping ((_ result: Swift.Result<Session, Error>) -> Void)) {
        getSessionWithRequestBuilder(sessionId: sessionId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Session
     - GET /api/v1/sessions/{sessionId}
     - Get details about a session.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter sessionId: (path)  
     - returns: RequestBuilder<Session> 
     */
    public func getSessionWithRequestBuilder(sessionId: String) -> RequestBuilder<Session> {
        var path = "/api/v1/sessions/{sessionId}"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Session>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Refresh Session
     
     - parameter sessionId: (path)  
     - returns: AnyPublisher<Session, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func refreshSession(sessionId: String) -> AnyPublisher<Session, Error> {
        return Future<Session, Error>.init { promise in
            refreshSessionWithRequestBuilder(sessionId: sessionId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Refresh Session
     
     - parameter sessionId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func refreshSession(sessionId: String, completion: @escaping ((_ result: Swift.Result<Session, Error>) -> Void)) {
        refreshSessionWithRequestBuilder(sessionId: sessionId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Refresh Session
     - POST /api/v1/sessions/{sessionId}/lifecycle/refresh
     - Refresh a session.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter sessionId: (path)  
     - returns: RequestBuilder<Session> 
     */
    public func refreshSessionWithRequestBuilder(sessionId: String) -> RequestBuilder<Session> {
        var path = "/api/v1/sessions/{sessionId}/lifecycle/refresh"
        let sessionIdPreEscape = "\(APIHelper.mapValueToPathItem(sessionId))"
        let sessionIdPostEscape = sessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sessionId}", with: sessionIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Session>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
