//
// EventHookAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public class EventHookAPI {
    internal weak var api: OktaSdkAPI?

    internal init(api: OktaSdkAPI) {
        self.api = api
    }

    /**

     - parameter eventHookId: (path)  
     - returns: AnyPublisher<EventHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func activateEventHook(eventHookId: String) -> AnyPublisher<EventHook, Error> {
        return Future<EventHook, Error>.init { promise in
            guard let builder = self.activateEventHookWithRequestBuilder(eventHookId: eventHookId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter eventHookId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func activateEventHook(eventHookId: String, completion: @escaping ((_ result: Swift.Result<EventHook, Error>) -> Void)) {
        guard let builder = activateEventHookWithRequestBuilder(eventHookId: eventHookId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func activateEventHookWithRequestBuilder(eventHookId: String) -> RequestBuilder<EventHook>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/eventHooks/{eventHookId}/lifecycle/activate"
        let eventHookIdPreEscape = "\(APIHelper.mapValueToPathItem(eventHookId))"
        let eventHookIdPostEscape = eventHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventHookId}", with: eventHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<EventHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventHook: (body)  
     - returns: AnyPublisher<EventHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createEventHook(eventHook: EventHook) -> AnyPublisher<EventHook, Error> {
        return Future<EventHook, Error>.init { promise in
            guard let builder = self.createEventHookWithRequestBuilder(eventHook: eventHook) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter eventHook: (body)  
     - parameter completion: completion handler to receive the result
     */
    func createEventHook(eventHook: EventHook, completion: @escaping ((_ result: Swift.Result<EventHook, Error>) -> Void)) {
        guard let builder = createEventHookWithRequestBuilder(eventHook: eventHook) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func createEventHookWithRequestBuilder(eventHook: EventHook) -> RequestBuilder<EventHook>? {
        guard let api = api else {
            return nil
        }
        let path = "/api/v1/eventHooks"
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventHook)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<EventHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventHookId: (path)  
     - returns: AnyPublisher<EventHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deactivateEventHook(eventHookId: String) -> AnyPublisher<EventHook, Error> {
        return Future<EventHook, Error>.init { promise in
            guard let builder = self.deactivateEventHookWithRequestBuilder(eventHookId: eventHookId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter eventHookId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deactivateEventHook(eventHookId: String, completion: @escaping ((_ result: Swift.Result<EventHook, Error>) -> Void)) {
        guard let builder = deactivateEventHookWithRequestBuilder(eventHookId: eventHookId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func deactivateEventHookWithRequestBuilder(eventHookId: String) -> RequestBuilder<EventHook>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/eventHooks/{eventHookId}/lifecycle/deactivate"
        let eventHookIdPreEscape = "\(APIHelper.mapValueToPathItem(eventHookId))"
        let eventHookIdPostEscape = eventHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventHookId}", with: eventHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<EventHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventHookId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deleteEventHook(eventHookId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            guard let builder = self.deleteEventHookWithRequestBuilder(eventHookId: eventHookId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter eventHookId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deleteEventHook(eventHookId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        guard let builder = deleteEventHookWithRequestBuilder(eventHookId: eventHookId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func deleteEventHookWithRequestBuilder(eventHookId: String) -> RequestBuilder<Void>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/eventHooks/{eventHookId}"
        let eventHookIdPreEscape = "\(APIHelper.mapValueToPathItem(eventHookId))"
        let eventHookIdPostEscape = eventHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventHookId}", with: eventHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = api.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(api: api, method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventHookId: (path)  
     - returns: AnyPublisher<EventHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getEventHook(eventHookId: String) -> AnyPublisher<EventHook, Error> {
        return Future<EventHook, Error>.init { promise in
            guard let builder = self.getEventHookWithRequestBuilder(eventHookId: eventHookId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter eventHookId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getEventHook(eventHookId: String, completion: @escaping ((_ result: Swift.Result<EventHook, Error>) -> Void)) {
        guard let builder = getEventHookWithRequestBuilder(eventHookId: eventHookId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func getEventHookWithRequestBuilder(eventHookId: String) -> RequestBuilder<EventHook>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/eventHooks/{eventHookId}"
        let eventHookIdPreEscape = "\(APIHelper.mapValueToPathItem(eventHookId))"
        let eventHookIdPostEscape = eventHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventHookId}", with: eventHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<EventHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - returns: AnyPublisher<[EventHook], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listEventHooks() -> AnyPublisher<[EventHook], Error> {
        return Future<[EventHook], Error>.init { promise in
            guard let builder = self.listEventHooksWithRequestBuilder() else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter completion: completion handler to receive the result
     */
    func listEventHooks(completion: @escaping ((_ result: Swift.Result<[EventHook], Error>) -> Void)) {
        guard let builder = listEventHooksWithRequestBuilder() else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listEventHooksWithRequestBuilder() -> RequestBuilder<[EventHook]>? {
        guard let api = api else {
            return nil
        }
        let path = "/api/v1/eventHooks"
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[EventHook]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventHookId: (path)  
     - parameter eventHook: (body)  
     - returns: AnyPublisher<EventHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateEventHook(eventHookId: String, eventHook: EventHook) -> AnyPublisher<EventHook, Error> {
        return Future<EventHook, Error>.init { promise in
            guard let builder = self.updateEventHookWithRequestBuilder(eventHookId: eventHookId, eventHook: eventHook) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter eventHookId: (path)  
     - parameter eventHook: (body)  
     - parameter completion: completion handler to receive the result
     */
    func updateEventHook(eventHookId: String, eventHook: EventHook, completion: @escaping ((_ result: Swift.Result<EventHook, Error>) -> Void)) {
        guard let builder = updateEventHookWithRequestBuilder(eventHookId: eventHookId, eventHook: eventHook) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func updateEventHookWithRequestBuilder(eventHookId: String, eventHook: EventHook) -> RequestBuilder<EventHook>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/eventHooks/{eventHookId}"
        let eventHookIdPreEscape = "\(APIHelper.mapValueToPathItem(eventHookId))"
        let eventHookIdPostEscape = eventHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventHookId}", with: eventHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventHook)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<EventHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventHookId: (path)  
     - returns: AnyPublisher<EventHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func verifyEventHook(eventHookId: String) -> AnyPublisher<EventHook, Error> {
        return Future<EventHook, Error>.init { promise in
            guard let builder = self.verifyEventHookWithRequestBuilder(eventHookId: eventHookId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter eventHookId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func verifyEventHook(eventHookId: String, completion: @escaping ((_ result: Swift.Result<EventHook, Error>) -> Void)) {
        guard let builder = verifyEventHookWithRequestBuilder(eventHookId: eventHookId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func verifyEventHookWithRequestBuilder(eventHookId: String) -> RequestBuilder<EventHook>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/eventHooks/{eventHookId}/lifecycle/verify"
        let eventHookIdPreEscape = "\(APIHelper.mapValueToPathItem(eventHookId))"
        let eventHookIdPostEscape = eventHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventHookId}", with: eventHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<EventHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
