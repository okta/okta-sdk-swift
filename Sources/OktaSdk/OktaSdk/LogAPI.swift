//
// LogAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public struct LogAPI {
    internal let configuration: OktaClient.Configuration
    internal let queue: DispatchQueue

    internal init(configuration: OktaClient.Configuration, queue: DispatchQueue) {
        self.configuration = configuration
        self.queue = queue
    }

    /**
     Fetch a list of events from your Okta organization system log.
     
     - parameter since: (query)  (optional)
     - parameter until: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter limit: (query)  (optional, default to 100)
     - parameter sortOrder: (query)  (optional, default to "ASCENDING")
     - parameter after: (query)  (optional)
     - returns: AnyPublisher<[LogEvent], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getLogs(since: Date? = nil, until: Date? = nil, filter: String? = nil, q: String? = nil, limit: Int? = nil, sortOrder: String? = nil, after: String? = nil) -> AnyPublisher<[LogEvent], Error> {
        return Future<[LogEvent], Error>.init { promise in
            getLogsWithRequestBuilder(since: since, until: until, filter: filter, q: q, limit: limit, sortOrder: sortOrder, after: after).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Fetch a list of events from your Okta organization system log.
     
     - parameter since: (query)  (optional)
     - parameter until: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter limit: (query)  (optional, default to 100)
     - parameter sortOrder: (query)  (optional, default to "ASCENDING")
     - parameter after: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func getLogs(since: Date? = nil, until: Date? = nil, filter: String? = nil, q: String? = nil, limit: Int? = nil, sortOrder: String? = nil, after: String? = nil, completion: @escaping ((_ result: Swift.Result<[LogEvent], Error>) -> Void)) {
        getLogsWithRequestBuilder(since: since, until: until, filter: filter, q: q, limit: limit, sortOrder: sortOrder, after: after).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Fetch a list of events from your Okta organization system log.
     - GET /api/v1/logs
     - The Okta System Log API provides read access to your organizationâ€™s system log. This API provides more functionality than the Events API
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter since: (query)  (optional)
     - parameter until: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter limit: (query)  (optional, default to 100)
     - parameter sortOrder: (query)  (optional, default to "ASCENDING")
     - parameter after: (query)  (optional)
     - returns: RequestBuilder<[LogEvent]> 
     */
    public func getLogsWithRequestBuilder(since: Date? = nil, until: Date? = nil, filter: String? = nil, q: String? = nil, limit: Int? = nil, sortOrder: String? = nil, after: String? = nil) -> RequestBuilder<[LogEvent]> {
        let path = "/api/v1/logs"
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON(),
            "until": until?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "q": q?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sortOrder": sortOrder?.encodeToJSON(),
            "after": after?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[LogEvent]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
