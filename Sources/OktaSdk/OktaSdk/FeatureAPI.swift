//
// FeatureAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public struct FeatureAPI {
    internal let configuration: OktaClient.Configuration
    internal let queue: DispatchQueue

    internal init(configuration: OktaClient.Configuration, queue: DispatchQueue) {
        self.configuration = configuration
        self.queue = queue
    }

    /**

     - parameter featureId: (path)  
     - returns: AnyPublisher<Feature, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getFeature(featureId: String) -> AnyPublisher<Feature, Error> {
        return Future<Feature, Error>.init { promise in
            getFeatureWithRequestBuilder(featureId: featureId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter featureId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getFeature(featureId: String, completion: @escaping ((_ result: Swift.Result<Feature, Error>) -> Void)) {
        getFeatureWithRequestBuilder(featureId: featureId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/features/{featureId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter featureId: (path)  
     - returns: RequestBuilder<Feature> 
     */
    public func getFeatureWithRequestBuilder(featureId: String) -> RequestBuilder<Feature> {
        var path = "/api/v1/features/{featureId}"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Feature>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter featureId: (path)  
     - returns: AnyPublisher<[Feature], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listFeatureDependencies(featureId: String) -> AnyPublisher<[Feature], Error> {
        return Future<[Feature], Error>.init { promise in
            listFeatureDependenciesWithRequestBuilder(featureId: featureId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter featureId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listFeatureDependencies(featureId: String, completion: @escaping ((_ result: Swift.Result<[Feature], Error>) -> Void)) {
        listFeatureDependenciesWithRequestBuilder(featureId: featureId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/features/{featureId}/dependencies
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter featureId: (path)  
     - returns: RequestBuilder<[Feature]> 
     */
    public func listFeatureDependenciesWithRequestBuilder(featureId: String) -> RequestBuilder<[Feature]> {
        var path = "/api/v1/features/{featureId}/dependencies"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[Feature]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter featureId: (path)  
     - returns: AnyPublisher<[Feature], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listFeatureDependents(featureId: String) -> AnyPublisher<[Feature], Error> {
        return Future<[Feature], Error>.init { promise in
            listFeatureDependentsWithRequestBuilder(featureId: featureId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter featureId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listFeatureDependents(featureId: String, completion: @escaping ((_ result: Swift.Result<[Feature], Error>) -> Void)) {
        listFeatureDependentsWithRequestBuilder(featureId: featureId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/features/{featureId}/dependents
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter featureId: (path)  
     - returns: RequestBuilder<[Feature]> 
     */
    public func listFeatureDependentsWithRequestBuilder(featureId: String) -> RequestBuilder<[Feature]> {
        var path = "/api/v1/features/{featureId}/dependents"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[Feature]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - returns: AnyPublisher<[Feature], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listFeatures() -> AnyPublisher<[Feature], Error> {
        return Future<[Feature], Error>.init { promise in
            listFeaturesWithRequestBuilder().execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter completion: completion handler to receive the result
     */
    func listFeatures(completion: @escaping ((_ result: Swift.Result<[Feature], Error>) -> Void)) {
        listFeaturesWithRequestBuilder().execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - GET /api/v1/features
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - returns: RequestBuilder<[Feature]> 
     */
    public func listFeaturesWithRequestBuilder() -> RequestBuilder<[Feature]> {
        let path = "/api/v1/features"
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[Feature]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter featureId: (path)  
     - parameter lifecycle: (path)  
     - parameter mode: (query)  (optional)
     - returns: AnyPublisher<Feature, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateFeatureLifecycle(featureId: String, lifecycle: String, mode: String? = nil) -> AnyPublisher<Feature, Error> {
        return Future<Feature, Error>.init { promise in
            updateFeatureLifecycleWithRequestBuilder(featureId: featureId, lifecycle: lifecycle, mode: mode).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter featureId: (path)  
     - parameter lifecycle: (path)  
     - parameter mode: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func updateFeatureLifecycle(featureId: String, lifecycle: String, mode: String? = nil, completion: @escaping ((_ result: Swift.Result<Feature, Error>) -> Void)) {
        updateFeatureLifecycleWithRequestBuilder(featureId: featureId, lifecycle: lifecycle, mode: mode).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /api/v1/features/{featureId}/{lifecycle}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter featureId: (path)  
     - parameter lifecycle: (path)  
     - parameter mode: (query)  (optional)
     - returns: RequestBuilder<Feature> 
     */
    public func updateFeatureLifecycleWithRequestBuilder(featureId: String, lifecycle: String, mode: String? = nil) -> RequestBuilder<Feature> {
        var path = "/api/v1/features/{featureId}/{lifecycle}"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let lifecyclePreEscape = "\(APIHelper.mapValueToPathItem(lifecycle))"
        let lifecyclePostEscape = lifecyclePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lifecycle}", with: lifecyclePostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "mode": mode?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Feature>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
