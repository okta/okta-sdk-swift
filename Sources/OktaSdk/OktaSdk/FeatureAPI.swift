//
// FeatureAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public class FeatureAPI {
    internal weak var api: OktaSdkAPI?

    internal init(api: OktaSdkAPI) {
        self.api = api
    }

    /**

     - parameter featureId: (path)  
     - returns: AnyPublisher<Feature, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getFeature(featureId: String) -> AnyPublisher<Feature, Error> {
        return Future<Feature, Error>.init { promise in
            guard let builder = self.getFeatureWithRequestBuilder(featureId: featureId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter featureId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getFeature(featureId: String, completion: @escaping ((_ result: Swift.Result<Feature, Error>) -> Void)) {
        guard let builder = getFeatureWithRequestBuilder(featureId: featureId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func getFeatureWithRequestBuilder(featureId: String) -> RequestBuilder<Feature>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/features/{featureId}"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Feature>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter featureId: (path)  
     - returns: AnyPublisher<[Feature], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listFeatureDependencies(featureId: String) -> AnyPublisher<[Feature], Error> {
        return Future<[Feature], Error>.init { promise in
            guard let builder = self.listFeatureDependenciesWithRequestBuilder(featureId: featureId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter featureId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listFeatureDependencies(featureId: String, completion: @escaping ((_ result: Swift.Result<[Feature], Error>) -> Void)) {
        guard let builder = listFeatureDependenciesWithRequestBuilder(featureId: featureId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listFeatureDependenciesWithRequestBuilder(featureId: String) -> RequestBuilder<[Feature]>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/features/{featureId}/dependencies"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[Feature]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter featureId: (path)  
     - returns: AnyPublisher<[Feature], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listFeatureDependents(featureId: String) -> AnyPublisher<[Feature], Error> {
        return Future<[Feature], Error>.init { promise in
            guard let builder = self.listFeatureDependentsWithRequestBuilder(featureId: featureId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter featureId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func listFeatureDependents(featureId: String, completion: @escaping ((_ result: Swift.Result<[Feature], Error>) -> Void)) {
        guard let builder = listFeatureDependentsWithRequestBuilder(featureId: featureId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listFeatureDependentsWithRequestBuilder(featureId: String) -> RequestBuilder<[Feature]>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/features/{featureId}/dependents"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[Feature]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - returns: AnyPublisher<[Feature], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listFeatures() -> AnyPublisher<[Feature], Error> {
        return Future<[Feature], Error>.init { promise in
            guard let builder = self.listFeaturesWithRequestBuilder() else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter completion: completion handler to receive the result
     */
    func listFeatures(completion: @escaping ((_ result: Swift.Result<[Feature], Error>) -> Void)) {
        guard let builder = listFeaturesWithRequestBuilder() else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listFeaturesWithRequestBuilder() -> RequestBuilder<[Feature]>? {
        guard let api = api else {
            return nil
        }
        let path = "/api/v1/features"
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[Feature]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter featureId: (path)  
     - parameter lifecycle: (path)  
     - parameter mode: (query)  (optional)
     - returns: AnyPublisher<Feature, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateFeatureLifecycle(featureId: String, lifecycle: String, mode: String? = nil) -> AnyPublisher<Feature, Error> {
        return Future<Feature, Error>.init { promise in
            guard let builder = self.updateFeatureLifecycleWithRequestBuilder(featureId: featureId, lifecycle: lifecycle, mode: mode) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter featureId: (path)  
     - parameter lifecycle: (path)  
     - parameter mode: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func updateFeatureLifecycle(featureId: String, lifecycle: String, mode: String? = nil, completion: @escaping ((_ result: Swift.Result<Feature, Error>) -> Void)) {
        guard let builder = updateFeatureLifecycleWithRequestBuilder(featureId: featureId, lifecycle: lifecycle, mode: mode) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func updateFeatureLifecycleWithRequestBuilder(featureId: String, lifecycle: String, mode: String? = nil) -> RequestBuilder<Feature>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/features/{featureId}/{lifecycle}"
        let featureIdPreEscape = "\(APIHelper.mapValueToPathItem(featureId))"
        let featureIdPostEscape = featureIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{featureId}", with: featureIdPostEscape, options: .literal, range: nil)
        let lifecyclePreEscape = "\(APIHelper.mapValueToPathItem(lifecycle))"
        let lifecyclePostEscape = lifecyclePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lifecycle}", with: lifecyclePostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "mode": mode?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Feature>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
