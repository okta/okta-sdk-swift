//
// NetworkZoneAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public struct NetworkZoneAPI {
    internal let configuration: OktaClient.Configuration
    internal let queue: DispatchQueue

    internal init(configuration: OktaClient.Configuration, queue: DispatchQueue) {
        self.configuration = configuration
        self.queue = queue
    }

    /**
     Activate Network Zone
     
     - parameter zoneId: (path)  
     - returns: AnyPublisher<NetworkZone, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func activateNetworkZone(zoneId: String) -> AnyPublisher<NetworkZone, Error> {
        return Future<NetworkZone, Error>.init { promise in
            activateNetworkZoneWithRequestBuilder(zoneId: zoneId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Activate Network Zone
     
     - parameter zoneId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func activateNetworkZone(zoneId: String, completion: @escaping ((_ result: Swift.Result<NetworkZone, Error>) -> Void)) {
        activateNetworkZoneWithRequestBuilder(zoneId: zoneId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Activate Network Zone
     - POST /api/v1/zones/{zoneId}/lifecycle/activate
     - Activate Network Zone
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter zoneId: (path)  
     - returns: RequestBuilder<NetworkZone> 
     */
    public func activateNetworkZoneWithRequestBuilder(zoneId: String) -> RequestBuilder<NetworkZone> {
        var path = "/api/v1/zones/{zoneId}/lifecycle/activate"
        let zoneIdPreEscape = "\(APIHelper.mapValueToPathItem(zoneId))"
        let zoneIdPostEscape = zoneIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{zoneId}", with: zoneIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<NetworkZone>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add Network Zone
     
     - parameter zone: (body)  
     - returns: AnyPublisher<NetworkZone, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createNetworkZone(zone: NetworkZone) -> AnyPublisher<NetworkZone, Error> {
        return Future<NetworkZone, Error>.init { promise in
            createNetworkZoneWithRequestBuilder(zone: zone).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Add Network Zone
     
     - parameter zone: (body)  
     - parameter completion: completion handler to receive the result
     */
    func createNetworkZone(zone: NetworkZone, completion: @escaping ((_ result: Swift.Result<NetworkZone, Error>) -> Void)) {
        createNetworkZoneWithRequestBuilder(zone: zone).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Add Network Zone
     - POST /api/v1/zones
     - Adds a new network zone to your Okta organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter zone: (body)  
     - returns: RequestBuilder<NetworkZone> 
     */
    public func createNetworkZoneWithRequestBuilder(zone: NetworkZone) -> RequestBuilder<NetworkZone> {
        let path = "/api/v1/zones"
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: zone)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<NetworkZone>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Deactivate Network Zone
     
     - parameter zoneId: (path)  
     - returns: AnyPublisher<NetworkZone, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deactivateNetworkZone(zoneId: String) -> AnyPublisher<NetworkZone, Error> {
        return Future<NetworkZone, Error>.init { promise in
            deactivateNetworkZoneWithRequestBuilder(zoneId: zoneId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Deactivate Network Zone
     
     - parameter zoneId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deactivateNetworkZone(zoneId: String, completion: @escaping ((_ result: Swift.Result<NetworkZone, Error>) -> Void)) {
        deactivateNetworkZoneWithRequestBuilder(zoneId: zoneId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Deactivate Network Zone
     - POST /api/v1/zones/{zoneId}/lifecycle/deactivate
     - Deactivates a network zone.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter zoneId: (path)  
     - returns: RequestBuilder<NetworkZone> 
     */
    public func deactivateNetworkZoneWithRequestBuilder(zoneId: String) -> RequestBuilder<NetworkZone> {
        var path = "/api/v1/zones/{zoneId}/lifecycle/deactivate"
        let zoneIdPreEscape = "\(APIHelper.mapValueToPathItem(zoneId))"
        let zoneIdPostEscape = zoneIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{zoneId}", with: zoneIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<NetworkZone>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete Network Zone
     
     - parameter zoneId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deleteNetworkZone(zoneId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            deleteNetworkZoneWithRequestBuilder(zoneId: zoneId).execute(queue) { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Delete Network Zone
     
     - parameter zoneId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deleteNetworkZone(zoneId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        deleteNetworkZoneWithRequestBuilder(zoneId: zoneId).execute(queue) { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Delete Network Zone
     - DELETE /api/v1/zones/{zoneId}
     - Removes network zone.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter zoneId: (path)  
     - returns: RequestBuilder<Void> 
     */
    public func deleteNetworkZoneWithRequestBuilder(zoneId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/zones/{zoneId}"
        let zoneIdPreEscape = "\(APIHelper.mapValueToPathItem(zoneId))"
        let zoneIdPostEscape = zoneIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{zoneId}", with: zoneIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = OktaSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Network Zone
     
     - parameter zoneId: (path)  
     - returns: AnyPublisher<NetworkZone, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getNetworkZone(zoneId: String) -> AnyPublisher<NetworkZone, Error> {
        return Future<NetworkZone, Error>.init { promise in
            getNetworkZoneWithRequestBuilder(zoneId: zoneId).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Get Network Zone
     
     - parameter zoneId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getNetworkZone(zoneId: String, completion: @escaping ((_ result: Swift.Result<NetworkZone, Error>) -> Void)) {
        getNetworkZoneWithRequestBuilder(zoneId: zoneId).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get Network Zone
     - GET /api/v1/zones/{zoneId}
     - Fetches a network zone from your Okta organization by `id`.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter zoneId: (path)  
     - returns: RequestBuilder<NetworkZone> 
     */
    public func getNetworkZoneWithRequestBuilder(zoneId: String) -> RequestBuilder<NetworkZone> {
        var path = "/api/v1/zones/{zoneId}"
        let zoneIdPreEscape = "\(APIHelper.mapValueToPathItem(zoneId))"
        let zoneIdPostEscape = zoneIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{zoneId}", with: zoneIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<NetworkZone>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     List Network Zones
     
     - parameter after: (query) Specifies the pagination cursor for the next page of network zones (optional)
     - parameter limit: (query) Specifies the number of results for a page (optional, default to -1)
     - parameter filter: (query) Filters zones by usage or id expression (optional)
     - returns: AnyPublisher<[NetworkZone], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listNetworkZones(after: String? = nil, limit: Int? = nil, filter: String? = nil) -> AnyPublisher<[NetworkZone], Error> {
        return Future<[NetworkZone], Error>.init { promise in
            listNetworkZonesWithRequestBuilder(after: after, limit: limit, filter: filter).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     List Network Zones
     
     - parameter after: (query) Specifies the pagination cursor for the next page of network zones (optional)
     - parameter limit: (query) Specifies the number of results for a page (optional, default to -1)
     - parameter filter: (query) Filters zones by usage or id expression (optional)
     - parameter completion: completion handler to receive the result
     */
    func listNetworkZones(after: String? = nil, limit: Int? = nil, filter: String? = nil, completion: @escaping ((_ result: Swift.Result<[NetworkZone], Error>) -> Void)) {
        listNetworkZonesWithRequestBuilder(after: after, limit: limit, filter: filter).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List Network Zones
     - GET /api/v1/zones
     - Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter after: (query) Specifies the pagination cursor for the next page of network zones (optional)
     - parameter limit: (query) Specifies the number of results for a page (optional, default to -1)
     - parameter filter: (query) Filters zones by usage or id expression (optional)
     - returns: RequestBuilder<[NetworkZone]> 
     */
    public func listNetworkZonesWithRequestBuilder(after: String? = nil, limit: Int? = nil, filter: String? = nil) -> RequestBuilder<[NetworkZone]> {
        let path = "/api/v1/zones"
        let URLString = configuration.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[NetworkZone]>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update Network Zone
     
     - parameter zoneId: (path)  
     - parameter zone: (body)  
     - returns: AnyPublisher<NetworkZone, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateNetworkZone(zoneId: String, zone: NetworkZone) -> AnyPublisher<NetworkZone, Error> {
        return Future<NetworkZone, Error>.init { promise in
            updateNetworkZoneWithRequestBuilder(zoneId: zoneId, zone: zone).execute(queue) { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**
     Update Network Zone
     
     - parameter zoneId: (path)  
     - parameter zone: (body)  
     - parameter completion: completion handler to receive the result
     */
    func updateNetworkZone(zoneId: String, zone: NetworkZone, completion: @escaping ((_ result: Swift.Result<NetworkZone, Error>) -> Void)) {
        updateNetworkZoneWithRequestBuilder(zoneId: zoneId, zone: zone).execute(queue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update Network Zone
     - PUT /api/v1/zones/{zoneId}
     - Updates a network zone in your organization.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter zoneId: (path)  
     - parameter zone: (body)  
     - returns: RequestBuilder<NetworkZone> 
     */
    public func updateNetworkZoneWithRequestBuilder(zoneId: String, zone: NetworkZone) -> RequestBuilder<NetworkZone> {
        var path = "/api/v1/zones/{zoneId}"
        let zoneIdPreEscape = "\(APIHelper.mapValueToPathItem(zoneId))"
        let zoneIdPostEscape = zoneIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{zoneId}", with: zoneIdPostEscape, options: .literal, range: nil)
        let URLString = configuration.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: zone)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(configuration.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<NetworkZone>.Type = OktaSdkAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
