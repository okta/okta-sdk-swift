//
// InlineHookAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
import AnyCodable

extension OktaSdk.API {


public class InlineHookAPI {
    internal weak var api: OktaSdkAPI?

    internal init(api: OktaSdkAPI) {
        self.api = api
    }

    /**

     - parameter inlineHookId: (path)  
     - returns: AnyPublisher<InlineHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func activateInlineHook(inlineHookId: String) -> AnyPublisher<InlineHook, Error> {
        return Future<InlineHook, Error>.init { promise in
            guard let builder = self.activateInlineHookWithRequestBuilder(inlineHookId: inlineHookId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter inlineHookId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func activateInlineHook(inlineHookId: String, completion: @escaping ((_ result: Swift.Result<InlineHook, Error>) -> Void)) {
        guard let builder = activateInlineHookWithRequestBuilder(inlineHookId: inlineHookId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func activateInlineHookWithRequestBuilder(inlineHookId: String) -> RequestBuilder<InlineHook>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/inlineHooks/{inlineHookId}/lifecycle/activate"
        let inlineHookIdPreEscape = "\(APIHelper.mapValueToPathItem(inlineHookId))"
        let inlineHookIdPostEscape = inlineHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inlineHookId}", with: inlineHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<InlineHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter inlineHook: (body)  
     - returns: AnyPublisher<InlineHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func createInlineHook(inlineHook: InlineHook) -> AnyPublisher<InlineHook, Error> {
        return Future<InlineHook, Error>.init { promise in
            guard let builder = self.createInlineHookWithRequestBuilder(inlineHook: inlineHook) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter inlineHook: (body)  
     - parameter completion: completion handler to receive the result
     */
    func createInlineHook(inlineHook: InlineHook, completion: @escaping ((_ result: Swift.Result<InlineHook, Error>) -> Void)) {
        guard let builder = createInlineHookWithRequestBuilder(inlineHook: inlineHook) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func createInlineHookWithRequestBuilder(inlineHook: InlineHook) -> RequestBuilder<InlineHook>? {
        guard let api = api else {
            return nil
        }
        let path = "/api/v1/inlineHooks"
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineHook)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<InlineHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter inlineHookId: (path)  
     - returns: AnyPublisher<InlineHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deactivateInlineHook(inlineHookId: String) -> AnyPublisher<InlineHook, Error> {
        return Future<InlineHook, Error>.init { promise in
            guard let builder = self.deactivateInlineHookWithRequestBuilder(inlineHookId: inlineHookId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter inlineHookId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deactivateInlineHook(inlineHookId: String, completion: @escaping ((_ result: Swift.Result<InlineHook, Error>) -> Void)) {
        guard let builder = deactivateInlineHookWithRequestBuilder(inlineHookId: inlineHookId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func deactivateInlineHookWithRequestBuilder(inlineHookId: String) -> RequestBuilder<InlineHook>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/inlineHooks/{inlineHookId}/lifecycle/deactivate"
        let inlineHookIdPreEscape = "\(APIHelper.mapValueToPathItem(inlineHookId))"
        let inlineHookIdPostEscape = inlineHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inlineHookId}", with: inlineHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<InlineHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter inlineHookId: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func deleteInlineHook(inlineHookId: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error>.init { promise in
            guard let builder = self.deleteInlineHookWithRequestBuilder(inlineHookId: inlineHookId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter inlineHookId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func deleteInlineHook(inlineHookId: String, completion: @escaping ((_ result: Swift.Result<Void, Error>) -> Void)) {
        guard let builder = deleteInlineHookWithRequestBuilder(inlineHookId: inlineHookId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case .success:
                completion(.success(()))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func deleteInlineHookWithRequestBuilder(inlineHookId: String) -> RequestBuilder<Void>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/inlineHooks/{inlineHookId}"
        let inlineHookIdPreEscape = "\(APIHelper.mapValueToPathItem(inlineHookId))"
        let inlineHookIdPostEscape = inlineHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inlineHookId}", with: inlineHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<Void>.Type = api.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(api: api, method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter inlineHookId: (path)  
     - parameter payloadData: (body)  
     - returns: AnyPublisher<InlineHookResponse, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func executeInlineHook(inlineHookId: String, payloadData: AnyCodable) -> AnyPublisher<InlineHookResponse, Error> {
        return Future<InlineHookResponse, Error>.init { promise in
            guard let builder = self.executeInlineHookWithRequestBuilder(inlineHookId: inlineHookId, payloadData: payloadData) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter inlineHookId: (path)  
     - parameter payloadData: (body)  
     - parameter completion: completion handler to receive the result
     */
    func executeInlineHook(inlineHookId: String, payloadData: AnyCodable, completion: @escaping ((_ result: Swift.Result<InlineHookResponse, Error>) -> Void)) {
        guard let builder = executeInlineHookWithRequestBuilder(inlineHookId: inlineHookId, payloadData: payloadData) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func executeInlineHookWithRequestBuilder(inlineHookId: String, payloadData: AnyCodable) -> RequestBuilder<InlineHookResponse>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/inlineHooks/{inlineHookId}/execute"
        let inlineHookIdPreEscape = "\(APIHelper.mapValueToPathItem(inlineHookId))"
        let inlineHookIdPostEscape = inlineHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inlineHookId}", with: inlineHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payloadData)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<InlineHookResponse>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter inlineHookId: (path)  
     - returns: AnyPublisher<InlineHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func getInlineHook(inlineHookId: String) -> AnyPublisher<InlineHook, Error> {
        return Future<InlineHook, Error>.init { promise in
            guard let builder = self.getInlineHookWithRequestBuilder(inlineHookId: inlineHookId) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter inlineHookId: (path)  
     - parameter completion: completion handler to receive the result
     */
    func getInlineHook(inlineHookId: String, completion: @escaping ((_ result: Swift.Result<InlineHook, Error>) -> Void)) {
        guard let builder = getInlineHookWithRequestBuilder(inlineHookId: inlineHookId) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func getInlineHookWithRequestBuilder(inlineHookId: String) -> RequestBuilder<InlineHook>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/inlineHooks/{inlineHookId}"
        let inlineHookIdPreEscape = "\(APIHelper.mapValueToPathItem(inlineHookId))"
        let inlineHookIdPostEscape = inlineHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inlineHookId}", with: inlineHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<InlineHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter type: (query)  (optional)
     - returns: AnyPublisher<[InlineHook], Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func listInlineHooks(type: String? = nil) -> AnyPublisher<[InlineHook], Error> {
        return Future<[InlineHook], Error>.init { promise in
            guard let builder = self.listInlineHooksWithRequestBuilder(type: type) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter type: (query)  (optional)
     - parameter completion: completion handler to receive the result
     */
    func listInlineHooks(type: String? = nil, completion: @escaping ((_ result: Swift.Result<[InlineHook], Error>) -> Void)) {
        guard let builder = listInlineHooksWithRequestBuilder(type: type) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func listInlineHooksWithRequestBuilder(type: String? = nil) -> RequestBuilder<[InlineHook]>? {
        guard let api = api else {
            return nil
        }
        let path = "/api/v1/inlineHooks"
        let URLString = api.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<[InlineHook]>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter inlineHookId: (path)  
     - parameter inlineHook: (body)  
     - returns: AnyPublisher<InlineHook, Error>
     */
    #if canImport(Combine)
    @available(OSX 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    public func updateInlineHook(inlineHookId: String, inlineHook: InlineHook) -> AnyPublisher<InlineHook, Error> {
        return Future<InlineHook, Error>.init { promise in
            guard let builder = self.updateInlineHookWithRequestBuilder(inlineHookId: inlineHookId, inlineHook: inlineHook) else {
                promise(.failure(DecodableRequestBuilderError.nilAPI))
                return
            }
            builder.execute { result -> Void in
                switch result {
                case let .success(response):
                    promise(.success(response.body!))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    #endif
    /**

     - parameter inlineHookId: (path)  
     - parameter inlineHook: (body)  
     - parameter completion: completion handler to receive the result
     */
    func updateInlineHook(inlineHookId: String, inlineHook: InlineHook, completion: @escaping ((_ result: Swift.Result<InlineHook, Error>) -> Void)) {
        guard let builder = updateInlineHookWithRequestBuilder(inlineHookId: inlineHookId, inlineHook: inlineHook) else {
            completion(.failure(DecodableRequestBuilderError.nilAPI))
            return
        }
        builder.execute { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    internal func updateInlineHookWithRequestBuilder(inlineHookId: String, inlineHook: InlineHook) -> RequestBuilder<InlineHook>? {
        guard let api = api else {
            return nil
        }
        var path = "/api/v1/inlineHooks/{inlineHookId}"
        let inlineHookIdPreEscape = "\(APIHelper.mapValueToPathItem(inlineHookId))"
        let inlineHookIdPostEscape = inlineHookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inlineHookId}", with: inlineHookIdPostEscape, options: .literal, range: nil)
        let URLString = api.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineHook)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        var headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        headerParameters.merge(api.customHeaders) { lhs, rhs in
            return lhs
        }

        let requestBuilder: RequestBuilder<InlineHook>.Type = api.requestBuilderFactory.getBuilder()

        return requestBuilder.init(api: api, method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
}
