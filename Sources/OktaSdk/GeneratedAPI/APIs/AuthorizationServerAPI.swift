//
// AuthorizationServerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AuthorizationServerAPI {
    /**

     - parameter authServerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateAuthorizationServer(authServerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        activateAuthorizationServerWithRequestBuilder(authServerId: authServerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/lifecycle/activate
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func activateAuthorizationServerWithRequestBuilder(authServerId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/lifecycle/activate"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateAuthorizationServerPolicy(authServerId: String, policyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        activateAuthorizationServerPolicyWithRequestBuilder(authServerId: authServerId, policyId: policyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate
     - Activate Authorization Server Policy
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func activateAuthorizationServerPolicyWithRequestBuilder(authServerId: String, policyId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateAuthorizationServerPolicyRule(authServerId: String, policyId: String, ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        activateAuthorizationServerPolicyRuleWithRequestBuilder(authServerId: authServerId, policyId: policyId, ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate
     - Activate Authorization Server Policy Rule
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func activateAuthorizationServerPolicyRuleWithRequestBuilder(authServerId: String, policyId: String, ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authorizationServer: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAuthorizationServer(authorizationServer: AuthorizationServer, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthorizationServer?, _ error: Error?) -> Void)) {
        createAuthorizationServerWithRequestBuilder(authorizationServer: authorizationServer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authorizationServer: (body)  
     - returns: RequestBuilder<AuthorizationServer> 
     */
    open class func createAuthorizationServerWithRequestBuilder(authorizationServer: AuthorizationServer) -> RequestBuilder<AuthorizationServer> {
        let path = "/api/v1/authorizationServers"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authorizationServer)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthorizationServer>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter policy: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAuthorizationServerPolicy(authServerId: String, policy: AuthorizationServerPolicy, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthorizationServerPolicy?, _ error: Error?) -> Void)) {
        createAuthorizationServerPolicyWithRequestBuilder(authServerId: authServerId, policy: policy).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/policies
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter policy: (body)  
     - returns: RequestBuilder<AuthorizationServerPolicy> 
     */
    open class func createAuthorizationServerPolicyWithRequestBuilder(authServerId: String, policy: AuthorizationServerPolicy) -> RequestBuilder<AuthorizationServerPolicy> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policy)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthorizationServerPolicy>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - parameter policyRule: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAuthorizationServerPolicyRule(policyId: String, authServerId: String, policyRule: AuthorizationServerPolicyRule, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthorizationServerPolicyRule?, _ error: Error?) -> Void)) {
        createAuthorizationServerPolicyRuleWithRequestBuilder(policyId: policyId, authServerId: authServerId, policyRule: policyRule).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules
     - Creates a policy rule for the specified Custom Authorization Server and Policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - parameter policyRule: (body)  
     - returns: RequestBuilder<AuthorizationServerPolicyRule> 
     */
    open class func createAuthorizationServerPolicyRuleWithRequestBuilder(policyId: String, authServerId: String, policyRule: AuthorizationServerPolicyRule) -> RequestBuilder<AuthorizationServerPolicyRule> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyRule)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthorizationServerPolicyRule>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter oAuth2Claim: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createOAuth2Claim(authServerId: String, oAuth2Claim: OAuth2Claim, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Claim?, _ error: Error?) -> Void)) {
        createOAuth2ClaimWithRequestBuilder(authServerId: authServerId, oAuth2Claim: oAuth2Claim).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/claims
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter oAuth2Claim: (body)  
     - returns: RequestBuilder<OAuth2Claim> 
     */
    open class func createOAuth2ClaimWithRequestBuilder(authServerId: String, oAuth2Claim: OAuth2Claim) -> RequestBuilder<OAuth2Claim> {
        var path = "/api/v1/authorizationServers/{authServerId}/claims"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2Claim)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2Claim>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter oAuth2Scope: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createOAuth2Scope(authServerId: String, oAuth2Scope: OAuth2Scope, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Scope?, _ error: Error?) -> Void)) {
        createOAuth2ScopeWithRequestBuilder(authServerId: authServerId, oAuth2Scope: oAuth2Scope).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/scopes
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter oAuth2Scope: (body)  
     - returns: RequestBuilder<OAuth2Scope> 
     */
    open class func createOAuth2ScopeWithRequestBuilder(authServerId: String, oAuth2Scope: OAuth2Scope) -> RequestBuilder<OAuth2Scope> {
        var path = "/api/v1/authorizationServers/{authServerId}/scopes"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2Scope)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2Scope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateAuthorizationServer(authServerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deactivateAuthorizationServerWithRequestBuilder(authServerId: authServerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/lifecycle/deactivate
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deactivateAuthorizationServerWithRequestBuilder(authServerId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/lifecycle/deactivate"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateAuthorizationServerPolicy(authServerId: String, policyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deactivateAuthorizationServerPolicyWithRequestBuilder(authServerId: authServerId, policyId: policyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate
     - Deactivate Authorization Server Policy
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deactivateAuthorizationServerPolicyWithRequestBuilder(authServerId: String, policyId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateAuthorizationServerPolicyRule(authServerId: String, policyId: String, ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deactivateAuthorizationServerPolicyRuleWithRequestBuilder(authServerId: authServerId, policyId: policyId, ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate
     - Deactivate Authorization Server Policy Rule
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter ruleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deactivateAuthorizationServerPolicyRuleWithRequestBuilder(authServerId: String, policyId: String, ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuthorizationServer(authServerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteAuthorizationServerWithRequestBuilder(authServerId: authServerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/authorizationServers/{authServerId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuthorizationServerWithRequestBuilder(authServerId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuthorizationServerPolicy(authServerId: String, policyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteAuthorizationServerPolicyWithRequestBuilder(authServerId: authServerId, policyId: policyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/authorizationServers/{authServerId}/policies/{policyId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuthorizationServerPolicyWithRequestBuilder(authServerId: String, policyId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteAuthorizationServerPolicyRuleWithRequestBuilder(policyId: policyId, authServerId: authServerId, ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}
     - Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - parameter ruleId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuthorizationServerPolicyRuleWithRequestBuilder(policyId: String, authServerId: String, ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter claimId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOAuth2Claim(authServerId: String, claimId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteOAuth2ClaimWithRequestBuilder(authServerId: authServerId, claimId: claimId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/authorizationServers/{authServerId}/claims/{claimId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter claimId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOAuth2ClaimWithRequestBuilder(authServerId: String, claimId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/claims/{claimId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let claimIdPreEscape = "\(APIHelper.mapValueToPathItem(claimId))"
        let claimIdPostEscape = claimIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{claimId}", with: claimIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter scopeId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOAuth2Scope(authServerId: String, scopeId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteOAuth2ScopeWithRequestBuilder(authServerId: authServerId, scopeId: scopeId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/authorizationServers/{authServerId}/scopes/{scopeId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter scopeId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOAuth2ScopeWithRequestBuilder(authServerId: String, scopeId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let scopeIdPreEscape = "\(APIHelper.mapValueToPathItem(scopeId))"
        let scopeIdPostEscape = scopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scopeId}", with: scopeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationServer(authServerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthorizationServer?, _ error: Error?) -> Void)) {
        getAuthorizationServerWithRequestBuilder(authServerId: authServerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - returns: RequestBuilder<AuthorizationServer> 
     */
    open class func getAuthorizationServerWithRequestBuilder(authServerId: String) -> RequestBuilder<AuthorizationServer> {
        var path = "/api/v1/authorizationServers/{authServerId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthorizationServer>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationServerPolicy(authServerId: String, policyId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthorizationServerPolicy?, _ error: Error?) -> Void)) {
        getAuthorizationServerPolicyWithRequestBuilder(authServerId: authServerId, policyId: policyId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/policies/{policyId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - returns: RequestBuilder<AuthorizationServerPolicy> 
     */
    open class func getAuthorizationServerPolicyWithRequestBuilder(authServerId: String, policyId: String) -> RequestBuilder<AuthorizationServerPolicy> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthorizationServerPolicy>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - parameter ruleId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthorizationServerPolicyRule?, _ error: Error?) -> Void)) {
        getAuthorizationServerPolicyRuleWithRequestBuilder(policyId: policyId, authServerId: authServerId, ruleId: ruleId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}
     - Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - parameter ruleId: (path)  
     - returns: RequestBuilder<AuthorizationServerPolicyRule> 
     */
    open class func getAuthorizationServerPolicyRuleWithRequestBuilder(policyId: String, authServerId: String, ruleId: String) -> RequestBuilder<AuthorizationServerPolicyRule> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthorizationServerPolicyRule>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter claimId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOAuth2Claim(authServerId: String, claimId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Claim?, _ error: Error?) -> Void)) {
        getOAuth2ClaimWithRequestBuilder(authServerId: authServerId, claimId: claimId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/claims/{claimId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter claimId: (path)  
     - returns: RequestBuilder<OAuth2Claim> 
     */
    open class func getOAuth2ClaimWithRequestBuilder(authServerId: String, claimId: String) -> RequestBuilder<OAuth2Claim> {
        var path = "/api/v1/authorizationServers/{authServerId}/claims/{claimId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let claimIdPreEscape = "\(APIHelper.mapValueToPathItem(claimId))"
        let claimIdPostEscape = claimIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{claimId}", with: claimIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2Claim>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter scopeId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOAuth2Scope(authServerId: String, scopeId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Scope?, _ error: Error?) -> Void)) {
        getOAuth2ScopeWithRequestBuilder(authServerId: authServerId, scopeId: scopeId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/scopes/{scopeId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter scopeId: (path)  
     - returns: RequestBuilder<OAuth2Scope> 
     */
    open class func getOAuth2ScopeWithRequestBuilder(authServerId: String, scopeId: String) -> RequestBuilder<OAuth2Scope> {
        var path = "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let scopeIdPreEscape = "\(APIHelper.mapValueToPathItem(scopeId))"
        let scopeIdPostEscape = scopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scopeId}", with: scopeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2Scope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - parameter expand: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRefreshTokenForAuthorizationServerAndClient(authServerId: String, clientId: String, tokenId: String, expand: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2RefreshToken?, _ error: Error?) -> Void)) {
        getRefreshTokenForAuthorizationServerAndClientWithRequestBuilder(authServerId: authServerId, clientId: clientId, tokenId: tokenId, expand: expand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - parameter expand: (query)  (optional)
     - returns: RequestBuilder<OAuth2RefreshToken> 
     */
    open class func getRefreshTokenForAuthorizationServerAndClientWithRequestBuilder(authServerId: String, clientId: String, tokenId: String, expand: String? = nil) -> RequestBuilder<OAuth2RefreshToken> {
        var path = "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2RefreshToken>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAuthorizationServerKeys(authServerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [JsonWebKey]?, _ error: Error?) -> Void)) {
        listAuthorizationServerKeysWithRequestBuilder(authServerId: authServerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/credentials/keys
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - returns: RequestBuilder<[JsonWebKey]> 
     */
    open class func listAuthorizationServerKeysWithRequestBuilder(authServerId: String) -> RequestBuilder<[JsonWebKey]> {
        var path = "/api/v1/authorizationServers/{authServerId}/credentials/keys"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[JsonWebKey]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAuthorizationServerPolicies(authServerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AuthorizationServerPolicy]?, _ error: Error?) -> Void)) {
        listAuthorizationServerPoliciesWithRequestBuilder(authServerId: authServerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/policies
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - returns: RequestBuilder<[AuthorizationServerPolicy]> 
     */
    open class func listAuthorizationServerPoliciesWithRequestBuilder(authServerId: String) -> RequestBuilder<[AuthorizationServerPolicy]> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[AuthorizationServerPolicy]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAuthorizationServerPolicyRules(policyId: String, authServerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AuthorizationServerPolicyRule]?, _ error: Error?) -> Void)) {
        listAuthorizationServerPolicyRulesWithRequestBuilder(policyId: policyId, authServerId: authServerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules
     - Enumerates all policy rules for the specified Custom Authorization Server and Policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - returns: RequestBuilder<[AuthorizationServerPolicyRule]> 
     */
    open class func listAuthorizationServerPolicyRulesWithRequestBuilder(policyId: String, authServerId: String) -> RequestBuilder<[AuthorizationServerPolicyRule]> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[AuthorizationServerPolicyRule]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter q: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAuthorizationServers(q: String? = nil, limit: String? = nil, after: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [AuthorizationServer]?, _ error: Error?) -> Void)) {
        listAuthorizationServersWithRequestBuilder(q: q, limit: limit, after: after).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter q: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter after: (query)  (optional)
     - returns: RequestBuilder<[AuthorizationServer]> 
     */
    open class func listAuthorizationServersWithRequestBuilder(q: String? = nil, limit: String? = nil, after: String? = nil) -> RequestBuilder<[AuthorizationServer]> {
        let path = "/api/v1/authorizationServers"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "after": after?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[AuthorizationServer]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listOAuth2Claims(authServerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [OAuth2Claim]?, _ error: Error?) -> Void)) {
        listOAuth2ClaimsWithRequestBuilder(authServerId: authServerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/claims
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - returns: RequestBuilder<[OAuth2Claim]> 
     */
    open class func listOAuth2ClaimsWithRequestBuilder(authServerId: String) -> RequestBuilder<[OAuth2Claim]> {
        var path = "/api/v1/authorizationServers/{authServerId}/claims"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OAuth2Claim]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listOAuth2ClientsForAuthorizationServer(authServerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [OAuth2Client]?, _ error: Error?) -> Void)) {
        listOAuth2ClientsForAuthorizationServerWithRequestBuilder(authServerId: authServerId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/clients
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - returns: RequestBuilder<[OAuth2Client]> 
     */
    open class func listOAuth2ClientsForAuthorizationServerWithRequestBuilder(authServerId: String) -> RequestBuilder<[OAuth2Client]> {
        var path = "/api/v1/authorizationServers/{authServerId}/clients"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OAuth2Client]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter q: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter cursor: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listOAuth2Scopes(authServerId: String, q: String? = nil, filter: String? = nil, cursor: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [OAuth2Scope]?, _ error: Error?) -> Void)) {
        listOAuth2ScopesWithRequestBuilder(authServerId: authServerId, q: q, filter: filter, cursor: cursor, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/scopes
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter q: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter cursor: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - returns: RequestBuilder<[OAuth2Scope]> 
     */
    open class func listOAuth2ScopesWithRequestBuilder(authServerId: String, q: String? = nil, filter: String? = nil, cursor: String? = nil, limit: Int? = nil) -> RequestBuilder<[OAuth2Scope]> {
        var path = "/api/v1/authorizationServers/{authServerId}/scopes"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "cursor": cursor?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OAuth2Scope]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter clientId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listRefreshTokensForAuthorizationServerAndClient(authServerId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [OAuth2RefreshToken]?, _ error: Error?) -> Void)) {
        listRefreshTokensForAuthorizationServerAndClientWithRequestBuilder(authServerId: authServerId, clientId: clientId, expand: expand, after: after, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter clientId: (path)  
     - parameter expand: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - returns: RequestBuilder<[OAuth2RefreshToken]> 
     */
    open class func listRefreshTokensForAuthorizationServerAndClientWithRequestBuilder(authServerId: String, clientId: String, expand: String? = nil, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[OAuth2RefreshToken]> {
        var path = "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expand": expand?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OAuth2RefreshToken]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeRefreshTokenForAuthorizationServerAndClient(authServerId: String, clientId: String, tokenId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        revokeRefreshTokenForAuthorizationServerAndClientWithRequestBuilder(authServerId: authServerId, clientId: clientId, tokenId: tokenId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter clientId: (path)  
     - parameter tokenId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func revokeRefreshTokenForAuthorizationServerAndClientWithRequestBuilder(authServerId: String, clientId: String, tokenId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tokenId}", with: tokenIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter clientId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeRefreshTokensForAuthorizationServerAndClient(authServerId: String, clientId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        revokeRefreshTokensForAuthorizationServerAndClientWithRequestBuilder(authServerId: authServerId, clientId: clientId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter clientId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func revokeRefreshTokensForAuthorizationServerAndClientWithRequestBuilder(authServerId: String, clientId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter use: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rotateAuthorizationServerKeys(authServerId: String, use: JwkUse, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [JsonWebKey]?, _ error: Error?) -> Void)) {
        rotateAuthorizationServerKeysWithRequestBuilder(authServerId: authServerId, use: use).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter use: (body)  
     - returns: RequestBuilder<[JsonWebKey]> 
     */
    open class func rotateAuthorizationServerKeysWithRequestBuilder(authServerId: String, use: JwkUse) -> RequestBuilder<[JsonWebKey]> {
        var path = "/api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: use)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[JsonWebKey]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter authorizationServer: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAuthorizationServer(authServerId: String, authorizationServer: AuthorizationServer, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthorizationServer?, _ error: Error?) -> Void)) {
        updateAuthorizationServerWithRequestBuilder(authServerId: authServerId, authorizationServer: authorizationServer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/authorizationServers/{authServerId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter authorizationServer: (body)  
     - returns: RequestBuilder<AuthorizationServer> 
     */
    open class func updateAuthorizationServerWithRequestBuilder(authServerId: String, authorizationServer: AuthorizationServer) -> RequestBuilder<AuthorizationServer> {
        var path = "/api/v1/authorizationServers/{authServerId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authorizationServer)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthorizationServer>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter policy: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAuthorizationServerPolicy(authServerId: String, policyId: String, policy: AuthorizationServerPolicy, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthorizationServerPolicy?, _ error: Error?) -> Void)) {
        updateAuthorizationServerPolicyWithRequestBuilder(authServerId: authServerId, policyId: policyId, policy: policy).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/authorizationServers/{authServerId}/policies/{policyId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter policyId: (path)  
     - parameter policy: (body)  
     - returns: RequestBuilder<AuthorizationServerPolicy> 
     */
    open class func updateAuthorizationServerPolicyWithRequestBuilder(authServerId: String, policyId: String, policy: AuthorizationServerPolicy) -> RequestBuilder<AuthorizationServerPolicy> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policy)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthorizationServerPolicy>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - parameter ruleId: (path)  
     - parameter policyRule: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAuthorizationServerPolicyRule(policyId: String, authServerId: String, ruleId: String, policyRule: AuthorizationServerPolicyRule, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthorizationServerPolicyRule?, _ error: Error?) -> Void)) {
        updateAuthorizationServerPolicyRuleWithRequestBuilder(policyId: policyId, authServerId: authServerId, ruleId: ruleId, policyRule: policyRule).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}
     - Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter policyId: (path)  
     - parameter authServerId: (path)  
     - parameter ruleId: (path)  
     - parameter policyRule: (body)  
     - returns: RequestBuilder<AuthorizationServerPolicyRule> 
     */
    open class func updateAuthorizationServerPolicyRuleWithRequestBuilder(policyId: String, authServerId: String, ruleId: String, policyRule: AuthorizationServerPolicyRule) -> RequestBuilder<AuthorizationServerPolicyRule> {
        var path = "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}"
        let policyIdPreEscape = "\(APIHelper.mapValueToPathItem(policyId))"
        let policyIdPostEscape = policyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{policyId}", with: policyIdPostEscape, options: .literal, range: nil)
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let ruleIdPreEscape = "\(APIHelper.mapValueToPathItem(ruleId))"
        let ruleIdPostEscape = ruleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ruleId}", with: ruleIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: policyRule)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthorizationServerPolicyRule>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter claimId: (path)  
     - parameter oAuth2Claim: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOAuth2Claim(authServerId: String, claimId: String, oAuth2Claim: OAuth2Claim, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Claim?, _ error: Error?) -> Void)) {
        updateOAuth2ClaimWithRequestBuilder(authServerId: authServerId, claimId: claimId, oAuth2Claim: oAuth2Claim).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/authorizationServers/{authServerId}/claims/{claimId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter claimId: (path)  
     - parameter oAuth2Claim: (body)  
     - returns: RequestBuilder<OAuth2Claim> 
     */
    open class func updateOAuth2ClaimWithRequestBuilder(authServerId: String, claimId: String, oAuth2Claim: OAuth2Claim) -> RequestBuilder<OAuth2Claim> {
        var path = "/api/v1/authorizationServers/{authServerId}/claims/{claimId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let claimIdPreEscape = "\(APIHelper.mapValueToPathItem(claimId))"
        let claimIdPostEscape = claimIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{claimId}", with: claimIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2Claim)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2Claim>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter authServerId: (path)  
     - parameter scopeId: (path)  
     - parameter oAuth2Scope: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOAuth2Scope(authServerId: String, scopeId: String, oAuth2Scope: OAuth2Scope, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Scope?, _ error: Error?) -> Void)) {
        updateOAuth2ScopeWithRequestBuilder(authServerId: authServerId, scopeId: scopeId, oAuth2Scope: oAuth2Scope).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/authorizationServers/{authServerId}/scopes/{scopeId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter authServerId: (path)  
     - parameter scopeId: (path)  
     - parameter oAuth2Scope: (body)  
     - returns: RequestBuilder<OAuth2Scope> 
     */
    open class func updateOAuth2ScopeWithRequestBuilder(authServerId: String, scopeId: String, oAuth2Scope: OAuth2Scope) -> RequestBuilder<OAuth2Scope> {
        var path = "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}"
        let authServerIdPreEscape = "\(APIHelper.mapValueToPathItem(authServerId))"
        let authServerIdPostEscape = authServerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{authServerId}", with: authServerIdPostEscape, options: .literal, range: nil)
        let scopeIdPreEscape = "\(APIHelper.mapValueToPathItem(scopeId))"
        let scopeIdPostEscape = scopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scopeId}", with: scopeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuth2Scope)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OAuth2Scope>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
