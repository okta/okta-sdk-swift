//
// UserSchemaAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class UserSchemaAPI {
    /**
     Fetches the Schema for an App User
     
     - parameter appInstanceId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getApplicationUserSchema(appInstanceId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserSchema?, _ error: Error?) -> Void)) {
        getApplicationUserSchemaWithRequestBuilder(appInstanceId: appInstanceId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetches the Schema for an App User
     - GET /api/v1/meta/schemas/apps/{appInstanceId}/default
     - Fetches the Schema for an App User
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appInstanceId: (path)  
     - returns: RequestBuilder<UserSchema> 
     */
    open class func getApplicationUserSchemaWithRequestBuilder(appInstanceId: String) -> RequestBuilder<UserSchema> {
        var path = "/api/v1/meta/schemas/apps/{appInstanceId}/default"
        let appInstanceIdPreEscape = "\(APIHelper.mapValueToPathItem(appInstanceId))"
        let appInstanceIdPostEscape = appInstanceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appInstanceId}", with: appInstanceIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserSchema>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Fetches the schema for a Schema Id.
     
     - parameter schemaId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserSchema(schemaId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserSchema?, _ error: Error?) -> Void)) {
        getUserSchemaWithRequestBuilder(schemaId: schemaId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetches the schema for a Schema Id.
     - GET /api/v1/meta/schemas/user/{schemaId}
     - Fetches the schema for a Schema Id.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter schemaId: (path)  
     - returns: RequestBuilder<UserSchema> 
     */
    open class func getUserSchemaWithRequestBuilder(schemaId: String) -> RequestBuilder<UserSchema> {
        var path = "/api/v1/meta/schemas/user/{schemaId}"
        let schemaIdPreEscape = "\(APIHelper.mapValueToPathItem(schemaId))"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserSchema>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Partial updates on the User Profile properties of the Application User Schema.
     
     - parameter appInstanceId: (path)  
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateApplicationUserProfile(appInstanceId: String, body: UserSchema? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserSchema?, _ error: Error?) -> Void)) {
        updateApplicationUserProfileWithRequestBuilder(appInstanceId: appInstanceId, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Partial updates on the User Profile properties of the Application User Schema.
     - POST /api/v1/meta/schemas/apps/{appInstanceId}/default
     - Partial updates on the User Profile properties of the Application User Schema.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter appInstanceId: (path)  
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<UserSchema> 
     */
    open class func updateApplicationUserProfileWithRequestBuilder(appInstanceId: String, body: UserSchema? = nil) -> RequestBuilder<UserSchema> {
        var path = "/api/v1/meta/schemas/apps/{appInstanceId}/default"
        let appInstanceIdPreEscape = "\(APIHelper.mapValueToPathItem(appInstanceId))"
        let appInstanceIdPostEscape = appInstanceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{appInstanceId}", with: appInstanceIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserSchema>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter schemaId: (path)  
     - parameter userSchema: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserProfile(schemaId: String, userSchema: UserSchema, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserSchema?, _ error: Error?) -> Void)) {
        updateUserProfileWithRequestBuilder(schemaId: schemaId, userSchema: userSchema).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/meta/schemas/user/{schemaId}
     - Partial updates on the User Profile properties of the user schema.
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter schemaId: (path)  
     - parameter userSchema: (body)  
     - returns: RequestBuilder<UserSchema> 
     */
    open class func updateUserProfileWithRequestBuilder(schemaId: String, userSchema: UserSchema) -> RequestBuilder<UserSchema> {
        var path = "/api/v1/meta/schemas/user/{schemaId}"
        let schemaIdPreEscape = "\(APIHelper.mapValueToPathItem(schemaId))"
        let schemaIdPostEscape = schemaIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{schemaId}", with: schemaIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userSchema)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserSchema>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
