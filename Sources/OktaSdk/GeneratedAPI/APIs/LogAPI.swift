//
// LogAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class LogAPI {
    /**
     Fetch a list of events from your Okta organization system log.
     
     - parameter since: (query)  (optional)
     - parameter until: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter limit: (query)  (optional, default to 100)
     - parameter sortOrder: (query)  (optional, default to "ASCENDING")
     - parameter after: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLogs(since: Date? = nil, until: Date? = nil, filter: String? = nil, q: String? = nil, limit: Int? = nil, sortOrder: String? = nil, after: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [LogEvent]?, _ error: Error?) -> Void)) {
        getLogsWithRequestBuilder(since: since, until: until, filter: filter, q: q, limit: limit, sortOrder: sortOrder, after: after).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Fetch a list of events from your Okta organization system log.
     - GET /api/v1/logs
     - The Okta System Log API provides read access to your organizationâ€™s system log. This API provides more functionality than the Events API
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter since: (query)  (optional)
     - parameter until: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter q: (query)  (optional)
     - parameter limit: (query)  (optional, default to 100)
     - parameter sortOrder: (query)  (optional, default to "ASCENDING")
     - parameter after: (query)  (optional)
     - returns: RequestBuilder<[LogEvent]> 
     */
    open class func getLogsWithRequestBuilder(since: Date? = nil, until: Date? = nil, filter: String? = nil, q: String? = nil, limit: Int? = nil, sortOrder: String? = nil, after: String? = nil) -> RequestBuilder<[LogEvent]> {
        let path = "/api/v1/logs"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since?.encodeToJSON(),
            "until": until?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "q": q?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sortOrder": sortOrder?.encodeToJSON(),
            "after": after?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[LogEvent]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
