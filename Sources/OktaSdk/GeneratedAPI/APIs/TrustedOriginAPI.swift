//
// TrustedOriginAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class TrustedOriginAPI {
    /**

     - parameter trustedOriginId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateOrigin(trustedOriginId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrustedOrigin?, _ error: Error?) -> Void)) {
        activateOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    open class func activateOriginWithRequestBuilder(trustedOriginId: String) -> RequestBuilder<TrustedOrigin> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOrigin: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createOrigin(trustedOrigin: TrustedOrigin, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrustedOrigin?, _ error: Error?) -> Void)) {
        createOriginWithRequestBuilder(trustedOrigin: trustedOrigin).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/trustedOrigins
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOrigin: (body)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    open class func createOriginWithRequestBuilder(trustedOrigin: TrustedOrigin) -> RequestBuilder<TrustedOrigin> {
        let path = "/api/v1/trustedOrigins"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trustedOrigin)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOriginId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateOrigin(trustedOriginId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrustedOrigin?, _ error: Error?) -> Void)) {
        deactivateOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    open class func deactivateOriginWithRequestBuilder(trustedOriginId: String) -> RequestBuilder<TrustedOrigin> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOriginId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrigin(trustedOriginId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v1/trustedOrigins/{trustedOriginId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOriginWithRequestBuilder(trustedOriginId: String) -> RequestBuilder<Void> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOriginId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrigin(trustedOriginId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrustedOrigin?, _ error: Error?) -> Void)) {
        getOriginWithRequestBuilder(trustedOriginId: trustedOriginId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/trustedOrigins/{trustedOriginId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    open class func getOriginWithRequestBuilder(trustedOriginId: String) -> RequestBuilder<TrustedOrigin> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter q: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listOrigins(q: String? = nil, filter: String? = nil, after: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TrustedOrigin]?, _ error: Error?) -> Void)) {
        listOriginsWithRequestBuilder(q: q, filter: filter, after: after, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/trustedOrigins
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter q: (query)  (optional)
     - parameter filter: (query)  (optional)
     - parameter after: (query)  (optional)
     - parameter limit: (query)  (optional, default to -1)
     - returns: RequestBuilder<[TrustedOrigin]> 
     */
    open class func listOriginsWithRequestBuilder(q: String? = nil, filter: String? = nil, after: String? = nil, limit: Int? = nil) -> RequestBuilder<[TrustedOrigin]> {
        let path = "/api/v1/trustedOrigins"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q?.encodeToJSON(),
            "filter": filter?.encodeToJSON(),
            "after": after?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[TrustedOrigin]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter trustedOriginId: (path)  
     - parameter trustedOrigin: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOrigin(trustedOriginId: String, trustedOrigin: TrustedOrigin, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TrustedOrigin?, _ error: Error?) -> Void)) {
        updateOriginWithRequestBuilder(trustedOriginId: trustedOriginId, trustedOrigin: trustedOrigin).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v1/trustedOrigins/{trustedOriginId}
     - Success
     - API Key:
       - type: apiKey Authorization 
       - name: api_token
     - parameter trustedOriginId: (path)  
     - parameter trustedOrigin: (body)  
     - returns: RequestBuilder<TrustedOrigin> 
     */
    open class func updateOriginWithRequestBuilder(trustedOriginId: String, trustedOrigin: TrustedOrigin) -> RequestBuilder<TrustedOrigin> {
        var path = "/api/v1/trustedOrigins/{trustedOriginId}"
        let trustedOriginIdPreEscape = "\(APIHelper.mapValueToPathItem(trustedOriginId))"
        let trustedOriginIdPostEscape = trustedOriginIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trustedOriginId}", with: trustedOriginIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trustedOrigin)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrustedOrigin>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
