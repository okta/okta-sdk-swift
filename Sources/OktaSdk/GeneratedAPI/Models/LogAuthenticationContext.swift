//
// LogAuthenticationContext.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct LogAuthenticationContext: Codable, Hashable {

    public var authenticationProvider: LogAuthenticationProvider?
    public var authenticationStep: Int?
    public var credentialProvider: LogCredentialProvider?
    public var credentialType: LogCredentialType?
    public var externalSessionId: String?
    public var interface: String?
    public var issuer: LogIssuer?

    public init(authenticationProvider: LogAuthenticationProvider? = nil, authenticationStep: Int? = nil, credentialProvider: LogCredentialProvider? = nil, credentialType: LogCredentialType? = nil, externalSessionId: String? = nil, interface: String? = nil, issuer: LogIssuer? = nil) {
        self.authenticationProvider = authenticationProvider
        self.authenticationStep = authenticationStep
        self.credentialProvider = credentialProvider
        self.credentialType = credentialType
        self.externalSessionId = externalSessionId
        self.interface = interface
        self.issuer = issuer
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authenticationProvider
        case authenticationStep
        case credentialProvider
        case credentialType
        case externalSessionId
        case interface
        case issuer
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authenticationProvider, forKey: .authenticationProvider)
        try container.encodeIfPresent(authenticationStep, forKey: .authenticationStep)
        try container.encodeIfPresent(credentialProvider, forKey: .credentialProvider)
        try container.encodeIfPresent(credentialType, forKey: .credentialType)
        try container.encodeIfPresent(externalSessionId, forKey: .externalSessionId)
        try container.encodeIfPresent(interface, forKey: .interface)
        try container.encodeIfPresent(issuer, forKey: .issuer)
    }



}
